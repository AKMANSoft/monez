/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/pages/form-imagecrop.init.js":
/*!***************************************************!*\
  !*** ./resources/js/pages/form-imagecrop.init.js ***!
  \***************************************************/
/***/ (() => {

eval("/*\r\nTemplate Name: Ubold - Responsive Bootstrap 4 Admin Dashboard\r\nAuthor: CoderThemes\r\nWebsite: https://coderthemes.com/\r\nContact: support@coderthemes.com\r\nFile: Image crop init js\r\n*/\n\n$(function () {\n  'use strict';\n\n  var console = window.console || {\n    log: function log() {}\n  };\n  var URL = window.URL || window.webkitURL;\n  var $image = $('#image');\n  var $download = $('#download');\n  var $dataX = $('#dataX');\n  var $dataY = $('#dataY');\n  var $dataHeight = $('#dataHeight');\n  var $dataWidth = $('#dataWidth');\n  var $dataRotate = $('#dataRotate');\n  var $dataScaleX = $('#dataScaleX');\n  var $dataScaleY = $('#dataScaleY');\n  var options = {\n    aspectRatio: 16 / 9,\n    preview: '.img-preview',\n    crop: function crop(e) {\n      $dataX.val(Math.round(e.detail.x));\n      $dataY.val(Math.round(e.detail.y));\n      $dataHeight.val(Math.round(e.detail.height));\n      $dataWidth.val(Math.round(e.detail.width));\n      $dataRotate.val(e.detail.rotate);\n      $dataScaleX.val(e.detail.scaleX);\n      $dataScaleY.val(e.detail.scaleY);\n    }\n  };\n  var originalImageURL = $image.attr('src');\n  var uploadedImageName = 'cropped.jpg';\n  var uploadedImageType = 'image/jpeg';\n  var uploadedImageURL;\n\n  // Tooltip\n  $('[data-toggle=\"tooltip\"]').tooltip();\n\n  // Cropper\n  $image.on({\n    ready: function ready(e) {\n      console.log(e.type);\n    },\n    cropstart: function cropstart(e) {\n      console.log(e.type, e.detail.action);\n    },\n    cropmove: function cropmove(e) {\n      console.log(e.type, e.detail.action);\n    },\n    cropend: function cropend(e) {\n      console.log(e.type, e.detail.action);\n    },\n    crop: function crop(e) {\n      console.log(e.type);\n    },\n    zoom: function zoom(e) {\n      console.log(e.type, e.detail.ratio);\n    }\n  }).cropper(options);\n\n  // Buttons\n  if (!$.isFunction(document.createElement('canvas').getContext)) {\n    $('button[data-method=\"getCroppedCanvas\"]').prop('disabled', true);\n  }\n  if (typeof document.createElement('cropper').style.transition === 'undefined') {\n    $('button[data-method=\"rotate\"]').prop('disabled', true);\n    $('button[data-method=\"scale\"]').prop('disabled', true);\n  }\n\n  // Download\n  if (typeof $download[0].download === 'undefined') {\n    $download.addClass('disabled');\n  }\n\n  // Options\n  $('.docs-toggles').on('change', 'input', function () {\n    var $this = $(this);\n    var name = $this.attr('name');\n    var type = $this.prop('type');\n    var cropBoxData;\n    var canvasData;\n    if (!$image.data('cropper')) {\n      return;\n    }\n    if (type === 'checkbox') {\n      options[name] = $this.prop('checked');\n      cropBoxData = $image.cropper('getCropBoxData');\n      canvasData = $image.cropper('getCanvasData');\n      options.ready = function () {\n        $image.cropper('setCropBoxData', cropBoxData);\n        $image.cropper('setCanvasData', canvasData);\n      };\n    } else if (type === 'radio') {\n      options[name] = $this.val();\n    }\n    $image.cropper('destroy').cropper(options);\n  });\n\n  // Methods\n  $('.docs-buttons').on('click', '[data-method]', function () {\n    var $this = $(this);\n    var data = $this.data();\n    var cropper = $image.data('cropper');\n    var cropped;\n    var $target;\n    var result;\n    if ($this.prop('disabled') || $this.hasClass('disabled')) {\n      return;\n    }\n    if (cropper && data.method) {\n      data = $.extend({}, data); // Clone a new one\n\n      if (typeof data.target !== 'undefined') {\n        $target = $(data.target);\n        if (typeof data.option === 'undefined') {\n          try {\n            data.option = JSON.parse($target.val());\n          } catch (e) {\n            console.log(e.message);\n          }\n        }\n      }\n      cropped = cropper.cropped;\n      switch (data.method) {\n        case 'rotate':\n          if (cropped && options.viewMode > 0) {\n            $image.cropper('clear');\n          }\n          break;\n        case 'getCroppedCanvas':\n          if (uploadedImageType === 'image/jpeg') {\n            if (!data.option) {\n              data.option = {};\n            }\n            data.option.fillColor = '#fff';\n          }\n          break;\n      }\n      result = $image.cropper(data.method, data.option, data.secondOption);\n      switch (data.method) {\n        case 'rotate':\n          if (cropped && options.viewMode > 0) {\n            $image.cropper('crop');\n          }\n          break;\n        case 'scaleX':\n        case 'scaleY':\n          $(this).data('option', -data.option);\n          break;\n        case 'getCroppedCanvas':\n          if (result) {\n            // Bootstrap's Modal\n            $('#getCroppedCanvasModal').modal().find('.modal-body').html(result);\n            if (!$download.hasClass('disabled')) {\n              download.download = uploadedImageName;\n              $download.attr('href', result.toDataURL(uploadedImageType));\n            }\n          }\n          break;\n        case 'destroy':\n          if (uploadedImageURL) {\n            URL.revokeObjectURL(uploadedImageURL);\n            uploadedImageURL = '';\n            $image.attr('src', originalImageURL);\n          }\n          break;\n      }\n      if ($.isPlainObject(result) && $target) {\n        try {\n          $target.val(JSON.stringify(result));\n        } catch (e) {\n          console.log(e.message);\n        }\n      }\n    }\n  });\n\n  // Keyboard\n  $(document.body).on('keydown', function (e) {\n    if (e.target !== this || !$image.data('cropper') || this.scrollTop > 300) {\n      return;\n    }\n    switch (e.which) {\n      case 37:\n        e.preventDefault();\n        $image.cropper('move', -1, 0);\n        break;\n      case 38:\n        e.preventDefault();\n        $image.cropper('move', 0, -1);\n        break;\n      case 39:\n        e.preventDefault();\n        $image.cropper('move', 1, 0);\n        break;\n      case 40:\n        e.preventDefault();\n        $image.cropper('move', 0, 1);\n        break;\n    }\n  });\n\n  // Import image\n  var $inputImage = $('#inputImage');\n  if (URL) {\n    $inputImage.change(function () {\n      var files = this.files;\n      var file;\n      if (!$image.data('cropper')) {\n        return;\n      }\n      if (files && files.length) {\n        file = files[0];\n        if (/^image\\/\\w+$/.test(file.type)) {\n          uploadedImageName = file.name;\n          uploadedImageType = file.type;\n          if (uploadedImageURL) {\n            URL.revokeObjectURL(uploadedImageURL);\n          }\n          uploadedImageURL = URL.createObjectURL(file);\n          $image.cropper('destroy').attr('src', uploadedImageURL).cropper(options);\n          $inputImage.val('');\n        } else {\n          window.alert('Please choose an image file.');\n        }\n      }\n    });\n  } else {\n    $inputImage.prop('disabled', true).parent().addClass('disabled');\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyIkIiwiY29uc29sZSIsIndpbmRvdyIsImxvZyIsIlVSTCIsIndlYmtpdFVSTCIsIiRpbWFnZSIsIiRkb3dubG9hZCIsIiRkYXRhWCIsIiRkYXRhWSIsIiRkYXRhSGVpZ2h0IiwiJGRhdGFXaWR0aCIsIiRkYXRhUm90YXRlIiwiJGRhdGFTY2FsZVgiLCIkZGF0YVNjYWxlWSIsIm9wdGlvbnMiLCJhc3BlY3RSYXRpbyIsInByZXZpZXciLCJjcm9wIiwiZSIsInZhbCIsIk1hdGgiLCJyb3VuZCIsImRldGFpbCIsIngiLCJ5IiwiaGVpZ2h0Iiwid2lkdGgiLCJyb3RhdGUiLCJzY2FsZVgiLCJzY2FsZVkiLCJvcmlnaW5hbEltYWdlVVJMIiwiYXR0ciIsInVwbG9hZGVkSW1hZ2VOYW1lIiwidXBsb2FkZWRJbWFnZVR5cGUiLCJ1cGxvYWRlZEltYWdlVVJMIiwidG9vbHRpcCIsIm9uIiwicmVhZHkiLCJ0eXBlIiwiY3JvcHN0YXJ0IiwiYWN0aW9uIiwiY3JvcG1vdmUiLCJjcm9wZW5kIiwiem9vbSIsInJhdGlvIiwiY3JvcHBlciIsImlzRnVuY3Rpb24iLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJnZXRDb250ZXh0IiwicHJvcCIsInN0eWxlIiwidHJhbnNpdGlvbiIsImRvd25sb2FkIiwiYWRkQ2xhc3MiLCIkdGhpcyIsIm5hbWUiLCJjcm9wQm94RGF0YSIsImNhbnZhc0RhdGEiLCJkYXRhIiwiY3JvcHBlZCIsIiR0YXJnZXQiLCJyZXN1bHQiLCJoYXNDbGFzcyIsIm1ldGhvZCIsImV4dGVuZCIsInRhcmdldCIsIm9wdGlvbiIsIkpTT04iLCJwYXJzZSIsIm1lc3NhZ2UiLCJ2aWV3TW9kZSIsImZpbGxDb2xvciIsInNlY29uZE9wdGlvbiIsIm1vZGFsIiwiZmluZCIsImh0bWwiLCJ0b0RhdGFVUkwiLCJyZXZva2VPYmplY3RVUkwiLCJpc1BsYWluT2JqZWN0Iiwic3RyaW5naWZ5IiwiYm9keSIsInNjcm9sbFRvcCIsIndoaWNoIiwicHJldmVudERlZmF1bHQiLCIkaW5wdXRJbWFnZSIsImNoYW5nZSIsImZpbGVzIiwiZmlsZSIsImxlbmd0aCIsInRlc3QiLCJjcmVhdGVPYmplY3RVUkwiLCJhbGVydCIsInBhcmVudCJdLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91Ym9sZC1sYXJhdmVsLy4vcmVzb3VyY2VzL2pzL3BhZ2VzL2Zvcm0taW1hZ2Vjcm9wLmluaXQuanM/ODgxNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG5UZW1wbGF0ZSBOYW1lOiBVYm9sZCAtIFJlc3BvbnNpdmUgQm9vdHN0cmFwIDQgQWRtaW4gRGFzaGJvYXJkXHJcbkF1dGhvcjogQ29kZXJUaGVtZXNcclxuV2Vic2l0ZTogaHR0cHM6Ly9jb2RlcnRoZW1lcy5jb20vXHJcbkNvbnRhY3Q6IHN1cHBvcnRAY29kZXJ0aGVtZXMuY29tXHJcbkZpbGU6IEltYWdlIGNyb3AgaW5pdCBqc1xyXG4qL1xyXG5cclxuJChmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgdmFyIGNvbnNvbGUgPSB3aW5kb3cuY29uc29sZSB8fCB7IGxvZzogZnVuY3Rpb24gKCkgeyB9IH07XHJcbiAgICB2YXIgVVJMID0gd2luZG93LlVSTCB8fCB3aW5kb3cud2Via2l0VVJMO1xyXG4gICAgdmFyICRpbWFnZSA9ICQoJyNpbWFnZScpO1xyXG4gICAgdmFyICRkb3dubG9hZCA9ICQoJyNkb3dubG9hZCcpO1xyXG4gICAgdmFyICRkYXRhWCA9ICQoJyNkYXRhWCcpO1xyXG4gICAgdmFyICRkYXRhWSA9ICQoJyNkYXRhWScpO1xyXG4gICAgdmFyICRkYXRhSGVpZ2h0ID0gJCgnI2RhdGFIZWlnaHQnKTtcclxuICAgIHZhciAkZGF0YVdpZHRoID0gJCgnI2RhdGFXaWR0aCcpO1xyXG4gICAgdmFyICRkYXRhUm90YXRlID0gJCgnI2RhdGFSb3RhdGUnKTtcclxuICAgIHZhciAkZGF0YVNjYWxlWCA9ICQoJyNkYXRhU2NhbGVYJyk7XHJcbiAgICB2YXIgJGRhdGFTY2FsZVkgPSAkKCcjZGF0YVNjYWxlWScpO1xyXG4gICAgdmFyIG9wdGlvbnMgPSB7XHJcbiAgICAgICAgYXNwZWN0UmF0aW86IDE2IC8gOSxcclxuICAgICAgICBwcmV2aWV3OiAnLmltZy1wcmV2aWV3JyxcclxuICAgICAgICBjcm9wOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAkZGF0YVgudmFsKE1hdGgucm91bmQoZS5kZXRhaWwueCkpO1xyXG4gICAgICAgICAgICAkZGF0YVkudmFsKE1hdGgucm91bmQoZS5kZXRhaWwueSkpO1xyXG4gICAgICAgICAgICAkZGF0YUhlaWdodC52YWwoTWF0aC5yb3VuZChlLmRldGFpbC5oZWlnaHQpKTtcclxuICAgICAgICAgICAgJGRhdGFXaWR0aC52YWwoTWF0aC5yb3VuZChlLmRldGFpbC53aWR0aCkpO1xyXG4gICAgICAgICAgICAkZGF0YVJvdGF0ZS52YWwoZS5kZXRhaWwucm90YXRlKTtcclxuICAgICAgICAgICAgJGRhdGFTY2FsZVgudmFsKGUuZGV0YWlsLnNjYWxlWCk7XHJcbiAgICAgICAgICAgICRkYXRhU2NhbGVZLnZhbChlLmRldGFpbC5zY2FsZVkpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICB2YXIgb3JpZ2luYWxJbWFnZVVSTCA9ICRpbWFnZS5hdHRyKCdzcmMnKTtcclxuICAgIHZhciB1cGxvYWRlZEltYWdlTmFtZSA9ICdjcm9wcGVkLmpwZyc7XHJcbiAgICB2YXIgdXBsb2FkZWRJbWFnZVR5cGUgPSAnaW1hZ2UvanBlZyc7XHJcbiAgICB2YXIgdXBsb2FkZWRJbWFnZVVSTDtcclxuXHJcbiAgICAvLyBUb29sdGlwXHJcbiAgICAkKCdbZGF0YS10b2dnbGU9XCJ0b29sdGlwXCJdJykudG9vbHRpcCgpO1xyXG5cclxuICAgIC8vIENyb3BwZXJcclxuICAgICRpbWFnZS5vbih7XHJcbiAgICAgICAgcmVhZHk6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGUudHlwZSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBjcm9wc3RhcnQ6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGUudHlwZSwgZS5kZXRhaWwuYWN0aW9uKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNyb3Btb3ZlOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlLnR5cGUsIGUuZGV0YWlsLmFjdGlvbik7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBjcm9wZW5kOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlLnR5cGUsIGUuZGV0YWlsLmFjdGlvbik7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBjcm9wOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlLnR5cGUpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgem9vbTogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coZS50eXBlLCBlLmRldGFpbC5yYXRpbyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSkuY3JvcHBlcihvcHRpb25zKTtcclxuXHJcbiAgICAvLyBCdXR0b25zXHJcbiAgICBpZiAoISQuaXNGdW5jdGlvbihkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKS5nZXRDb250ZXh0KSkge1xyXG4gICAgICAgICQoJ2J1dHRvbltkYXRhLW1ldGhvZD1cImdldENyb3BwZWRDYW52YXNcIl0nKS5wcm9wKCdkaXNhYmxlZCcsIHRydWUpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY3JvcHBlcicpLnN0eWxlLnRyYW5zaXRpb24gPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgJCgnYnV0dG9uW2RhdGEtbWV0aG9kPVwicm90YXRlXCJdJykucHJvcCgnZGlzYWJsZWQnLCB0cnVlKTtcclxuICAgICAgICAkKCdidXR0b25bZGF0YS1tZXRob2Q9XCJzY2FsZVwiXScpLnByb3AoJ2Rpc2FibGVkJywgdHJ1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRG93bmxvYWRcclxuICAgIGlmICh0eXBlb2YgJGRvd25sb2FkWzBdLmRvd25sb2FkID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICRkb3dubG9hZC5hZGRDbGFzcygnZGlzYWJsZWQnKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBPcHRpb25zXHJcbiAgICAkKCcuZG9jcy10b2dnbGVzJykub24oJ2NoYW5nZScsICdpbnB1dCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpO1xyXG4gICAgICAgIHZhciBuYW1lID0gJHRoaXMuYXR0cignbmFtZScpO1xyXG4gICAgICAgIHZhciB0eXBlID0gJHRoaXMucHJvcCgndHlwZScpO1xyXG4gICAgICAgIHZhciBjcm9wQm94RGF0YTtcclxuICAgICAgICB2YXIgY2FudmFzRGF0YTtcclxuXHJcbiAgICAgICAgaWYgKCEkaW1hZ2UuZGF0YSgnY3JvcHBlcicpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0eXBlID09PSAnY2hlY2tib3gnKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnNbbmFtZV0gPSAkdGhpcy5wcm9wKCdjaGVja2VkJyk7XHJcbiAgICAgICAgICAgIGNyb3BCb3hEYXRhID0gJGltYWdlLmNyb3BwZXIoJ2dldENyb3BCb3hEYXRhJyk7XHJcbiAgICAgICAgICAgIGNhbnZhc0RhdGEgPSAkaW1hZ2UuY3JvcHBlcignZ2V0Q2FudmFzRGF0YScpO1xyXG5cclxuICAgICAgICAgICAgb3B0aW9ucy5yZWFkeSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICRpbWFnZS5jcm9wcGVyKCdzZXRDcm9wQm94RGF0YScsIGNyb3BCb3hEYXRhKTtcclxuICAgICAgICAgICAgICAgICRpbWFnZS5jcm9wcGVyKCdzZXRDYW52YXNEYXRhJywgY2FudmFzRGF0YSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAncmFkaW8nKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnNbbmFtZV0gPSAkdGhpcy52YWwoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICRpbWFnZS5jcm9wcGVyKCdkZXN0cm95JykuY3JvcHBlcihvcHRpb25zKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIE1ldGhvZHNcclxuICAgICQoJy5kb2NzLWJ1dHRvbnMnKS5vbignY2xpY2snLCAnW2RhdGEtbWV0aG9kXScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpO1xyXG4gICAgICAgIHZhciBkYXRhID0gJHRoaXMuZGF0YSgpO1xyXG4gICAgICAgIHZhciBjcm9wcGVyID0gJGltYWdlLmRhdGEoJ2Nyb3BwZXInKTtcclxuICAgICAgICB2YXIgY3JvcHBlZDtcclxuICAgICAgICB2YXIgJHRhcmdldDtcclxuICAgICAgICB2YXIgcmVzdWx0O1xyXG5cclxuICAgICAgICBpZiAoJHRoaXMucHJvcCgnZGlzYWJsZWQnKSB8fCAkdGhpcy5oYXNDbGFzcygnZGlzYWJsZWQnKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY3JvcHBlciAmJiBkYXRhLm1ldGhvZCkge1xyXG4gICAgICAgICAgICBkYXRhID0gJC5leHRlbmQoe30sIGRhdGEpOyAvLyBDbG9uZSBhIG5ldyBvbmVcclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZGF0YS50YXJnZXQgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAkdGFyZ2V0ID0gJChkYXRhLnRhcmdldCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkYXRhLm9wdGlvbiA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLm9wdGlvbiA9IEpTT04ucGFyc2UoJHRhcmdldC52YWwoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY3JvcHBlZCA9IGNyb3BwZXIuY3JvcHBlZDtcclxuXHJcbiAgICAgICAgICAgIHN3aXRjaCAoZGF0YS5tZXRob2QpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3JvdGF0ZSc6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNyb3BwZWQgJiYgb3B0aW9ucy52aWV3TW9kZSA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGltYWdlLmNyb3BwZXIoJ2NsZWFyJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlICdnZXRDcm9wcGVkQ2FudmFzJzpcclxuICAgICAgICAgICAgICAgICAgICBpZiAodXBsb2FkZWRJbWFnZVR5cGUgPT09ICdpbWFnZS9qcGVnJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWRhdGEub3B0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLm9wdGlvbiA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLm9wdGlvbi5maWxsQ29sb3IgPSAnI2ZmZic7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmVzdWx0ID0gJGltYWdlLmNyb3BwZXIoZGF0YS5tZXRob2QsIGRhdGEub3B0aW9uLCBkYXRhLnNlY29uZE9wdGlvbik7XHJcblxyXG4gICAgICAgICAgICBzd2l0Y2ggKGRhdGEubWV0aG9kKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdyb3RhdGUnOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjcm9wcGVkICYmIG9wdGlvbnMudmlld01vZGUgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRpbWFnZS5jcm9wcGVyKCdjcm9wJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlICdzY2FsZVgnOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnc2NhbGVZJzpcclxuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmRhdGEoJ29wdGlvbicsIC1kYXRhLm9wdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSAnZ2V0Q3JvcHBlZENhbnZhcyc6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBCb290c3RyYXAncyBNb2RhbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcjZ2V0Q3JvcHBlZENhbnZhc01vZGFsJykubW9kYWwoKS5maW5kKCcubW9kYWwtYm9keScpLmh0bWwocmVzdWx0KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghJGRvd25sb2FkLmhhc0NsYXNzKCdkaXNhYmxlZCcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb3dubG9hZC5kb3dubG9hZCA9IHVwbG9hZGVkSW1hZ2VOYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGRvd25sb2FkLmF0dHIoJ2hyZWYnLCByZXN1bHQudG9EYXRhVVJMKHVwbG9hZGVkSW1hZ2VUeXBlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgJ2Rlc3Ryb3knOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1cGxvYWRlZEltYWdlVVJMKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFVSTC5yZXZva2VPYmplY3RVUkwodXBsb2FkZWRJbWFnZVVSTCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwbG9hZGVkSW1hZ2VVUkwgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGltYWdlLmF0dHIoJ3NyYycsIG9yaWdpbmFsSW1hZ2VVUkwpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICgkLmlzUGxhaW5PYmplY3QocmVzdWx0KSAmJiAkdGFyZ2V0KSB7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICR0YXJnZXQudmFsKEpTT04uc3RyaW5naWZ5KHJlc3VsdCkpO1xyXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBLZXlib2FyZFxyXG4gICAgJChkb2N1bWVudC5ib2R5KS5vbigna2V5ZG93bicsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgaWYgKGUudGFyZ2V0ICE9PSB0aGlzIHx8ICEkaW1hZ2UuZGF0YSgnY3JvcHBlcicpIHx8IHRoaXMuc2Nyb2xsVG9wID4gMzAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN3aXRjaCAoZS53aGljaCkge1xyXG4gICAgICAgICAgICBjYXNlIDM3OlxyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgJGltYWdlLmNyb3BwZXIoJ21vdmUnLCAtMSwgMCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgIGNhc2UgMzg6XHJcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAkaW1hZ2UuY3JvcHBlcignbW92ZScsIDAsIC0xKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgY2FzZSAzOTpcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICRpbWFnZS5jcm9wcGVyKCdtb3ZlJywgMSwgMCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgIGNhc2UgNDA6XHJcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAkaW1hZ2UuY3JvcHBlcignbW92ZScsIDAsIDEpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gSW1wb3J0IGltYWdlXHJcbiAgICB2YXIgJGlucHV0SW1hZ2UgPSAkKCcjaW5wdXRJbWFnZScpO1xyXG5cclxuICAgIGlmIChVUkwpIHtcclxuICAgICAgICAkaW5wdXRJbWFnZS5jaGFuZ2UoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgZmlsZXMgPSB0aGlzLmZpbGVzO1xyXG4gICAgICAgICAgICB2YXIgZmlsZTtcclxuXHJcbiAgICAgICAgICAgIGlmICghJGltYWdlLmRhdGEoJ2Nyb3BwZXInKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoZmlsZXMgJiYgZmlsZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBmaWxlID0gZmlsZXNbMF07XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKC9eaW1hZ2VcXC9cXHcrJC8udGVzdChmaWxlLnR5cGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXBsb2FkZWRJbWFnZU5hbWUgPSBmaWxlLm5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdXBsb2FkZWRJbWFnZVR5cGUgPSBmaWxlLnR5cGU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1cGxvYWRlZEltYWdlVVJMKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFVSTC5yZXZva2VPYmplY3RVUkwodXBsb2FkZWRJbWFnZVVSTCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB1cGxvYWRlZEltYWdlVVJMID0gVVJMLmNyZWF0ZU9iamVjdFVSTChmaWxlKTtcclxuICAgICAgICAgICAgICAgICAgICAkaW1hZ2UuY3JvcHBlcignZGVzdHJveScpLmF0dHIoJ3NyYycsIHVwbG9hZGVkSW1hZ2VVUkwpLmNyb3BwZXIob3B0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGlucHV0SW1hZ2UudmFsKCcnKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmFsZXJ0KCdQbGVhc2UgY2hvb3NlIGFuIGltYWdlIGZpbGUuJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgJGlucHV0SW1hZ2UucHJvcCgnZGlzYWJsZWQnLCB0cnVlKS5wYXJl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QUFHdUQsSUFBSSxDQUFDbEQsSUFBSTtVQUU3QixJQUFJSixnQkFBZ0IsRUFBRTtZQUNsQi9CLEdBQUcsQ0FBQzJFLGVBQWUsQ0FBQzVDLGdCQUFnQixDQUFDO1VBQ3pDO1VBRUFBLGdCQUFnQixHQUFHL0IsR0FBRyxDQUFDd0YsZUFBZSxDQUFDSCxJQUFJLENBQUM7VUFDNUNuRixNQUFNLENBQUN3QyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUNkLElBQUksQ0FBQyxLQUFLLEVBQUVHLGdCQUFnQixDQUFDLENBQUNXLE9BQU8sQ0FBQy9CLE9BQU8sQ0FBQztVQUN4RXVFLFdBQVcsQ0FBQ2xFLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDdkIsQ0FBQyxNQUFNO1VBQ0hsQixNQUFNLENBQUMyRixLQUFLLENBQUMsOEJBQThCLENBQUM7UUFDaEQ7TUFDSjtJQUNKLENBQUMsQ0FBQztFQUNOLENBQUMsTUFBTTtJQUNIUCxXQUFXLENBQUNuQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDMkMsTUFBTSxFQUFFLENBQUN2QyxRQUFRLENBQUMsVUFBVSxDQUFDO0VBQ3BFO0FBQ0osQ0FBQyxDQUFDIiwiZmlsZSI6Ii4vcmVzb3VyY2VzL2pzL3BhZ2VzL2Zvcm0taW1hZ2Vjcm9wLmluaXQuanMuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/pages/form-imagecrop.init.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/pages/form-imagecrop.init.js"]();
/******/ 	
/******/ })()
;