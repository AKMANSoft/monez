/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/pages/chartjs.init.js":
/*!********************************************!*\
  !*** ./resources/js/pages/chartjs.init.js ***!
  \********************************************/
/***/ (() => {

eval("/*\r\nTemplate Name: Ubold - Responsive Bootstrap 4 Admin Dashboard\r\nAuthor: CoderThemes\r\nWebsite: https://coderthemes.com/\r\nContact: support@coderthemes.com\r\nFile: Chart js init\r\n*/\n\n!function ($) {\n  \"use strict\";\n\n  var ChartJs = function ChartJs() {\n    this.$body = $(\"body\"), this.charts = [];\n  };\n  ChartJs.prototype.respChart = function (selector, type, data, options) {\n    // get selector by context\n    var ctx = selector.get(0).getContext(\"2d\");\n    // pointing parent container to make chart js inherit its width\n    var container = $(selector).parent();\n\n    //default config\n    Chart.defaults.global.defaultFontColor = \"#8391a2\";\n    Chart.defaults.scale.gridLines.color = \"#8391a2\";\n\n    // this function produce the responsive Chart JS\n    function generateChart() {\n      // make chart width fit with its container\n      var ww = selector.attr('width', $(container).width());\n      var chart;\n      switch (type) {\n        case 'Line':\n          chart = new Chart(ctx, {\n            type: 'line',\n            data: data,\n            options: options\n          });\n          break;\n        case 'Doughnut':\n          chart = new Chart(ctx, {\n            type: 'doughnut',\n            data: data,\n            options: options\n          });\n          break;\n        case 'Pie':\n          chart = new Chart(ctx, {\n            type: 'pie',\n            data: data,\n            options: options\n          });\n          break;\n        case 'Bar':\n          chart = new Chart(ctx, {\n            type: 'bar',\n            data: data,\n            options: options\n          });\n          break;\n        case 'Radar':\n          chart = new Chart(ctx, {\n            type: 'radar',\n            data: data,\n            options: options\n          });\n          break;\n        case 'PolarArea':\n          chart = new Chart(ctx, {\n            data: data,\n            type: 'polarArea',\n            options: options\n          });\n          break;\n      }\n      return chart;\n    }\n    ;\n    // run function - render chart at first load\n    return generateChart();\n  },\n  // init various charts and returns\n  ChartJs.prototype.initCharts = function () {\n    var charts = [];\n    var defaultColors = [\"#1abc9c\", \"#f1556c\", \"#4a81d4\", \"#e3eaef\"];\n    if ($('#line-chart-example').length > 0) {\n      var dataColors = $(\"#line-chart-example\").data('colors');\n      var colors = dataColors ? dataColors.split(\",\") : defaultColors.concat();\n      var lineChart = {\n        labels: [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"],\n        datasets: [{\n          label: \"Current Week\",\n          backgroundColor: hexToRGB(colors[0], 0.3),\n          borderColor: colors[0],\n          data: [32, 42, 42, 62, 52, 75, 62]\n        }, {\n          label: \"Previous Week\",\n          fill: true,\n          backgroundColor: 'transparent',\n          borderColor: colors[1],\n          borderDash: [5, 5],\n          data: [42, 58, 66, 93, 82, 105, 92]\n        }]\n      };\n      var lineOpts = {\n        maintainAspectRatio: false,\n        legend: {\n          display: false\n        },\n        tooltips: {\n          intersect: false\n        },\n        hover: {\n          intersect: true\n        },\n        plugins: {\n          filler: {\n            propagate: false\n          }\n        },\n        scales: {\n          xAxes: [{\n            reverse: true,\n            gridLines: {\n              color: \"rgba(0,0,0,0.05)\"\n            }\n          }],\n          yAxes: [{\n            ticks: {\n              stepSize: 20\n            },\n            display: true,\n            borderDash: [5, 5],\n            gridLines: {\n              color: \"rgba(0,0,0,0)\",\n              fontColor: '#fff'\n            }\n          }]\n        }\n      };\n      charts.push(this.respChart($(\"#line-chart-example\"), 'Line', lineChart, lineOpts));\n    }\n\n    //barchart\n    if ($('#bar-chart-example').length > 0) {\n      var dataColors = $(\"#bar-chart-example\").data('colors');\n      var colors = dataColors ? dataColors.split(\",\") : defaultColors.concat();\n      var barChart = {\n        // labels: [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"],\n        labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n        datasets: [{\n          label: \"Sales Analytics\",\n          backgroundColor: colors[0],\n          borderColor: colors[0],\n          hoverBackgroundColor: colors[0],\n          hoverBorderColor: colors[0],\n          data: [65, 59, 80, 81, 56, 89, 40, 32, 65, 59, 80, 81]\n        }, {\n          label: \"Dollar Rate\",\n          backgroundColor: colors[1],\n          borderColor: colors[1],\n          hoverBackgroundColor: colors[1],\n          hoverBorderColor: colors[1],\n          data: [89, 40, 32, 65, 59, 80, 81, 56, 89, 40, 65, 59]\n        }]\n      };\n      var barOpts = {\n        maintainAspectRatio: false,\n        legend: {\n          display: false\n        },\n        scales: {\n          yAxes: [{\n            gridLines: {\n              display: false\n            },\n            stacked: false,\n            ticks: {\n              stepSize: 20\n            }\n          }],\n          xAxes: [{\n            barPercentage: 0.7,\n            categoryPercentage: 0.5,\n            stacked: false,\n            gridLines: {\n              color: \"rgba(0,0,0,0.01)\"\n            }\n          }]\n        }\n      };\n      charts.push(this.respChart($(\"#bar-chart-example\"), 'Bar', barChart, barOpts));\n    }\n    if ($('#pie-chart-example').length > 0) {\n      var dataColors = $(\"#pie-chart-example\").data('colors');\n      var colors = dataColors ? dataColors.split(\",\") : defaultColors.concat();\n      //pie chart\n      var pieChart = {\n        labels: [\"Direct\", \"Affilliate\", \"Sponsored\", \"E-mail\"],\n        datasets: [{\n          data: [300, 135, 48, 154],\n          backgroundColor: colors,\n          borderColor: \"transparent\"\n        }]\n      };\n      var pieOpts = {\n        maintainAspectRatio: false,\n        legend: {\n          display: false\n        }\n      };\n      charts.push(this.respChart($(\"#pie-chart-example\"), 'Pie', pieChart, pieOpts));\n    }\n    if ($('#donut-chart-example').length > 0) {\n      //donut chart\n      var dataColors = $(\"#donut-chart-example\").data('colors');\n      var colors = dataColors ? dataColors.split(\",\") : defaultColors.concat();\n      var donutChart = {\n        labels: [\"Direct\", \"Affilliate\", \"Sponsored\"],\n        datasets: [{\n          data: [128, 78, 48],\n          backgroundColor: colors,\n          borderColor: \"transparent\",\n          borderWidth: \"3\"\n        }]\n      };\n      var donutOpts = {\n        maintainAspectRatio: false,\n        cutoutPercentage: 60,\n        legend: {\n          display: false\n        }\n      };\n      charts.push(this.respChart($(\"#donut-chart-example\"), 'Doughnut', donutChart, donutOpts));\n    }\n    if ($('#polar-chart-example').length > 0) {\n      //Ploar chart\n      var dataColors = $(\"#polar-chart-example\").data('colors');\n      var colors = dataColors ? dataColors.split(\",\") : defaultColors.concat();\n      var polarChart = {\n        labels: [\"Direct\", \"Affilliate\", \"Sponsored\", \"E-mail\"],\n        datasets: [{\n          data: [251, 135, 48, 154],\n          backgroundColor: colors,\n          borderColor: \"transparent\"\n        }]\n      };\n      charts.push(this.respChart($(\"#polar-chart-example\"), 'PolarArea', polarChart));\n    }\n    if ($('#radar-chart-example').length > 0) {\n      var dataColors = $(\"#radar-chart-example\").data('colors');\n      var colors = dataColors ? dataColors.split(\",\") : defaultColors.concat();\n      //radar chart\n      var radarChart = {\n        labels: [\"Eating\", \"Drinking\", \"Sleeping\", \"Designing\", \"Coding\", \"Cycling\", \"Running\"],\n        datasets: [{\n          label: \"Desktops\",\n          backgroundColor: hexToRGB(colors[0], 0.3),\n          borderColor: colors[0],\n          pointBackgroundColor: colors[0],\n          pointBorderColor: \"#fff\",\n          pointHoverBackgroundColor: \"#fff\",\n          pointHoverBorderColor: colors[0],\n          data: [65, 59, 90, 81, 56, 55, 40]\n        }, {\n          label: \"Tablets\",\n          backgroundColor: hexToRGB(colors[1], 0.3),\n          borderColor: colors[1],\n          pointBackgroundColor: colors[1],\n          pointBorderColor: \"#fff\",\n          pointHoverBackgroundColor: \"#fff\",\n          pointHoverBorderColor: colors[1],\n          data: [28, 48, 40, 19, 96, 27, 100]\n        }]\n      };\n      var radarOpts = {\n        maintainAspectRatio: false\n      };\n      charts.push(this.respChart($(\"#radar-chart-example\"), 'Radar', radarChart, radarOpts));\n    }\n    return charts;\n  },\n  //initializing various components and plugins\n  ChartJs.prototype.init = function () {\n    var $this = this;\n    // font\n    Chart.defaults.global.defaultFontFamily = 'Nunito,sans-serif';\n\n    // init charts\n    $this.charts = this.initCharts();\n\n    // enable resizing matter\n    $(window).on('resize', function (e) {\n      $.each($this.charts, function (index, chart) {\n        try {\n          chart.destroy();\n        } catch (err) {}\n      });\n      $this.charts = $this.initCharts();\n    });\n  },\n  //init flotchart\n  $.ChartJs = new ChartJs(), $.ChartJs.Constructor = ChartJs;\n}(window.jQuery),\n//initializing ChartJs\nfunction ($) {\n  \"use strict\";\n\n  $.ChartJs.init();\n}(window.jQuery);\n\n/* utility function */\n\nfunction hexToRGB(hex, alpha) {\n  var r = parseInt(hex.slice(1, 3), 16),\n    g = parseInt(hex.slice(3, 5), 16),\n    b = parseInt(hex.slice(5, 7), 16);\n  if (alpha) {\n    return \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + alpha + \")\";\n  } else {\n    return \"rgb(\" + r + \", \" + g + \", \" + b + \")\";\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/pages/chartjs.init.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/pages/chartjs.init.js"]();
/******/ 	
/******/ })()
;