/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/pages/apexcharts.init.js":
/*!***********************************************!*\
  !*** ./resources/js/pages/apexcharts.init.js ***!
  \***********************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n/*\r\nTemplate Name: UBold - Responsive Bootstrap 4 Admin Dashboard\r\nAuthor: CoderThemes\r\nWebsite: https://coderthemes.com/\r\nContact: support@coderthemes.com\r\nFile: Apex Charts\r\n*/\n\nApex.grid = {\n  padding: {\n    right: 0,\n    left: 0\n  }\n};\nApex.dataLabels = {\n  enabled: false\n};\nvar randomizeArray = function randomizeArray(arg) {\n  var array = arg.slice();\n  var currentIndex = array.length,\n    temporaryValue,\n    randomIndex;\n  while (0 !== currentIndex) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n  return array;\n};\n\n// data for the sparklines that appear below header area\nvar sparklineData = [47, 45, 54, 38, 56, 24, 65, 31, 37, 39, 62, 51, 35, 41, 35, 27, 93, 53, 61, 27, 54, 43, 19, 46];\n\n// the default colorPalette for this dashboard\n//var colorPalette = ['#01BFD6', '#5564BE', '#F7A600', '#EDCD24', '#F74F58'];\nvar colorPalette = ['#00D8B6', '#008FFB', '#FEB019', '#FF4560', '#775DD0'];\nvar colors = ['#6658dd'];\nvar dataColors = $(\"#spark1\").data('colors');\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\nvar spark1 = {\n  chart: {\n    type: 'area',\n    height: 160,\n    sparkline: {\n      enabled: true\n    }\n  },\n  stroke: {\n    width: 2,\n    curve: 'straight'\n  },\n  fill: {\n    opacity: 0.2\n  },\n  series: [{\n    name: 'UBold Sales ',\n    data: randomizeArray(sparklineData)\n  }],\n  yaxis: {\n    min: 0\n  },\n  colors: colors,\n  title: {\n    text: '$424,652',\n    offsetX: 10,\n    style: {\n      fontSize: '22px'\n    }\n  },\n  subtitle: {\n    text: 'Total Sales',\n    offsetX: 10,\n    offsetY: 35,\n    style: {\n      fontSize: '13px'\n    }\n  }\n};\nnew ApexCharts(document.querySelector(\"#spark1\"), spark1).render();\nvar colors = ['#DCE6EC'];\nvar dataColors = $(\"#spark2\").data('colors');\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\nvar spark2 = {\n  chart: {\n    type: 'area',\n    height: 160,\n    sparkline: {\n      enabled: true\n    }\n  },\n  stroke: {\n    width: 2,\n    curve: 'straight'\n  },\n  fill: {\n    opacity: 0.2\n  },\n  series: [{\n    name: 'UBold Expenses ',\n    data: randomizeArray(sparklineData)\n  }],\n  yaxis: {\n    min: 0\n  },\n  colors: colors,\n  title: {\n    text: '$235,312',\n    offsetX: 10,\n    style: {\n      fontSize: '22px'\n    }\n  },\n  subtitle: {\n    text: 'Expenses',\n    offsetX: 10,\n    offsetY: 35,\n    style: {\n      fontSize: '13px'\n    }\n  }\n};\nnew ApexCharts(document.querySelector(\"#spark2\"), spark2).render();\n\n// Sparkline 2\nvar colors = ['#f672a7'];\nvar dataColors = $(\"#spark3\").data('colors');\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\nvar spark3 = {\n  chart: {\n    type: 'area',\n    height: 160,\n    sparkline: {\n      enabled: true\n    }\n  },\n  stroke: {\n    width: 2,\n    curve: 'straight'\n  },\n  fill: {\n    opacity: 0.2\n  },\n  series: [{\n    name: 'Net Profits ',\n    data: randomizeArray(sparklineData)\n  }],\n  xaxis: {\n    crosshairs: {\n      width: 1\n    }\n  },\n  yaxis: {\n    min: 0\n  },\n  colors: colors,\n  title: {\n    text: '$135,965',\n    offsetX: 10,\n    style: {\n      fontSize: '22px'\n    }\n  },\n  subtitle: {\n    text: 'Profits',\n    offsetX: 10,\n    offsetY: 35,\n    style: {\n      fontSize: '13px'\n    }\n  }\n};\nnew ApexCharts(document.querySelector(\"#spark3\"), spark3).render();\n\n//\n// Line with Data Labels\n//\nvar colors = ['#6658dd', '#1abc9c'];\nvar dataColors = $(\"#apex-line-1\").data('colors');\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\nvar options = {\n  chart: {\n    height: 380,\n    type: 'line',\n    zoom: {\n      enabled: false\n    },\n    toolbar: {\n      show: false\n    }\n  },\n  colors: colors,\n  dataLabels: {\n    enabled: true\n  },\n  stroke: {\n    width: [3, 3],\n    curve: 'smooth'\n  },\n  series: [{\n    name: \"High - 2018\",\n    data: [28, 29, 33, 36, 32, 32, 33]\n  }, {\n    name: \"Low - 2018\",\n    data: [12, 11, 14, 18, 17, 13, 13]\n  }],\n  title: {\n    text: 'Average High & Low Temperature',\n    align: 'left',\n    style: {\n      fontSize: \"14px\",\n      color: '#666'\n    }\n  },\n  grid: {\n    row: {\n      colors: ['transparent', 'transparent'],\n      // takes an array which will be repeated on columns\n      opacity: 0.2\n    },\n    borderColor: '#f1f3fa'\n  },\n  markers: {\n    style: 'inverted',\n    size: 6\n  },\n  xaxis: {\n    categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n    title: {\n      text: 'Month'\n    }\n  },\n  yaxis: {\n    title: {\n      text: 'Temperature'\n    },\n    min: 5,\n    max: 40\n  },\n  legend: {\n    position: 'top',\n    horizontalAlign: 'right',\n    floating: true,\n    offsetY: -25,\n    offsetX: -5\n  },\n  responsive: [{\n    breakpoint: 600,\n    options: {\n      chart: {\n        toolbar: {\n          show: false\n        }\n      },\n      legend: {\n        show: false\n      }\n    }\n  }]\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-line-1\"), options);\nchart.render();\n\n//\n// Gradient Line Chart\n//\nvar colors = ['#f672a7'];\nvar dataColors = $(\"#apex-line-2\").data('colors');\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\nvar options = {\n  chart: {\n    height: 380,\n    type: 'line',\n    shadow: {\n      enabled: false,\n      color: '#bbb',\n      top: 3,\n      left: 2,\n      blur: 3,\n      opacity: 1\n    }\n  },\n  stroke: {\n    width: 5,\n    curve: 'smooth'\n  },\n  series: [{\n    name: 'Likes',\n    data: [4, 3, 10, 9, 29, 19, 22, 9, 12, 7, 19, 5, 13, 9, 17, 2, 7, 5]\n  }],\n  xaxis: {\n    type: 'datetime',\n    categories: ['1/11/2000', '2/11/2000', '3/11/2000', '4/11/2000', '5/11/2000', '6/11/2000', '7/11/2000', '8/11/2000', '9/11/2000', '10/11/2000', '11/11/2000', '12/11/2000', '1/11/2001', '2/11/2001', '3/11/2001', '4/11/2001', '5/11/2001', '6/11/2001']\n  },\n  title: {\n    text: 'Social Media',\n    align: 'left',\n    style: {\n      fontSize: \"14px\",\n      color: '#666'\n    }\n  },\n  fill: {\n    type: 'gradient',\n    gradient: {\n      shade: 'dark',\n      gradientToColors: colors,\n      shadeIntensity: 1,\n      type: 'horizontal',\n      opacityFrom: 1,\n      opacityTo: 1,\n      stops: [0, 100, 100, 100]\n    }\n  },\n  markers: {\n    size: 4,\n    opacity: 0.9,\n    colors: [\"#56c2d6\"],\n    strokeColor: \"#fff\",\n    strokeWidth: 2,\n    style: 'inverted',\n    // full, hollow, inverted\n    hover: {\n      size: 7\n    }\n  },\n  yaxis: {\n    min: -10,\n    max: 40,\n    title: {\n      text: 'Engagement'\n    }\n  },\n  grid: {\n    row: {\n      colors: ['transparent', 'transparent'],\n      // takes an array which will be repeated on columns\n      opacity: 0.2\n    },\n    borderColor: '#185a9d'\n  },\n  responsive: [{\n    breakpoint: 600,\n    options: {\n      chart: {\n        toolbar: {\n          show: false\n        }\n      },\n      legend: {\n        show: false\n      }\n    }\n  }]\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-line-2\"), options);\nchart.render();\n\n//\n// Area Chart\n//\nvar colors = ['#6658dd', '#f7b84b', '#CED4DC'];\nvar dataColors = $(\"#apex-area\").data('colors');\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\nvar options = {\n  chart: {\n    height: 380,\n    type: 'area',\n    stacked: true,\n    events: {\n      selection: function selection(chart, e) {\n        console.log(new Date(e.xaxis.min));\n      }\n    }\n  },\n  colors: colors,\n  dataLabels: {\n    enabled: false\n  },\n  stroke: {\n    width: [2],\n    curve: 'smooth'\n  },\n  series: [{\n    name: 'South',\n    data: generateDayWiseTimeSeries(new Date('11 Feb 2017 GMT').getTime(), 20, {\n      min: 10,\n      max: 60\n    })\n  }, {\n    name: 'North',\n    data: generateDayWiseTimeSeries(new Date('11 Feb 2017 GMT').getTime(), 20, {\n      min: 10,\n      max: 20\n    })\n  }, {\n    name: 'Central',\n    data: generateDayWiseTimeSeries(new Date('11 Feb 2017 GMT').getTime(), 20, {\n      min: 10,\n      max: 15\n    })\n  }],\n  fill: {\n    type: 'gradient',\n    gradient: {\n      opacityFrom: 0.6,\n      opacityTo: 0.8\n    }\n  },\n  legend: {\n    position: 'top',\n    horizontalAlign: 'left'\n  },\n  xaxis: {\n    type: 'datetime'\n  }\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-area\"), options);\nchart.render();\n\n/*\r\n  // this function will generate output in this format\r\n  // data = [\r\n      [timestamp, 23],\r\n      [timestamp, 33],\r\n      [timestamp, 12]\r\n      ...\r\n  ]\r\n  */\nfunction generateDayWiseTimeSeries(baseval, count, yrange) {\n  var i = 0;\n  var series = [];\n  while (i < count) {\n    var x = baseval;\n    var y = Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min;\n    series.push([x, y]);\n    baseval += 86400000;\n    i++;\n  }\n  return series;\n}\n\n//\n// Column Chart - 1\n//\nvar colors = ['#6658dd', '#1abc9c', '#CED4DC'];\nvar dataColors = $(\"#apex-column-1\").data('colors');\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\nvar options = {\n  chart: {\n    height: 380,\n    type: 'bar',\n    toolbar: {\n      show: false\n    }\n  },\n  plotOptions: {\n    bar: {\n      horizontal: false,\n      endingShape: 'rounded',\n      columnWidth: '55%'\n    }\n  },\n  dataLabels: {\n    enabled: false\n  },\n  stroke: {\n    show: true,\n    width: 2,\n    colors: ['transparent']\n  },\n  colors: colors,\n  series: [{\n    name: 'Net Profit',\n    data: [44, 55, 57, 56, 61, 58, 63, 60, 66]\n  }, {\n    name: 'Revenue',\n    data: [76, 85, 101, 98, 87, 105, 91, 114, 94]\n  }, {\n    name: 'Free Cash Flow',\n    data: [35, 41, 36, 26, 45, 48, 52, 53, 41]\n  }],\n  xaxis: {\n    categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct']\n  },\n  legend: {\n    offsetY: 5\n  },\n  yaxis: {\n    title: {\n      text: '$ (thousands)'\n    }\n  },\n  fill: {\n    opacity: 1\n  },\n  grid: {\n    row: {\n      colors: ['transparent', 'transparent'],\n      // takes an array which will be repeated on columns\n      opacity: 0.2\n    },\n    borderColor: '#f1f3fa',\n    padding: {\n      bottom: 10\n    }\n  },\n  tooltip: {\n    y: {\n      formatter: function formatter(val) {\n        return \"$ \" + val + \" thousands\";\n      }\n    }\n  }\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-column-1\"), options);\nchart.render();\n\n//\n// Column Chart - 2\n//\nvar colors = ['#6658dd'];\nvar dataColors = $(\"#apex-column-2\").data('colors');\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\nvar options = {\n  chart: {\n    height: 380,\n    type: 'bar',\n    toolbar: {\n      show: false\n    }\n  },\n  plotOptions: {\n    bar: {\n      dataLabels: {\n        position: 'top' // top, center, bottom\n      }\n    }\n  },\n\n  dataLabels: {\n    enabled: true,\n    formatter: function formatter(val) {\n      return val + \"%\";\n    },\n    offsetY: -30,\n    style: {\n      fontSize: '12px',\n      colors: [\"#304758\"]\n    }\n  },\n  colors: colors,\n  series: [{\n    name: 'Inflation',\n    data: [2.3, 3.1, 4.0, 10.1, 4.0, 3.6, 3.2, 2.3, 1.4, 0.8, 0.5, 0.2]\n  }],\n  xaxis: {\n    categories: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n    position: 'top',\n    labels: {\n      offsetY: -18\n    },\n    axisBorder: {\n      show: false\n    },\n    axisTicks: {\n      show: false\n    },\n    crosshairs: {\n      fill: {\n        type: 'gradient',\n        gradient: {\n          colorFrom: '#D8E3F0',\n          colorTo: '#BED1E6',\n          stops: [0, 100],\n          opacityFrom: 0.4,\n          opacityTo: 0.5\n        }\n      }\n    },\n    tooltip: {\n      enabled: true,\n      offsetY: -35\n    }\n  },\n  fill: {\n    gradient: {\n      enabled: false,\n      shade: 'light',\n      type: \"horizontal\",\n      shadeIntensity: 0.25,\n      gradientToColors: undefined,\n      inverseColors: true,\n      opacityFrom: 1,\n      opacityTo: 1,\n      stops: [50, 0, 100, 100]\n    }\n  },\n  yaxis: {\n    axisBorder: {\n      show: false\n    },\n    axisTicks: {\n      show: false\n    },\n    labels: {\n      show: false,\n      formatter: function formatter(val) {\n        return val + \"%\";\n      }\n    }\n  },\n  title: {\n    text: 'Monthly Inflation in Argentina, 2002',\n    floating: true,\n    offsetY: 350,\n    align: 'center',\n    style: {\n      color: '#444'\n    }\n  },\n  grid: {\n    row: {\n      colors: ['transparent', 'transparent'],\n      // takes an array which will be repeated on columns\n      opacity: 0.2\n    },\n    borderColor: '#f1f3fa'\n  }\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-column-2\"), options);\nchart.render();\n\n//\n// Mixed Chart - 1\n//\nvar colors = ['#CED4DC', '#6658dd'];\nvar dataColors = $(\"#apex-mixed-1\").data('colors');\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\nvar options = {\n  chart: {\n    height: 380,\n    type: 'line'\n  },\n  stroke: {\n    width: 2,\n    curve: 'smooth'\n  },\n  series: [{\n    name: 'TEAM A',\n    type: 'area',\n    data: [44, 55, 31, 47, 31, 43, 26, 41, 31, 47, 33]\n  }, {\n    name: 'TEAM B',\n    type: 'line',\n    data: [55, 69, 45, 61, 43, 54, 37, 52, 44, 61, 43]\n  }],\n  colors: colors,\n  fill: {\n    type: 'solid',\n    opacity: [0.35, 1]\n  },\n  labels: ['Dec 01', 'Dec 02', 'Dec 03', 'Dec 04', 'Dec 05', 'Dec 06', 'Dec 07', 'Dec 08', 'Dec 09 ', 'Dec 10', 'Dec 11'],\n  markers: {\n    size: 0\n  },\n  yaxis: [{\n    title: {\n      text: 'Series A'\n    }\n  }, {\n    opposite: true,\n    title: {\n      text: 'Series B'\n    }\n  }],\n  tooltip: {\n    shared: true,\n    intersect: false,\n    y: {\n      formatter: function formatter(y) {\n        if (typeof y !== \"undefined\") {\n          return y.toFixed(0) + \" points\";\n        }\n        return y;\n      }\n    }\n  },\n  legend: {\n    offsetY: 7\n  }\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-mixed-1\"), options);\nchart.render();\n\n//\n// Bar Chart - 1\n//\nvar colors = ['#1abc9c'];\nvar dataColors = $(\"#apex-bar-1\").data('colors');\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\nvar options = {\n  chart: {\n    height: 380,\n    type: 'bar',\n    toolbar: {\n      show: false\n    }\n  },\n  plotOptions: {\n    bar: {\n      horizontal: true\n    }\n  },\n  dataLabels: {\n    enabled: false\n  },\n  series: [{\n    data: [400, 430, 448, 470, 540, 580, 690, 1100, 1200, 1380]\n  }],\n  colors: colors,\n  xaxis: {\n    categories: ['South Korea', 'Canada', 'United Kingdom', 'Netherlands', 'Italy', 'France', 'Japan', 'United States', 'China', 'Germany']\n  },\n  states: {\n    hover: {\n      filter: 'none'\n    }\n  },\n  grid: {\n    borderColor: '#f1f3fa'\n  }\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-bar-1\"), options);\nchart.render();\n\n//\n// Bar Chart - 2\n//\nvar colors = ['#6658dd', '#1abc9c'];\nvar dataColors = $(\"#apex-bar-2\").data('colors');\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\nvar options = _defineProperty({\n  chart: {\n    height: 380,\n    type: 'bar',\n    stacked: true,\n    toolbar: {\n      show: false\n    }\n  },\n  colors: colors,\n  plotOptions: {\n    bar: {\n      horizontal: true,\n      barHeight: '80%'\n    }\n  },\n  dataLabels: {\n    enabled: false\n  },\n  stroke: {\n    width: 1,\n    colors: [\"#fff\"]\n  },\n  series: [{\n    name: 'Males',\n    data: [0.4, 0.65, 0.76, 0.88, 1.5, 2.1, 2.9, 3.8, 3.9, 4.2, 4, 4.3, 4.1, 4.2, 4.5, 3.9, 3.5, 3]\n  }, {\n    name: 'Females',\n    data: [-0.8, -1.05, -1.06, -1.18, -1.4, -2.2, -2.85, -3.7, -3.96, -4.22, -4.3, -4.4, -4.1, -4, -4.1, -3.4, -3.1, -2.8]\n  }],\n  grid: {\n    xaxis: {\n      showLines: false\n    }\n  },\n  yaxis: {\n    min: -5,\n    max: 5,\n    title: {\n      // text: 'Age',\n    }\n  },\n  tooltip: {\n    shared: false,\n    x: {\n      formatter: function formatter(val) {\n        return val;\n      }\n    },\n    y: {\n      formatter: function formatter(val) {\n        return Math.abs(val) + \"%\";\n      }\n    }\n  },\n  xaxis: {\n    categories: ['85+', '80-84', '75-79', '70-74', '65-69', '60-64', '55-59', '50-54', '45-49', '40-44', '35-39', '30-34', '25-29', '20-24', '15-19', '10-14', '5-9', '0-4'],\n    title: {\n      text: 'Percent'\n    },\n    labels: {\n      formatter: function formatter(val) {\n        return Math.abs(Math.round(val)) + \"%\";\n      }\n    }\n  },\n  legend: {\n    offsetY: 7\n  }\n}, \"grid\", {\n  borderColor: '#f1f3fa'\n});\nvar chart = new ApexCharts(document.querySelector(\"#apex-bar-2\"), options);\nchart.render();\n\n//\n// Mixed Chart - 2\n//\nvar colors = ['#6658dd', '#1abc9c', \"#f672a7\"];\nvar dataColors = $(\"#apex-mixed-2\").data('colors');\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\nvar options = {\n  chart: {\n    height: 380,\n    type: 'line',\n    padding: {\n      right: 0,\n      left: 0\n    },\n    stacked: false,\n    toolbar: {\n      show: false\n    }\n  },\n  stroke: {\n    width: [0, 2, 4],\n    curve: 'smooth'\n  },\n  plotOptions: {\n    bar: {\n      columnWidth: '50%'\n    }\n  },\n  colors: colors,\n  series: [{\n    name: 'Team A',\n    type: 'column',\n    data: [23, 11, 22, 27, 13, 22, 37, 21, 44, 22, 30]\n  }, {\n    name: 'Team B',\n    type: 'area',\n    data: [44, 55, 41, 67, 22, 43, 21, 41, 56, 27, 43]\n  }, {\n    name: 'Team C',\n    type: 'line',\n    data: [30, 25, 36, 30, 45, 35, 64, 52, 59, 36, 39]\n  }],\n  fill: {\n    opacity: [0.85, 0.25, 1],\n    gradient: {\n      inverseColors: false,\n      shade: 'light',\n      type: \"vertical\",\n      opacityFrom: 0.85,\n      opacityTo: 0.55,\n      stops: [0, 100, 100, 100]\n    }\n  },\n  labels: ['01/01/2003', '02/01/2003', '03/01/2003', '04/01/2003', '05/01/2003', '06/01/2003', '07/01/2003', '08/01/2003', '09/01/2003', '10/01/2003', '11/01/2003'],\n  markers: {\n    size: 0\n  },\n  legend: {\n    offsetY: 7\n  },\n  xaxis: {\n    type: 'datetime'\n  },\n  yaxis: {\n    title: {\n      text: 'Points'\n    }\n  },\n  tooltip: {\n    shared: true,\n    intersect: false,\n    y: {\n      formatter: function formatter(y) {\n        if (typeof y !== \"undefined\") {\n          return y.toFixed(0) + \" points\";\n        }\n        return y;\n      }\n    }\n  },\n  grid: {\n    borderColor: '#f1f3fa',\n    padding: {\n      bottom: 10\n    }\n  }\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-mixed-2\"), options);\nchart.render();\n\n//\n// Mixed Chart - 3\n//\nvar colors = [\"#6658dd,#ebf2f6,#f672a7\"];\nvar dataColors = $(\"#apex-mixed-3\").data('colors');\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\nvar options = {\n  chart: {\n    height: 380,\n    type: 'line',\n    stacked: false,\n    toolbar: {\n      show: false\n    }\n  },\n  dataLabels: {\n    enabled: false\n  },\n  stroke: {\n    width: [0, 0, 3]\n  },\n  series: [{\n    name: 'Income',\n    type: 'column',\n    data: [1.4, 2, 2.5, 1.5, 2.5, 2.8, 3.8, 4.6]\n  }, {\n    name: 'Cashflow',\n    type: 'column',\n    data: [1.1, 3, 3.1, 4, 4.1, 4.9, 6.5, 8.5]\n  }, {\n    name: 'Revenue',\n    type: 'line',\n    data: [20, 29, 37, 36, 44, 45, 50, 58]\n  }],\n  colors: colors,\n  xaxis: {\n    categories: [2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016]\n  },\n  yaxis: [{\n    axisTicks: {\n      show: true\n    },\n    axisBorder: {\n      show: true,\n      color: '#675db7'\n    },\n    labels: {\n      style: {\n        color: '#675db7'\n      }\n    },\n    title: {\n      text: \"Income (thousand crores)\"\n    }\n  }, {\n    axisTicks: {\n      show: true\n    },\n    axisBorder: {\n      show: true,\n      color: '#23b397'\n    },\n    labels: {\n      style: {\n        color: '#23b397'\n      },\n      offsetX: 10\n    },\n    title: {\n      text: \"Operating Cashflow (thousand crores)\"\n    }\n  }, {\n    opposite: true,\n    axisTicks: {\n      show: true\n    },\n    axisBorder: {\n      show: true,\n      color: '#e36498'\n    },\n    labels: {\n      style: {\n        color: '#e36498'\n      }\n    },\n    title: {\n      text: \"Revenue (thousand crores)\"\n    }\n  }],\n  tooltip: {\n    followCursor: true,\n    y: {\n      formatter: function formatter(y) {\n        if (typeof y !== \"undefined\") {\n          return y + \" thousand crores\";\n        }\n        return y;\n      }\n    }\n  },\n  grid: {\n    borderColor: '#f1f3fa',\n    padding: {\n      bottom: 10\n    }\n  },\n  legend: {\n    offsetY: 7\n  },\n  responsive: [{\n    breakpoint: 600,\n    options: {\n      yaxis: {\n        show: false\n      },\n      legend: {\n        show: false\n      }\n    }\n  }]\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-mixed-3\"), options);\nchart.render();\n\n//\n// Bubble Chart - 1\n//\n\nfunction generateData(baseval, count, yrange) {\n  var i = 0;\n  var series = [];\n  while (i < count) {\n    var x = Math.floor(Math.random() * (750 - 1 + 1)) + 1;\n    ;\n    var y = Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min;\n    var z = Math.floor(Math.random() * (75 - 15 + 1)) + 15;\n    series.push([x, y, z]);\n    baseval += 86400000;\n    i++;\n  }\n  return series;\n}\nvar colors = ['#6658dd,#1abc9c,#f672a7'];\nvar dataColors = $(\"#apex-bubble-1\").data('colors');\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\nvar options = {\n  chart: {\n    height: 380,\n    type: 'bubble',\n    toolbar: {\n      show: false\n    }\n  },\n  dataLabels: {\n    enabled: false\n  },\n  series: [{\n    name: 'Bubble 1',\n    data: generateData(new Date('11 Feb 2017 GMT').getTime(), 20, {\n      min: 10,\n      max: 60\n    })\n  }, {\n    name: 'Bubble 2',\n    data: generateData(new Date('11 Feb 2017 GMT').getTime(), 20, {\n      min: 10,\n      max: 60\n    })\n  }, {\n    name: 'Bubble 3',\n    data: generateData(new Date('11 Feb 2017 GMT').getTime(), 20, {\n      min: 10,\n      max: 60\n    })\n  }],\n  fill: {\n    opacity: 0.8,\n    gradient: {\n      enabled: false\n    }\n  },\n  colors: colors,\n  xaxis: {\n    tickAmount: 12,\n    type: 'category'\n  },\n  yaxis: {\n    max: 70\n  },\n  grid: {\n    borderColor: '#f1f3fa',\n    padding: {\n      bottom: 10\n    }\n  },\n  legend: {\n    offsetY: 7\n  }\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-bubble-1\"), options);\nchart.render();\n\n//\n// Bubble Chart - 2\n//\n\n/*\r\n// this function will generate output in this format\r\n// data = [\r\n  [timestamp, 23],\r\n  [timestamp, 33],\r\n  [timestamp, 12]\r\n  ...\r\n]\r\n*/\nfunction generateData1(baseval1, count, yrange) {\n  var i = 0;\n  var series = [];\n  while (i < count) {\n    //var x =Math.floor(Math.random() * (750 - 1 + 1)) + 1;;\n    var y = Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min;\n    var z = Math.floor(Math.random() * (75 - 15 + 1)) + 15;\n    series.push([baseval1, y, z]);\n    baseval1 += 86400000;\n    i++;\n  }\n  return series;\n}\nvar colors = ['#6658dd,#1abc9c,#f672a7,#6c757d'];\nvar dataColors = $(\"#apex-bubble-2\").data('colors');\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\nvar options2 = {\n  chart: {\n    height: 380,\n    type: 'bubble',\n    toolbar: {\n      show: false\n    }\n  },\n  dataLabels: {\n    enabled: false\n  },\n  series: [{\n    name: 'Product 1',\n    data: generateData1(new Date('11 Feb 2017 GMT').getTime(), 20, {\n      min: 10,\n      max: 60\n    })\n  }, {\n    name: 'Product 2',\n    data: generateData1(new Date('11 Feb 2017 GMT').getTime(), 20, {\n      min: 10,\n      max: 60\n    })\n  }, {\n    name: 'Product 3',\n    data: generateData1(new Date('11 Feb 2017 GMT').getTime(), 20, {\n      min: 10,\n      max: 60\n    })\n  }, {\n    name: 'Product 4',\n    data: generateData1(new Date('11 Feb 2017 GMT').getTime(), 20, {\n      min: 10,\n      max: 60\n    })\n  }],\n  fill: {\n    type: 'gradient'\n  },\n  colors: colors,\n  xaxis: {\n    tickAmount: 12,\n    type: 'datetime',\n    labels: {\n      rotate: 0\n    }\n  },\n  yaxis: {\n    max: 70\n  },\n  legend: {\n    offsetY: 7\n  },\n  grid: {\n    borderColor: '#f1f3fa',\n    padding: {\n      bottom: 10\n    }\n  }\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-bubble-2\"), options2);\nchart.render();\n\n//\n// Scatter Chart - 1\n//\n\nvar colors = ['#1abc9c', \"#f672a7\", \"#6c757d\"];\nvar dataColors = $(\"#apex-scatter-1\").data('colors');\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\nvar options = {\n  chart: {\n    height: 380,\n    type: 'scatter',\n    zoom: {\n      enabled: false\n    }\n  },\n  series: [{\n    name: \"Sample A\",\n    data: [[16.4, 5.4], [21.7, 2], [25.4, 3], [19, 2], [10.9, 1], [13.6, 3.2], [10.9, 7.4], [10.9, 0], [10.9, 8.2], [16.4, 0], [16.4, 1.8], [13.6, 0.3], [13.6, 0], [29.9, 0], [27.1, 2.3], [16.4, 0], [13.6, 3.7], [10.9, 5.2], [16.4, 6.5], [10.9, 0], [24.5, 7.1], [10.9, 0], [8.1, 4.7], [19, 0], [21.7, 1.8], [27.1, 0], [24.5, 0], [27.1, 0], [29.9, 1.5], [27.1, 0.8], [22.1, 2]]\n  }, {\n    name: \"Sample B\",\n    data: [[6.4, 13.4], [1.7, 11], [5.4, 8], [9, 17], [1.9, 4], [3.6, 12.2], [1.9, 14.4], [1.9, 9], [1.9, 13.2], [1.4, 7], [6.4, 8.8], [3.6, 4.3], [1.6, 10], [9.9, 2], [7.1, 15], [1.4, 0], [3.6, 13.7], [1.9, 15.2], [6.4, 16.5], [0.9, 10], [4.5, 17.1], [10.9, 10], [0.1, 14.7], [9, 10], [12.7, 11.8], [2.1, 10], [2.5, 10], [27.1, 10], [2.9, 11.5], [7.1, 10.8], [2.1, 12]]\n  }, {\n    name: \"Sample C\",\n    data: [[21.7, 3], [23.6, 3.5], [24.6, 3], [29.9, 3], [21.7, 20], [23, 2], [10.9, 3], [28, 4], [27.1, 0.3], [16.4, 4], [13.6, 0], [19, 5], [22.4, 3], [24.5, 3], [32.6, 3], [27.1, 4], [29.6, 6], [31.6, 8], [21.6, 5], [20.9, 4], [22.4, 0], [32.6, 10.3], [29.7, 20.8], [24.5, 0.8], [21.4, 0], [21.7, 6.9], [28.6, 7.7], [15.4, 0], [18.1, 0], [33.4, 0], [16.4, 0]]\n  }],\n  xaxis: {\n    tickAmount: 10\n  },\n  yaxis: {\n    tickAmount: 7\n  },\n  colors: colors,\n  grid: {\n    borderColor: '#f1f3fa',\n    padding: {\n      bottom: 10\n    }\n  },\n  legend: {\n    offsetY: 7\n  },\n  responsive: [{\n    breakpoint: 600,\n    options: {\n      chart: {\n        toolbar: {\n          show: false\n        }\n      },\n      legend: {\n        show: false\n      }\n    }\n  }]\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-scatter-1\"), options);\nchart.render();\n\n//\n// Scatter Chart - 2\n//\n\nvar colors = ['#1abc9c', \"#f672a7\", \"#6c757d\", \"#6658dd\", \"#6559cc\"];\nvar dataColors = $(\"#apex-scatter-2\").data('colors');\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\nvar options = {\n  chart: {\n    height: 380,\n    type: 'scatter',\n    zoom: {\n      type: 'xy'\n    }\n  },\n  series: [{\n    name: 'Team 1',\n    data: generateDayWiseTimeSeries(new Date('11 Feb 2017 GMT').getTime(), 20, {\n      min: 10,\n      max: 60\n    })\n  }, {\n    name: 'Team 2',\n    data: generateDayWiseTimeSeries(new Date('11 Feb 2017 GMT').getTime(), 20, {\n      min: 10,\n      max: 60\n    })\n  }, {\n    name: 'Team 3',\n    data: generateDayWiseTimeSeries(new Date('11 Feb 2017 GMT').getTime(), 30, {\n      min: 10,\n      max: 60\n    })\n  }, {\n    name: 'Team 4',\n    data: generateDayWiseTimeSeries(new Date('11 Feb 2017 GMT').getTime(), 10, {\n      min: 10,\n      max: 60\n    })\n  }, {\n    name: 'Team 5',\n    data: generateDayWiseTimeSeries(new Date('11 Feb 2017 GMT').getTime(), 30, {\n      min: 10,\n      max: 60\n    })\n  }],\n  dataLabels: {\n    enabled: false\n  },\n  colors: colors,\n  grid: {\n    borderColor: '#f1f3fa',\n    xaxis: {\n      showLines: true\n    },\n    yaxis: {\n      showLines: true\n    },\n    padding: {\n      bottom: 10\n    }\n  },\n  legend: {\n    offsetY: 7\n  },\n  xaxis: {\n    type: 'datetime'\n  },\n  yaxis: {\n    max: 70\n  },\n  responsive: [{\n    breakpoint: 600,\n    options: {\n      chart: {\n        toolbar: {\n          show: false\n        }\n      },\n      legend: {\n        show: false\n      }\n    }\n  }]\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-scatter-2\"), options);\nchart.render();\n\n/*\r\n// this function will generate output in this format\r\n// data = [\r\n  [timestamp, 23],\r\n  [timestamp, 33],\r\n  [timestamp, 12]\r\n  ...\r\n]\r\n*/\n\n//\n// Candlestick Chart - 1\n//\nvar colors = ['#6658dd', '#1abc9c'];\nvar dataColors = $(\"#apex-candlestick-1\").data('colors');\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\nvar options = {\n  chart: {\n    height: 400,\n    type: 'candlestick'\n  },\n  plotOptions: {\n    candlestick: {\n      colors: {\n        upward: colors[0],\n        downward: colors[1]\n      }\n    }\n  },\n  series: [{\n    data: seriesData\n  }],\n  stroke: {\n    show: true,\n    colors: '#f1f3fa',\n    width: [1, 4]\n  },\n  xaxis: {\n    type: 'datetime'\n  },\n  grid: {\n    borderColor: '#f1f3fa'\n  }\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-candlestick-1\"), options);\nchart.render();\n\n//\n// Candlestick Chart - 2\n//\nvar colors = ['#6658dd', '#f7b84b'];\nvar dataColors = $(\"#apex-candlestick-2\").data('colors');\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\nvar optionsCandlestick = {\n  chart: {\n    height: 240,\n    type: 'candlestick',\n    toolbar: {\n      show: false\n    },\n    zoom: {\n      enabled: false\n    }\n  },\n  series: [{\n    data: seriesData\n  }],\n  plotOptions: {\n    candlestick: {\n      colors: {\n        upward: colors[0],\n        downward: colors[1]\n      }\n    }\n  },\n  xaxis: {\n    type: 'datetime'\n  },\n  grid: {\n    borderColor: '#f1f3fa'\n  }\n};\nvar chartCandlestick = new ApexCharts(document.querySelector(\"#apex-candlestick-2\"), optionsCandlestick);\nchartCandlestick.render();\n\n//\n// Candlestick Chart - 3\n//\nvar colors = ['#f45454', '#37cde6'];\nvar dataColors = $(\"#apex-candlestick-3\").data('colors');\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\nvar options = {\n  chart: {\n    height: 160,\n    type: 'bar',\n    toolbar: {\n      show: false,\n      autoSelected: 'selection'\n    },\n    selection: {\n      xaxis: {\n        min: new Date('20 Jan 2017').getTime(),\n        max: new Date('10 Dec 2017').getTime()\n      },\n      fill: {\n        color: '#6c757d',\n        opacity: 0.4\n      },\n      stroke: {\n        color: '#6c757d'\n      }\n    },\n    events: {\n      selection: function selection(chart, e) {\n        chartCandlestick.updateOptions({\n          xaxis: {\n            min: e.xaxis.min,\n            max: e.xaxis.max\n          }\n        }, false, false);\n      }\n    }\n  },\n  dataLabels: {\n    enabled: false\n  },\n  plotOptions: {\n    bar: {\n      columnWidth: '80%',\n      colors: {\n        ranges: [{\n          from: -1000,\n          to: 0,\n          color: colors[0]\n        }, {\n          from: 1,\n          to: 10000,\n          color: colors[1]\n        }]\n      }\n    }\n  },\n  series: [{\n    name: 'volume',\n    data: seriesDataLinear\n  }],\n  xaxis: {\n    type: 'datetime',\n    axisBorder: {\n      offsetX: 13\n    }\n  },\n  yaxis: {\n    labels: {\n      show: false\n    }\n  },\n  grid: {\n    borderColor: '#f1f3fa'\n  }\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-candlestick-3\"), options);\nchart.render();\n\n//\n// Pie Chart -1\n//\nvar colors = [\"#6658dd\", \"#4fc6e1\", \"#4a81d4\", \"#00b19d\", \"#f1556c\"];\nvar dataColors = $(\"#apex-pie-1\").data('colors');\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\nvar options = {\n  chart: {\n    height: 320,\n    type: 'pie'\n  },\n  series: [44, 55, 41, 17, 15],\n  labels: [\"Series 1\", \"Series 2\", \"Series 3\", \"Series 4\", \"Series 5\"],\n  colors: colors,\n  legend: {\n    show: true,\n    position: 'bottom',\n    horizontalAlign: 'center',\n    verticalAlign: 'middle',\n    floating: false,\n    fontSize: '14px',\n    offsetX: 0,\n    offsetY: 7\n  },\n  responsive: [{\n    breakpoint: 600,\n    options: {\n      chart: {\n        height: 240\n      },\n      legend: {\n        show: false\n      }\n    }\n  }]\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-pie-1\"), options);\nchart.render();\n\n//\n// Pie Chart - 2\n//\nvar colors = [\"#6658dd\", \"#4fc6e1\", \"#4a81d4\", \"#00b19d\", \"#f1556c\"];\nvar dataColors = $(\"#apex-pie-2\").data('colors');\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\nvar options = {\n  chart: {\n    height: 320,\n    type: 'donut'\n  },\n  series: [44, 55, 41, 17, 15],\n  legend: {\n    show: true,\n    position: 'bottom',\n    horizontalAlign: 'center',\n    verticalAlign: 'middle',\n    floating: false,\n    fontSize: '14px',\n    offsetX: 0,\n    offsetY: 7\n  },\n  labels: [\"Series 1\", \"Series 2\", \"Series 3\", \"Series 4\", \"Series 5\"],\n  colors: colors,\n  responsive: [{\n    breakpoint: 600,\n    options: {\n      chart: {\n        height: 240\n      },\n      legend: {\n        show: false\n      }\n    }\n  }],\n  fill: {\n    type: 'gradient'\n  }\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-pie-2\"), options);\nchart.render();\n\n//\n// Pie Chart - 3\n//\nvar colors = [\"#6658dd\", \"#4fc6e1\", \"#4a81d4\", \"#00b19d\", \"#f1556c\"];\nvar dataColors = $(\"#apex-pie-3\").data('colors');\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\nvar options = {\n  chart: {\n    height: 320,\n    type: 'donut',\n    dropShadow: {\n      enabled: true,\n      color: '#111',\n      top: -1,\n      left: 3,\n      blur: 3,\n      opacity: 0.2\n    }\n  },\n  stroke: {\n    show: true,\n    width: 2\n  },\n  series: [44, 55, 41, 17, 15],\n  colors: colors,\n  labels: [\"Comedy\", \"Action\", \"SciFi\", \"Drama\", \"Horror\"],\n  dataLabels: {\n    dropShadow: {\n      blur: 3,\n      opacity: 0.8\n    }\n  },\n  fill: {\n    type: 'pattern',\n    opacity: 1,\n    pattern: {\n      enabled: true,\n      style: ['verticalLines', 'squares', 'horizontalLines', 'circles', 'slantedLines']\n    }\n  },\n  states: {\n    hover: {\n      enabled: false\n    }\n  },\n  legend: {\n    show: true,\n    position: 'bottom',\n    horizontalAlign: 'center',\n    verticalAlign: 'middle',\n    floating: false,\n    fontSize: '14px',\n    offsetX: 0,\n    offsetY: 7\n  },\n  responsive: [{\n    breakpoint: 600,\n    options: {\n      chart: {\n        height: 240\n      },\n      legend: {\n        show: false\n      }\n    }\n  }]\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-pie-3\"), options);\nchart.render();\n\n//\n// Radialbar Chart -1\n//\nvar colors = ['#6c757d'];\nvar dataColors = $(\"#apex-radialbar-1\").data('colors');\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\nvar options = {\n  chart: {\n    height: 350,\n    type: 'radialBar'\n  },\n  plotOptions: {\n    radialBar: {\n      hollow: {\n        size: '70%'\n      }\n    }\n  },\n  colors: [\"#6c757d\"],\n  series: [70],\n  labels: ['CRICKET']\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-radialbar-1\"), options);\nchart.render();\n\n//\n// Radialbar Chart - 2\n//\nvar colors = [\"#6658dd\", \"#e36498\", \"#23b397\", \"#f7b84b\"];\nvar dataColors = $(\"#apex-radialbar-2\").data('colors');\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\nvar options = {\n  chart: {\n    height: 350,\n    type: 'radialBar'\n  },\n  plotOptions: {\n    radialBar: {\n      dataLabels: {\n        name: {\n          fontSize: '22px'\n        },\n        value: {\n          fontSize: '16px'\n        },\n        total: {\n          show: true,\n          label: 'Total',\n          formatter: function formatter(w) {\n            // By default this function returns the average of all series. The below is just an example to show the use of custom formatter function\n            return 249;\n          }\n        }\n      }\n    }\n  },\n  colors: colors,\n  series: [44, 55, 67, 83],\n  labels: ['Apples', 'Oranges', 'Bananas', 'Berries']\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-radialbar-2\"), options);\nchart.render();\n\n//\n// Radialbar Chart - 3\n//\nvar colors = ['#f1556c'];\nvar dataColors = $(\"#apex-radialbar-3\").data('colors');\nif (dataColors) {\n  colors = dataColors.split(\",\");\n}\nvar options = {\n  chart: {\n    height: 375,\n    type: 'radialBar'\n  },\n  plotOptions: {\n    radialBar: {\n      startAngle: -135,\n      endAngle: 135,\n      dataLabels: {\n        name: {\n          fontSize: '16px',\n          color: undefined,\n          offsetY: 120\n        },\n        value: {\n          offsetY: 76,\n          fontSize: '22px',\n          color: undefined,\n          formatter: function formatter(val) {\n            return val + \"%\";\n          }\n        }\n      }\n    }\n  },\n  fill: {\n    gradient: {\n      enabled: true,\n      shade: 'dark',\n      shadeIntensity: 0.15,\n      inverseColors: false,\n      opacityFrom: 1,\n      opacityTo: 1,\n      stops: [0, 50, 65, 91]\n    }\n  },\n  stroke: {\n    dashArray: 4\n  },\n  colors: colors,\n  series: [67],\n  labels: ['Median Ratio'],\n  responsive: [{\n    breakpoint: 380,\n    options: {\n      chart: {\n        height: 280\n      }\n    }\n  }]\n};\nvar chart = new ApexCharts(document.querySelector(\"#apex-radialbar-3\"), options);\nchart.render();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvcGFnZXMvYXBleGNoYXJ0cy5pbml0LmpzLmpzIiwibmFtZXMiOlsiQXBleCIsImdyaWQiLCJwYWRkaW5nIiwicmlnaHQiLCJsZWZ0IiwiZGF0YUxhYmVscyIsImVuYWJsZWQiLCJyYW5kb21pemVBcnJheSIsImFyZyIsImFycmF5Iiwic2xpY2UiLCJjdXJyZW50SW5kZXgiLCJsZW5ndGgiLCJ0ZW1wb3JhcnlWYWx1ZSIsInJhbmRvbUluZGV4IiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwic3BhcmtsaW5lRGF0YSIsImNvbG9yUGFsZXR0ZSIsImNvbG9ycyIsImRhdGFDb2xvcnMiLCIkIiwiZGF0YSIsInNwbGl0Iiwic3BhcmsxIiwiY2hhcnQiLCJ0eXBlIiwiaGVpZ2h0Iiwic3BhcmtsaW5lIiwic3Ryb2tlIiwid2lkdGgiLCJjdXJ2ZSIsImZpbGwiLCJvcGFjaXR5Iiwic2VyaWVzIiwibmFtZSIsInlheGlzIiwibWluIiwidGl0bGUiLCJ0ZXh0Iiwib2Zmc2V0WCIsInN0eWxlIiwiZm9udFNpemUiLCJzdWJ0aXRsZSIsIm9mZnNldFkiLCJBcGV4Q2hhcnRzIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwicmVuZGVyIiwic3BhcmsyIiwic3BhcmszIiwieGF4aXMiLCJjcm9zc2hhaXJzIiwib3B0aW9ucyIsInpvb20iLCJ0b29sYmFyIiwic2hvdyIsImFsaWduIiwiY29sb3IiLCJyb3ciLCJib3JkZXJDb2xvciIsIm1hcmtlcnMiLCJzaXplIiwiY2F0ZWdvcmllcyIsIm1heCIsImxlZ2VuZCIsInBvc2l0aW9uIiwiaG9yaXpvbnRhbEFsaWduIiwiZmxvYXRpbmciLCJyZXNwb25zaXZlIiwiYnJlYWtwb2ludCIsInNoYWRvdyIsInRvcCIsImJsdXIiLCJncmFkaWVudCIsInNoYWRlIiwiZ3JhZGllbnRUb0NvbG9ycyIsInNoYWRlSW50ZW5zaXR5Iiwib3BhY2l0eUZyb20iLCJvcGFjaXR5VG8iLCJzdG9wcyIsInN0cm9rZUNvbG9yIiwic3Ryb2tlV2lkdGgiLCJob3ZlciIsInN0YWNrZWQiLCJldmVudHMiLCJzZWxlY3Rpb24iLCJlIiwiY29uc29sZSIsImxvZyIsIkRhdGUiLCJnZW5lcmF0ZURheVdpc2VUaW1lU2VyaWVzIiwiZ2V0VGltZSIsImJhc2V2YWwiLCJjb3VudCIsInlyYW5nZSIsImkiLCJ4IiwieSIsInB1c2giLCJwbG90T3B0aW9ucyIsImJhciIsImhvcml6b250YWwiLCJlbmRpbmdTaGFwZSIsImNvbHVtbldpZHRoIiwiYm90dG9tIiwidG9vbHRpcCIsImZvcm1hdHRlciIsInZhbCIsImxhYmVscyIsImF4aXNCb3JkZXIiLCJheGlzVGlja3MiLCJjb2xvckZyb20iLCJjb2xvclRvIiwidW5kZWZpbmVkIiwiaW52ZXJzZUNvbG9ycyIsIm9wcG9zaXRlIiwic2hhcmVkIiwiaW50ZXJzZWN0IiwidG9GaXhlZCIsInN0YXRlcyIsImZpbHRlciIsIl9kZWZpbmVQcm9wZXJ0eSIsImJhckhlaWdodCIsInNob3dMaW5lcyIsImFicyIsInJvdW5kIiwiZm9sbG93Q3Vyc29yIiwiZ2VuZXJhdGVEYXRhIiwieiIsInRpY2tBbW91bnQiLCJnZW5lcmF0ZURhdGExIiwiYmFzZXZhbDEiLCJvcHRpb25zMiIsInJvdGF0ZSIsImNhbmRsZXN0aWNrIiwidXB3YXJkIiwiZG93bndhcmQiLCJzZXJpZXNEYXRhIiwib3B0aW9uc0NhbmRsZXN0aWNrIiwiY2hhcnRDYW5kbGVzdGljayIsImF1dG9TZWxlY3RlZCIsInVwZGF0ZU9wdGlvbnMiLCJyYW5nZXMiLCJmcm9tIiwidG8iLCJzZXJpZXNEYXRhTGluZWFyIiwidmVydGljYWxBbGlnbiIsImRyb3BTaGFkb3ciLCJwYXR0ZXJuIiwicmFkaWFsQmFyIiwiaG9sbG93IiwidmFsdWUiLCJ0b3RhbCIsImxhYmVsIiwidyIsInN0YXJ0QW5nbGUiLCJlbmRBbmdsZSIsImRhc2hBcnJheSJdLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdWJvbGQtbGFyYXZlbC8uL3Jlc291cmNlcy9qcy9wYWdlcy9hcGV4Y2hhcnRzLmluaXQuanM/NjI0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG5UZW1wbGF0ZSBOYW1lOiBVQm9sZCAtIFJlc3BvbnNpdmUgQm9vdHN0cmFwIDQgQWRtaW4gRGFzaGJvYXJkXHJcbkF1dGhvcjogQ29kZXJUaGVtZXNcclxuV2Vic2l0ZTogaHR0cHM6Ly9jb2RlcnRoZW1lcy5jb20vXHJcbkNvbnRhY3Q6IHN1cHBvcnRAY29kZXJ0aGVtZXMuY29tXHJcbkZpbGU6IEFwZXggQ2hhcnRzXHJcbiovXHJcbiBcclxuQXBleC5ncmlkID0ge1xyXG4gICAgcGFkZGluZzoge1xyXG4gICAgICAgIHJpZ2h0OiAwLFxyXG4gICAgICAgIGxlZnQ6IDBcclxuICAgIH1cclxufVxyXG5cclxuQXBleC5kYXRhTGFiZWxzID0ge1xyXG4gICAgZW5hYmxlZDogZmFsc2VcclxufVxyXG5cclxudmFyIHJhbmRvbWl6ZUFycmF5ID0gZnVuY3Rpb24gKGFyZykge1xyXG4gICAgdmFyIGFycmF5ID0gYXJnLnNsaWNlKCk7XHJcbiAgICB2YXIgY3VycmVudEluZGV4ID0gYXJyYXkubGVuZ3RoLCB0ZW1wb3JhcnlWYWx1ZSwgcmFuZG9tSW5kZXg7XHJcblxyXG4gICAgd2hpbGUgKDAgIT09IGN1cnJlbnRJbmRleCkge1xyXG5cclxuICAgICAgICByYW5kb21JbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGN1cnJlbnRJbmRleCk7XHJcbiAgICAgICAgY3VycmVudEluZGV4IC09IDE7XHJcblxyXG4gICAgICAgIHRlbXBvcmFyeVZhbHVlID0gYXJyYXlbY3VycmVudEluZGV4XTtcclxuICAgICAgICBhcnJheVtjdXJyZW50SW5kZXhdID0gYXJyYXlbcmFuZG9tSW5kZXhdO1xyXG4gICAgICAgIGFycmF5W3JhbmRvbUluZGV4XSA9IHRlbXBvcmFyeVZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBhcnJheTtcclxufVxyXG5cclxuLy8gZGF0YSBmb3IgdGhlIHNwYXJrbGluZXMgdGhhdCBhcHBlYXIgYmVsb3cgaGVhZGVyIGFyZWFcclxudmFyIHNwYXJrbGluZURhdGEgPSBbNDcsIDQ1LCA1NCwgMzgsIDU2LCAyNCwgNjUsIDMxLCAzNywgMzksIDYyLCA1MSwgMzUsIDQxLCAzNSwgMjcsIDkzLCA1MywgNjEsIDI3LCA1NCwgNDMsIDE5LCA0Nl07XHJcblxyXG4vLyB0aGUgZGVmYXVsdCBjb2xvclBhbGV0dGUgZm9yIHRoaXMgZGFzaGJvYXJkXHJcbi8vdmFyIGNvbG9yUGFsZXR0ZSA9IFsnIzAxQkZENicsICcjNTU2NEJFJywgJyNGN0E2MDAnLCAnI0VEQ0QyNCcsICcjRjc0RjU4J107XHJcbnZhciBjb2xvclBhbGV0dGUgPSBbJyMwMEQ4QjYnLCAnIzAwOEZGQicsICcjRkVCMDE5JywgJyNGRjQ1NjAnLCAnIzc3NUREMCddXHJcblxyXG5cclxudmFyIGNvbG9ycyA9IFsnIzY2NThkZCddO1xyXG52YXIgZGF0YUNvbG9ycyA9ICQoXCIjc3BhcmsxXCIpLmRhdGEoJ2NvbG9ycycpO1xyXG5pZiAoZGF0YUNvbG9ycykge1xyXG4gICAgY29sb3JzID0gZGF0YUNvbG9ycy5zcGxpdChcIixcIik7XHJcbn1cclxudmFyIHNwYXJrMSA9IHtcclxuICAgIGNoYXJ0OiB7XHJcbiAgICAgICAgdHlwZTogJ2FyZWEnLFxyXG4gICAgICAgIGhlaWdodDogMTYwLFxyXG4gICAgICAgIHNwYXJrbGluZToge1xyXG4gICAgICAgICAgICBlbmFibGVkOiB0cnVlXHJcbiAgICAgICAgfSxcclxuICAgIH0sXHJcbiAgICBzdHJva2U6IHtcclxuICAgICAgICB3aWR0aDogMixcclxuICAgICAgICBjdXJ2ZTogJ3N0cmFpZ2h0J1xyXG4gICAgfSxcclxuICAgIGZpbGw6IHtcclxuICAgICAgICBvcGFjaXR5OiAwLjIsXHJcbiAgICB9LFxyXG4gICAgc2VyaWVzOiBbe1xyXG4gICAgICAgIG5hbWU6ICdVQm9sZCBTYWxlcyAnLFxyXG4gICAgICAgIGRhdGE6IHJhbmRvbWl6ZUFycmF5KHNwYXJrbGluZURhdGEpXHJcbiAgICB9XSxcclxuICAgIHlheGlzOiB7XHJcbiAgICAgICAgbWluOiAwXHJcbiAgICB9LFxyXG4gICAgY29sb3JzOiBjb2xvcnMsXHJcbiAgICB0aXRsZToge1xyXG4gICAgICAgIHRleHQ6ICckNDI0LDY1MicsXHJcbiAgICAgICAgb2Zmc2V0WDogMTAsXHJcbiAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgZm9udFNpemU6ICcyMnB4J1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBzdWJ0aXRsZToge1xyXG4gICAgICAgIHRleHQ6ICdUb3RhbCBTYWxlcycsXHJcbiAgICAgICAgb2Zmc2V0WDogMTAsXHJcbiAgICAgICAgb2Zmc2V0WTogMzUsXHJcbiAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgZm9udFNpemU6ICcxM3B4J1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5uZXcgQXBleENoYXJ0cyhkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3NwYXJrMVwiKSwgc3BhcmsxKS5yZW5kZXIoKTtcclxuXHJcbnZhciBjb2xvcnMgPSBbJyNEQ0U2RUMnXTtcclxudmFyIGRhdGFDb2xvcnMgPSAkKFwiI3NwYXJrMlwiKS5kYXRhKCdjb2xvcnMnKTtcclxuaWYgKGRhdGFDb2xvcnMpIHtcclxuICAgIGNvbG9ycyA9IGRhdGFDb2xvcnMuc3BsaXQoXCIsXCIpO1xyXG59XHJcbnZhciBzcGFyazIgPSB7XHJcbiAgICBjaGFydDoge1xyXG4gICAgICAgIHR5cGU6ICdhcmVhJyxcclxuICAgICAgICBoZWlnaHQ6IDE2MCxcclxuICAgICAgICBzcGFya2xpbmU6IHtcclxuICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZVxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgc3Ryb2tlOiB7XHJcbiAgICAgICAgd2lkdGg6IDIsXHJcbiAgICAgICAgY3VydmU6ICdzdHJhaWdodCdcclxuICAgIH0sXHJcbiAgICBmaWxsOiB7XHJcbiAgICAgICAgb3BhY2l0eTogMC4yLFxyXG4gICAgfSxcclxuICAgIHNlcmllczogW3tcclxuICAgICAgICBuYW1lOiAnVUJvbGQgRXhwZW5zZXMgJyxcclxuICAgICAgICBkYXRhOiByYW5kb21pemVBcnJheShzcGFya2xpbmVEYXRhKVxyXG4gICAgfV0sXHJcbiAgICB5YXhpczoge1xyXG4gICAgICAgIG1pbjogMFxyXG4gICAgfSxcclxuICAgIGNvbG9yczogY29sb3JzLFxyXG4gICAgdGl0bGU6IHtcclxuICAgICAgICB0ZXh0OiAnJDIzNSwzMTInLFxyXG4gICAgICAgIG9mZnNldFg6IDEwLFxyXG4gICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgIGZvbnRTaXplOiAnMjJweCdcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgc3VidGl0bGU6IHtcclxuICAgICAgICB0ZXh0OiAnRXhwZW5zZXMnLFxyXG4gICAgICAgIG9mZnNldFg6IDEwLFxyXG4gICAgICAgIG9mZnNldFk6IDM1LFxyXG4gICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgIGZvbnRTaXplOiAnMTNweCdcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbm5ldyBBcGV4Q2hhcnRzKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc3BhcmsyXCIpLCBzcGFyazIpLnJlbmRlcigpO1xyXG5cclxuLy8gU3BhcmtsaW5lIDJcclxudmFyIGNvbG9ycyA9IFsnI2Y2NzJhNyddO1xyXG52YXIgZGF0YUNvbG9ycyA9ICQoXCIjc3BhcmszXCIpLmRhdGEoJ2NvbG9ycycpO1xyXG5pZiAoZGF0YUNvbG9ycykge1xyXG4gICAgY29sb3JzID0gZGF0YUNvbG9ycy5zcGxpdChcIixcIik7XHJcbn1cclxudmFyIHNwYXJrMyA9IHtcclxuICAgIGNoYXJ0OiB7XHJcbiAgICAgICAgdHlwZTogJ2FyZWEnLFxyXG4gICAgICAgIGhlaWdodDogMTYwLFxyXG4gICAgICAgIHNwYXJrbGluZToge1xyXG4gICAgICAgICAgICBlbmFibGVkOiB0cnVlXHJcbiAgICAgICAgfSxcclxuICAgIH0sXHJcbiAgICBzdHJva2U6IHtcclxuICAgICAgICB3aWR0aDogMixcclxuICAgICAgICBjdXJ2ZTogJ3N0cmFpZ2h0J1xyXG4gICAgfSxcclxuICAgIGZpbGw6IHtcclxuICAgICAgICBvcGFjaXR5OiAwLjIsXHJcbiAgICB9LFxyXG4gICAgc2VyaWVzOiBbe1xyXG4gICAgICAgIG5hbWU6ICdOZXQgUHJvZml0cyAnLFxyXG4gICAgICAgIGRhdGE6IHJhbmRvbWl6ZUFycmF5KHNwYXJrbGluZURhdGEpXHJcbiAgICB9XSxcclxuICAgIHhheGlzOiB7XHJcbiAgICAgICAgY3Jvc3NoYWlyczoge1xyXG4gICAgICAgICAgICB3aWR0aDogMVxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgeWF4aXM6IHtcclxuICAgICAgICBtaW46IDBcclxuICAgIH0sXHJcbiAgICBjb2xvcnM6IGNvbG9ycyxcclxuICAgIHRpdGxlOiB7XHJcbiAgICAgICAgdGV4dDogJyQxMzUsOTY1JyxcclxuICAgICAgICBvZmZzZXRYOiAxMCxcclxuICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICBmb250U2l6ZTogJzIycHgnXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIHN1YnRpdGxlOiB7XHJcbiAgICAgICAgdGV4dDogJ1Byb2ZpdHMnLFxyXG4gICAgICAgIG9mZnNldFg6IDEwLFxyXG4gICAgICAgIG9mZnNldFk6IDM1LFxyXG4gICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgIGZvbnRTaXplOiAnMTNweCdcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbm5ldyBBcGV4Q2hhcnRzKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc3BhcmszXCIpLCBzcGFyazMpLnJlbmRlcigpO1xyXG5cclxuXHJcbi8vXHJcbi8vIExpbmUgd2l0aCBEYXRhIExhYmVsc1xyXG4vL1xyXG52YXIgY29sb3JzID0gWycjNjY1OGRkJywnIzFhYmM5YyddO1xyXG52YXIgZGF0YUNvbG9ycyA9ICQoXCIjYXBleC1saW5lLTFcIikuZGF0YSgnY29sb3JzJyk7XHJcbmlmIChkYXRhQ29sb3JzKSB7XHJcbiAgICBjb2xvcnMgPSBkYXRhQ29sb3JzLnNwbGl0KFwiLFwiKTtcclxufVxyXG52YXIgb3B0aW9ucyA9IHtcclxuICAgIGNoYXJ0OiB7XHJcbiAgICAgICAgaGVpZ2h0OiAzODAsXHJcbiAgICAgICAgdHlwZTogJ2xpbmUnLFxyXG4gICAgICAgIHpvb206IHtcclxuICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcclxuICAgICAgICB9LFxyXG4gICAgICAgIHRvb2xiYXI6IHtcclxuICAgICAgICAgICAgc2hvdzogZmFsc2VcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgY29sb3JzOiBjb2xvcnMsXHJcbiAgICBkYXRhTGFiZWxzOiB7XHJcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgIH0sXHJcbiAgICBzdHJva2U6IHtcclxuICAgICAgICB3aWR0aDogWzMsIDNdLFxyXG4gICAgICAgIGN1cnZlOiAnc21vb3RoJ1xyXG4gICAgfSxcclxuICAgIHNlcmllczogW3tcclxuICAgICAgICAgICAgbmFtZTogXCJIaWdoIC0gMjAxOFwiLFxyXG4gICAgICAgICAgICBkYXRhOiBbMjgsIDI5LCAzMywgMzYsIDMyLCAzMiwgMzNdXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiTG93IC0gMjAxOFwiLFxyXG4gICAgICAgICAgICBkYXRhOiBbMTIsIDExLCAxNCwgMTgsIDE3LCAxMywgMTNdXHJcbiAgICAgICAgfVxyXG4gICAgXSxcclxuICAgIHRpdGxlOiB7XHJcbiAgICAgICAgdGV4dDogJ0F2ZXJhZ2UgSGlnaCAmIExvdyBUZW1wZXJhdHVyZScsXHJcbiAgICAgICAgYWxpZ246ICdsZWZ0JyxcclxuICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICBmb250U2l6ZTogXCIxNHB4XCIsXHJcbiAgICAgICAgICAgIGNvbG9yOiAnIzY2NidcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgZ3JpZDoge1xyXG4gICAgICAgIHJvdzoge1xyXG4gICAgICAgICAgICBjb2xvcnM6IFsndHJhbnNwYXJlbnQnLCAndHJhbnNwYXJlbnQnXSwgLy8gdGFrZXMgYW4gYXJyYXkgd2hpY2ggd2lsbCBiZSByZXBlYXRlZCBvbiBjb2x1bW5zXHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDAuMlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYm9yZGVyQ29sb3I6ICcjZjFmM2ZhJ1xyXG4gICAgfSxcclxuICAgIG1hcmtlcnM6IHtcclxuICAgICAgICBzdHlsZTogJ2ludmVydGVkJyxcclxuICAgICAgICBzaXplOiA2XHJcbiAgICB9LFxyXG4gICAgeGF4aXM6IHtcclxuICAgICAgICBjYXRlZ29yaWVzOiBbJ0phbicsICdGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCddLFxyXG4gICAgICAgIHRpdGxlOiB7XHJcbiAgICAgICAgICAgIHRleHQ6ICdNb250aCdcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgeWF4aXM6IHtcclxuICAgICAgICB0aXRsZToge1xyXG4gICAgICAgICAgICB0ZXh0OiAnVGVtcGVyYXR1cmUnXHJcbiAgICAgICAgfSxcclxuICAgICAgICBtaW46IDUsXHJcbiAgICAgICAgbWF4OiA0MFxyXG4gICAgfSxcclxuICAgIGxlZ2VuZDoge1xyXG4gICAgICAgIHBvc2l0aW9uOiAndG9wJyxcclxuICAgICAgICBob3Jpem9udGFsQWxpZ246ICdyaWdodCcsXHJcbiAgICAgICAgZmxvYXRpbmc6IHRydWUsXHJcbiAgICAgICAgb2Zmc2V0WTogLTI1LFxyXG4gICAgICAgIG9mZnNldFg6IC01XHJcbiAgICB9LFxyXG4gICAgcmVzcG9uc2l2ZTogW3tcclxuICAgICAgICBicmVha3BvaW50OiA2MDAsXHJcbiAgICAgICAgb3B0aW9uczoge1xyXG4gICAgICAgICAgICBjaGFydDoge1xyXG4gICAgICAgICAgICAgICAgdG9vbGJhcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGxlZ2VuZDoge1xyXG4gICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9XHJcbiAgICB9XVxyXG59XHJcblxyXG52YXIgY2hhcnQgPSBuZXcgQXBleENoYXJ0cyhcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjYXBleC1saW5lLTFcIiksXHJcbiAgICBvcHRpb25zXHJcbik7XHJcblxyXG5jaGFydC5yZW5kZXIoKTtcclxuXHJcblxyXG4vL1xyXG4vLyBHcmFkaWVudCBMaW5lIENoYXJ0XHJcbi8vXHJcbnZhciBjb2xvcnMgPSBbJyNmNjcyYTcnXTtcclxudmFyIGRhdGFDb2xvcnMgPSAkKFwiI2FwZXgtbGluZS0yXCIpLmRhdGEoJ2NvbG9ycycpO1xyXG5pZiAoZGF0YUNvbG9ycykge1xyXG4gICAgY29sb3JzID0gZGF0YUNvbG9ycy5zcGxpdChcIixcIik7XHJcbn1cclxudmFyIG9wdGlvbnMgPSB7XHJcbiAgICBjaGFydDoge1xyXG4gICAgICAgIGhlaWdodDogMzgwLFxyXG4gICAgICAgIHR5cGU6ICdsaW5lJyxcclxuICAgICAgICBzaGFkb3c6IHtcclxuICAgICAgICAgICAgZW5hYmxlZDogZmFsc2UsXHJcbiAgICAgICAgICAgIGNvbG9yOiAnI2JiYicsXHJcbiAgICAgICAgICAgIHRvcDogMyxcclxuICAgICAgICAgICAgbGVmdDogMixcclxuICAgICAgICAgICAgYmx1cjogMyxcclxuICAgICAgICAgICAgb3BhY2l0eTogMVxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgc3Ryb2tlOiB7XHJcbiAgICAgICAgd2lkdGg6IDUsXHJcbiAgICAgICAgY3VydmU6ICdzbW9vdGgnXHJcbiAgICB9LFxyXG4gICAgc2VyaWVzOiBbe1xyXG4gICAgICAgIG5hbWU6ICdMaWtlcycsXHJcbiAgICAgICAgZGF0YTogWzQsIDMsIDEwLCA5LCAyOSwgMTksIDIyLCA5LCAxMiwgNywgMTksIDUsIDEzLCA5LCAxNywgMiwgNywgNV1cclxuICAgIH1dLFxyXG4gICAgeGF4aXM6IHtcclxuICAgICAgICB0eXBlOiAnZGF0ZXRpbWUnLFxyXG4gICAgICAgIGNhdGVnb3JpZXM6IFsnMS8xMS8yMDAwJywgJzIvMTEvMjAwMCcsICczLzExLzIwMDAnLCAnNC8xMS8yMDAwJywgJzUvMTEvMjAwMCcsICc2LzExLzIwMDAnLCAnNy8xMS8yMDAwJywgJzgvMTEvMjAwMCcsICc5LzExLzIwMDAnLCAnMTAvMTEvMjAwMCcsICcxMS8xMS8yMDAwJywgJzEyLzExLzIwMDAnLCAnMS8xMS8yMDAxJywgJzIvMTEvMjAwMScsICczLzExLzIwMDEnLCAnNC8xMS8yMDAxJywgJzUvMTEvMjAwMScsICc2LzExLzIwMDEnXSxcclxuICAgIH0sXHJcbiAgICB0aXRsZToge1xyXG4gICAgICAgIHRleHQ6ICdTb2NpYWwgTWVkaWEnLFxyXG4gICAgICAgIGFsaWduOiAnbGVmdCcsXHJcbiAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgZm9udFNpemU6IFwiMTRweFwiLFxyXG4gICAgICAgICAgICBjb2xvcjogJyM2NjYnXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIGZpbGw6IHtcclxuICAgICAgICB0eXBlOiAnZ3JhZGllbnQnLFxyXG4gICAgICAgIGdyYWRpZW50OiB7XHJcbiAgICAgICAgICAgIHNoYWRlOiAnZGFyaycsXHJcbiAgICAgICAgICAgIGdyYWRpZW50VG9Db2xvcnM6IGNvbG9ycyxcclxuICAgICAgICAgICAgc2hhZGVJbnRlbnNpdHk6IDEsXHJcbiAgICAgICAgICAgIHR5cGU6ICdob3Jpem9udGFsJyxcclxuICAgICAgICAgICAgb3BhY2l0eUZyb206IDEsXHJcbiAgICAgICAgICAgIG9wYWNpdHlUbzogMSxcclxuICAgICAgICAgICAgc3RvcHM6IFswLCAxMDAsIDEwMCwgMTAwXVxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgbWFya2Vyczoge1xyXG4gICAgICAgIHNpemU6IDQsXHJcbiAgICAgICAgb3BhY2l0eTogMC45LFxyXG4gICAgICAgIGNvbG9yczogW1wiIzU2YzJkNlwiXSxcclxuICAgICAgICBzdHJva2VDb2xvcjogXCIjZmZmXCIsXHJcbiAgICAgICAgc3Ryb2tlV2lkdGg6IDIsXHJcbiAgICAgICAgc3R5bGU6ICdpbnZlcnRlZCcsIC8vIGZ1bGwsIGhvbGxvdywgaW52ZXJ0ZWRcclxuICAgICAgICBob3Zlcjoge1xyXG4gICAgICAgICAgICBzaXplOiA3LFxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICB5YXhpczoge1xyXG4gICAgICAgIG1pbjogLTEwLFxyXG4gICAgICAgIG1heDogNDAsXHJcbiAgICAgICAgdGl0bGU6IHtcclxuICAgICAgICAgICAgdGV4dDogJ0VuZ2FnZW1lbnQnLFxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgZ3JpZDoge1xyXG4gICAgICAgIHJvdzoge1xyXG4gICAgICAgICAgICBjb2xvcnM6IFsndHJhbnNwYXJlbnQnLCAndHJhbnNwYXJlbnQnXSwgLy8gdGFrZXMgYW4gYXJyYXkgd2hpY2ggd2lsbCBiZSByZXBlYXRlZCBvbiBjb2x1bW5zXHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDAuMlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYm9yZGVyQ29sb3I6ICcjMTg1YTlkJ1xyXG4gICAgfSxcclxuICAgIHJlc3BvbnNpdmU6IFt7XHJcbiAgICAgICAgYnJlYWtwb2ludDogNjAwLFxyXG4gICAgICAgIG9wdGlvbnM6IHtcclxuICAgICAgICAgICAgY2hhcnQ6IHtcclxuICAgICAgICAgICAgICAgIHRvb2xiYXI6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBsZWdlbmQ6IHtcclxuICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfVxyXG4gICAgfV1cclxufVxyXG5cclxudmFyIGNoYXJ0ID0gbmV3IEFwZXhDaGFydHMoXHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2FwZXgtbGluZS0yXCIpLFxyXG4gICAgb3B0aW9uc1xyXG4pO1xyXG5cclxuY2hhcnQucmVuZGVyKCk7XHJcblxyXG5cclxuLy9cclxuLy8gQXJlYSBDaGFydFxyXG4vL1xyXG52YXIgY29sb3JzID0gWycjNjY1OGRkJywnI2Y3Yjg0YicsICcjQ0VENERDJ107XHJcbnZhciBkYXRhQ29sb3JzID0gJChcIiNhcGV4LWFyZWFcIikuZGF0YSgnY29sb3JzJyk7XHJcbmlmIChkYXRhQ29sb3JzKSB7XHJcbiAgICBjb2xvcnMgPSBkYXRhQ29sb3JzLnNwbGl0KFwiLFwiKTtcclxufVxyXG52YXIgb3B0aW9ucyA9IHtcclxuICAgIGNoYXJ0OiB7XHJcbiAgICAgICAgaGVpZ2h0OiAzODAsXHJcbiAgICAgICAgdHlwZTogJ2FyZWEnLFxyXG4gICAgICAgIHN0YWNrZWQ6IHRydWUsXHJcbiAgICAgICAgZXZlbnRzOiB7XHJcbiAgICAgICAgICAgIHNlbGVjdGlvbjogZnVuY3Rpb24gKGNoYXJ0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhuZXcgRGF0ZShlLnhheGlzLm1pbikpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgIH0sXHJcbiAgICBjb2xvcnM6IGNvbG9ycyxcclxuICAgIGRhdGFMYWJlbHM6IHtcclxuICAgICAgICBlbmFibGVkOiBmYWxzZVxyXG4gICAgfSxcclxuICAgIHN0cm9rZToge1xyXG4gICAgICAgIHdpZHRoOiBbMl0sXHJcbiAgICAgICAgY3VydmU6ICdzbW9vdGgnXHJcbiAgICB9LFxyXG5cclxuICAgIHNlcmllczogW3tcclxuICAgICAgICAgICAgbmFtZTogJ1NvdXRoJyxcclxuICAgICAgICAgICAgZGF0YTogZ2VuZXJhdGVEYXlXaXNlVGltZVNlcmllcyhuZXcgRGF0ZSgnMTEgRmViIDIwMTcgR01UJykuZ2V0VGltZSgpLCAyMCwge1xyXG4gICAgICAgICAgICAgICAgbWluOiAxMCxcclxuICAgICAgICAgICAgICAgIG1heDogNjBcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbmFtZTogJ05vcnRoJyxcclxuICAgICAgICAgICAgZGF0YTogZ2VuZXJhdGVEYXlXaXNlVGltZVNlcmllcyhuZXcgRGF0ZSgnMTEgRmViIDIwMTcgR01UJykuZ2V0VGltZSgpLCAyMCwge1xyXG4gICAgICAgICAgICAgICAgbWluOiAxMCxcclxuICAgICAgICAgICAgICAgIG1heDogMjBcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIG5hbWU6ICdDZW50cmFsJyxcclxuICAgICAgICAgICAgZGF0YTogZ2VuZXJhdGVEYXlXaXNlVGltZVNlcmllcyhuZXcgRGF0ZSgnMTEgRmViIDIwMTcgR01UJykuZ2V0VGltZSgpLCAyMCwge1xyXG4gICAgICAgICAgICAgICAgbWluOiAxMCxcclxuICAgICAgICAgICAgICAgIG1heDogMTVcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICBdLFxyXG4gICAgZmlsbDoge1xyXG4gICAgICAgIHR5cGU6ICdncmFkaWVudCcsXHJcbiAgICAgICAgZ3JhZGllbnQ6IHtcclxuICAgICAgICAgICAgb3BhY2l0eUZyb206IDAuNixcclxuICAgICAgICAgICAgb3BhY2l0eVRvOiAwLjgsXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIGxlZ2VuZDoge1xyXG4gICAgICAgIHBvc2l0aW9uOiAndG9wJyxcclxuICAgICAgICBob3Jpem9udGFsQWxpZ246ICdsZWZ0J1xyXG4gICAgfSxcclxuICAgIHhheGlzOiB7XHJcbiAgICAgICAgdHlwZTogJ2RhdGV0aW1lJ1xyXG4gICAgfSxcclxufVxyXG5cclxudmFyIGNoYXJ0ID0gbmV3IEFwZXhDaGFydHMoXHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2FwZXgtYXJlYVwiKSxcclxuICAgIG9wdGlvbnNcclxuKTtcclxuXHJcbmNoYXJ0LnJlbmRlcigpO1xyXG5cclxuLypcclxuICAvLyB0aGlzIGZ1bmN0aW9uIHdpbGwgZ2VuZXJhdGUgb3V0cHV0IGluIHRoaXMgZm9ybWF0XHJcbiAgLy8gZGF0YSA9IFtcclxuICAgICAgW3RpbWVzdGFtcCwgMjNdLFxyXG4gICAgICBbdGltZXN0YW1wLCAzM10sXHJcbiAgICAgIFt0aW1lc3RhbXAsIDEyXVxyXG4gICAgICAuLi5cclxuICBdXHJcbiAgKi9cclxuZnVuY3Rpb24gZ2VuZXJhdGVEYXlXaXNlVGltZVNlcmllcyhiYXNldmFsLCBjb3VudCwgeXJhbmdlKSB7XHJcbiAgICB2YXIgaSA9IDA7XHJcbiAgICB2YXIgc2VyaWVzID0gW107XHJcbiAgICB3aGlsZSAoaSA8IGNvdW50KSB7XHJcbiAgICAgICAgdmFyIHggPSBiYXNldmFsO1xyXG4gICAgICAgIHZhciB5ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKHlyYW5nZS5tYXggLSB5cmFuZ2UubWluICsgMSkpICsgeXJhbmdlLm1pbjtcclxuXHJcbiAgICAgICAgc2VyaWVzLnB1c2goW3gsIHldKTtcclxuICAgICAgICBiYXNldmFsICs9IDg2NDAwMDAwO1xyXG4gICAgICAgIGkrKztcclxuICAgIH1cclxuICAgIHJldHVybiBzZXJpZXM7XHJcbn1cclxuXHJcblxyXG4vL1xyXG4vLyBDb2x1bW4gQ2hhcnQgLSAxXHJcbi8vXHJcbnZhciBjb2xvcnMgPSBbJyM2NjU4ZGQnLCcjMWFiYzljJywgJyNDRUQ0REMnXTtcclxudmFyIGRhdGFDb2xvcnMgPSAkKFwiI2FwZXgtY29sdW1uLTFcIikuZGF0YSgnY29sb3JzJyk7XHJcbmlmIChkYXRhQ29sb3JzKSB7XHJcbiAgICBjb2xvcnMgPSBkYXRhQ29sb3JzLnNwbGl0KFwiLFwiKTtcclxufVxyXG52YXIgb3B0aW9ucyA9IHtcclxuICAgIGNoYXJ0OiB7XHJcbiAgICAgICAgaGVpZ2h0OiAzODAsXHJcbiAgICAgICAgdHlwZTogJ2JhcicsXHJcbiAgICAgICAgdG9vbGJhcjoge1xyXG4gICAgICAgICAgICBzaG93OiBmYWxzZVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBwbG90T3B0aW9uczoge1xyXG4gICAgICAgIGJhcjoge1xyXG4gICAgICAgICAgICBob3Jpem9udGFsOiBmYWxzZSxcclxuICAgICAgICAgICAgZW5kaW5nU2hhcGU6ICdyb3VuZGVkJyxcclxuICAgICAgICAgICAgY29sdW1uV2lkdGg6ICc1NSUnLFxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgZGF0YUxhYmVsczoge1xyXG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgc3Ryb2tlOiB7XHJcbiAgICAgICAgc2hvdzogdHJ1ZSxcclxuICAgICAgICB3aWR0aDogMixcclxuICAgICAgICBjb2xvcnM6IFsndHJhbnNwYXJlbnQnXVxyXG4gICAgfSxcclxuICAgIGNvbG9yczogY29sb3JzLFxyXG4gICAgc2VyaWVzOiBbe1xyXG4gICAgICAgIG5hbWU6ICdOZXQgUHJvZml0JyxcclxuICAgICAgICBkYXRhOiBbNDQsIDU1LCA1NywgNTYsIDYxLCA1OCwgNjMsIDYwLCA2Nl1cclxuICAgIH0sIHtcclxuICAgICAgICBuYW1lOiAnUmV2ZW51ZScsXHJcbiAgICAgICAgZGF0YTogWzc2LCA4NSwgMTAxLCA5OCwgODcsIDEwNSwgOTEsIDExNCwgOTRdXHJcbiAgICB9LCB7XHJcbiAgICAgICAgbmFtZTogJ0ZyZWUgQ2FzaCBGbG93JyxcclxuICAgICAgICBkYXRhOiBbMzUsIDQxLCAzNiwgMjYsIDQ1LCA0OCwgNTIsIDUzLCA0MV1cclxuICAgIH1dLFxyXG4gICAgeGF4aXM6IHtcclxuICAgICAgICBjYXRlZ29yaWVzOiBbJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZycsICdTZXAnLCAnT2N0J10sXHJcbiAgICB9LFxyXG4gICAgbGVnZW5kOiB7XHJcbiAgICAgICAgb2Zmc2V0WTogNSxcclxuICAgIH0sXHJcbiAgICB5YXhpczoge1xyXG4gICAgICAgIHRpdGxlOiB7XHJcbiAgICAgICAgICAgIHRleHQ6ICckICh0aG91c2FuZHMpJ1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBmaWxsOiB7XHJcbiAgICAgICAgb3BhY2l0eTogMVxyXG5cclxuICAgIH0sXHJcbiAgICBncmlkOiB7XHJcbiAgICAgICAgcm93OiB7XHJcbiAgICAgICAgICAgIGNvbG9yczogWyd0cmFuc3BhcmVudCcsICd0cmFuc3BhcmVudCddLCAvLyB0YWtlcyBhbiBhcnJheSB3aGljaCB3aWxsIGJlIHJlcGVhdGVkIG9uIGNvbHVtbnNcclxuICAgICAgICAgICAgb3BhY2l0eTogMC4yXHJcbiAgICAgICAgfSxcclxuICAgICAgICBib3JkZXJDb2xvcjogJyNmMWYzZmEnLFxyXG4gICAgICAgIHBhZGRpbmc6IHtcclxuICAgICAgICAgICAgYm90dG9tOiAxMFxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICB0b29sdGlwOiB7XHJcbiAgICAgICAgeToge1xyXG4gICAgICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uICh2YWwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIiQgXCIgKyB2YWwgKyBcIiB0aG91c2FuZHNcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG52YXIgY2hhcnQgPSBuZXcgQXBleENoYXJ0cyhcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjYXBleC1jb2x1bW4tMVwiKSxcclxuICAgIG9wdGlvbnNcclxuKTtcclxuXHJcbmNoYXJ0LnJlbmRlcigpO1xyXG5cclxuXHJcbi8vXHJcbi8vIENvbHVtbiBDaGFydCAtIDJcclxuLy9cclxudmFyIGNvbG9ycyA9IFsnIzY2NThkZCddO1xyXG52YXIgZGF0YUNvbG9ycyA9ICQoXCIjYXBleC1jb2x1bW4tMlwiKS5kYXRhKCdjb2xvcnMnKTtcclxuaWYgKGRhdGFDb2xvcnMpIHtcclxuICAgIGNvbG9ycyA9IGRhdGFDb2xvcnMuc3BsaXQoXCIsXCIpO1xyXG59XHJcbnZhciBvcHRpb25zID0ge1xyXG4gICAgY2hhcnQ6IHtcclxuICAgICAgICBoZWlnaHQ6IDM4MCxcclxuICAgICAgICB0eXBlOiAnYmFyJyxcclxuICAgICAgICB0b29sYmFyOiB7XHJcbiAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIHBsb3RPcHRpb25zOiB7XHJcbiAgICAgICAgYmFyOiB7XHJcbiAgICAgICAgICAgIGRhdGFMYWJlbHM6IHtcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAndG9wJywgLy8gdG9wLCBjZW50ZXIsIGJvdHRvbVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBkYXRhTGFiZWxzOiB7XHJcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uICh2YWwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbCArIFwiJVwiO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb2Zmc2V0WTogLTMwLFxyXG4gICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXHJcbiAgICAgICAgICAgIGNvbG9yczogW1wiIzMwNDc1OFwiXVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBjb2xvcnM6IGNvbG9ycyxcclxuICAgIHNlcmllczogW3tcclxuICAgICAgICBuYW1lOiAnSW5mbGF0aW9uJyxcclxuICAgICAgICBkYXRhOiBbMi4zLCAzLjEsIDQuMCwgMTAuMSwgNC4wLCAzLjYsIDMuMiwgMi4zLCAxLjQsIDAuOCwgMC41LCAwLjJdXHJcbiAgICB9XSxcclxuICAgIHhheGlzOiB7XHJcbiAgICAgICAgY2F0ZWdvcmllczogW1wiSmFuXCIsIFwiRmViXCIsIFwiTWFyXCIsIFwiQXByXCIsIFwiTWF5XCIsIFwiSnVuXCIsIFwiSnVsXCIsIFwiQXVnXCIsIFwiU2VwXCIsIFwiT2N0XCIsIFwiTm92XCIsIFwiRGVjXCJdLFxyXG4gICAgICAgIHBvc2l0aW9uOiAndG9wJyxcclxuICAgICAgICBsYWJlbHM6IHtcclxuICAgICAgICAgICAgb2Zmc2V0WTogLTE4LFxyXG5cclxuICAgICAgICB9LFxyXG4gICAgICAgIGF4aXNCb3JkZXI6IHtcclxuICAgICAgICAgICAgc2hvdzogZmFsc2VcclxuICAgICAgICB9LFxyXG4gICAgICAgIGF4aXNUaWNrczoge1xyXG4gICAgICAgICAgICBzaG93OiBmYWxzZVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY3Jvc3NoYWlyczoge1xyXG4gICAgICAgICAgICBmaWxsOiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnZ3JhZGllbnQnLFxyXG4gICAgICAgICAgICAgICAgZ3JhZGllbnQ6IHtcclxuICAgICAgICAgICAgICAgICAgICBjb2xvckZyb206ICcjRDhFM0YwJyxcclxuICAgICAgICAgICAgICAgICAgICBjb2xvclRvOiAnI0JFRDFFNicsXHJcbiAgICAgICAgICAgICAgICAgICAgc3RvcHM6IFswLCAxMDBdLFxyXG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHlGcm9tOiAwLjQsXHJcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eVRvOiAwLjUsXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHRvb2x0aXA6IHtcclxuICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICAgICAgb2Zmc2V0WTogLTM1LFxyXG5cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgZmlsbDoge1xyXG4gICAgICAgIGdyYWRpZW50OiB7XHJcbiAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICBzaGFkZTogJ2xpZ2h0JyxcclxuICAgICAgICAgICAgdHlwZTogXCJob3Jpem9udGFsXCIsXHJcbiAgICAgICAgICAgIHNoYWRlSW50ZW5zaXR5OiAwLjI1LFxyXG4gICAgICAgICAgICBncmFkaWVudFRvQ29sb3JzOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgIGludmVyc2VDb2xvcnM6IHRydWUsXHJcbiAgICAgICAgICAgIG9wYWNpdHlGcm9tOiAxLFxyXG4gICAgICAgICAgICBvcGFjaXR5VG86IDEsXHJcbiAgICAgICAgICAgIHN0b3BzOiBbNTAsIDAsIDEwMCwgMTAwXVxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgeWF4aXM6IHtcclxuICAgICAgICBheGlzQm9yZGVyOiB7XHJcbiAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgfSxcclxuICAgICAgICBheGlzVGlja3M6IHtcclxuICAgICAgICAgICAgc2hvdzogZmFsc2UsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBsYWJlbHM6IHtcclxuICAgICAgICAgICAgc2hvdzogZmFsc2UsXHJcbiAgICAgICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24gKHZhbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbCArIFwiJVwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH0sXHJcbiAgICB0aXRsZToge1xyXG4gICAgICAgIHRleHQ6ICdNb250aGx5IEluZmxhdGlvbiBpbiBBcmdlbnRpbmEsIDIwMDInLFxyXG4gICAgICAgIGZsb2F0aW5nOiB0cnVlLFxyXG4gICAgICAgIG9mZnNldFk6IDM1MCxcclxuICAgICAgICBhbGlnbjogJ2NlbnRlcicsXHJcbiAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgY29sb3I6ICcjNDQ0J1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBncmlkOiB7XHJcbiAgICAgICAgcm93OiB7XHJcbiAgICAgICAgICAgIGNvbG9yczogWyd0cmFuc3BhcmVudCcsICd0cmFuc3BhcmVudCddLCAvLyB0YWtlcyBhbiBhcnJheSB3aGljaCB3aWxsIGJlIHJlcGVhdGVkIG9uIGNvbHVtbnNcclxuICAgICAgICAgICAgb3BhY2l0eTogMC4yXHJcbiAgICAgICAgfSxcclxuICAgICAgICBib3JkZXJDb2xvcjogJyNmMWYzZmEnXHJcbiAgICB9XHJcbn1cclxuXHJcbnZhciBjaGFydCA9IG5ldyBBcGV4Q2hhcnRzKFxyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNhcGV4LWNvbHVtbi0yXCIpLFxyXG4gICAgb3B0aW9uc1xyXG4pO1xyXG5cclxuY2hhcnQucmVuZGVyKCk7XHJcblxyXG5cclxuLy9cclxuLy8gTWl4ZWQgQ2hhcnQgLSAxXHJcbi8vXHJcbnZhciBjb2xvcnMgPSBbJyNDRUQ0REMnLCcjNjY1OGRkJ107XHJcbnZhciBkYXRhQ29sb3JzID0gJChcIiNhcGV4LW1peGVkLTFcIikuZGF0YSgnY29sb3JzJyk7XHJcbmlmIChkYXRhQ29sb3JzKSB7XHJcbiAgICBjb2xvcnMgPSBkYXRhQ29sb3JzLnNwbGl0KFwiLFwiKTtcclxufVxyXG52YXIgb3B0aW9ucyA9IHtcclxuICAgIGNoYXJ0OiB7XHJcbiAgICAgICAgaGVpZ2h0OiAzODAsXHJcbiAgICAgICAgdHlwZTogJ2xpbmUnLFxyXG4gICAgfSxcclxuICAgIHN0cm9rZToge1xyXG4gICAgICAgIHdpZHRoOiAyLFxyXG4gICAgICAgIGN1cnZlOiAnc21vb3RoJ1xyXG4gICAgfSxcclxuXHJcbiAgICBzZXJpZXM6IFt7XHJcbiAgICAgICAgbmFtZTogJ1RFQU0gQScsXHJcbiAgICAgICAgdHlwZTogJ2FyZWEnLFxyXG4gICAgICAgIGRhdGE6IFs0NCwgNTUsIDMxLCA0NywgMzEsIDQzLCAyNiwgNDEsIDMxLCA0NywgMzNdXHJcbiAgICB9LCB7XHJcbiAgICAgICAgbmFtZTogJ1RFQU0gQicsXHJcbiAgICAgICAgdHlwZTogJ2xpbmUnLFxyXG4gICAgICAgIGRhdGE6IFs1NSwgNjksIDQ1LCA2MSwgNDMsIDU0LCAzNywgNTIsIDQ0LCA2MSwgNDNdXHJcbiAgICB9XSxcclxuICAgIGNvbG9yczogY29sb3JzLFxyXG4gICAgZmlsbDoge1xyXG4gICAgICAgIHR5cGU6ICdzb2xpZCcsXHJcbiAgICAgICAgb3BhY2l0eTogWzAuMzUsIDFdLFxyXG4gICAgfSxcclxuICAgIGxhYmVsczogWydEZWMgMDEnLCAnRGVjIDAyJywgJ0RlYyAwMycsICdEZWMgMDQnLCAnRGVjIDA1JywgJ0RlYyAwNicsICdEZWMgMDcnLCAnRGVjIDA4JywgJ0RlYyAwOSAnLCAnRGVjIDEwJywgJ0RlYyAxMSddLFxyXG4gICAgbWFya2Vyczoge1xyXG4gICAgICAgIHNpemU6IDBcclxuICAgIH0sXHJcbiAgICB5YXhpczogW3tcclxuICAgICAgICAgICAgdGl0bGU6IHtcclxuICAgICAgICAgICAgICAgIHRleHQ6ICdTZXJpZXMgQScsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIG9wcG9zaXRlOiB0cnVlLFxyXG4gICAgICAgICAgICB0aXRsZToge1xyXG4gICAgICAgICAgICAgICAgdGV4dDogJ1NlcmllcyBCJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgXSxcclxuICAgIHRvb2x0aXA6IHtcclxuICAgICAgICBzaGFyZWQ6IHRydWUsXHJcbiAgICAgICAgaW50ZXJzZWN0OiBmYWxzZSxcclxuICAgICAgICB5OiB7XHJcbiAgICAgICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24gKHkpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgeSAhPT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB5LnRvRml4ZWQoMCkgKyBcIiBwb2ludHNcIjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB5O1xyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBsZWdlbmQ6IHtcclxuICAgICAgICBvZmZzZXRZOiA3LFxyXG4gICAgfSxcclxuXHJcbn1cclxuXHJcbnZhciBjaGFydCA9IG5ldyBBcGV4Q2hhcnRzKFxyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNhcGV4LW1peGVkLTFcIiksXHJcbiAgICBvcHRpb25zXHJcbik7XHJcblxyXG5jaGFydC5yZW5kZXIoKTtcclxuXHJcblxyXG4vL1xyXG4vLyBCYXIgQ2hhcnQgLSAxXHJcbi8vXHJcbnZhciBjb2xvcnMgPSBbJyMxYWJjOWMnXTtcclxudmFyIGRhdGFDb2xvcnMgPSAkKFwiI2FwZXgtYmFyLTFcIikuZGF0YSgnY29sb3JzJyk7XHJcbmlmIChkYXRhQ29sb3JzKSB7XHJcbiAgICBjb2xvcnMgPSBkYXRhQ29sb3JzLnNwbGl0KFwiLFwiKTtcclxufVxyXG52YXIgb3B0aW9ucyA9IHtcclxuICAgIGNoYXJ0OiB7XHJcbiAgICAgICAgaGVpZ2h0OiAzODAsXHJcbiAgICAgICAgdHlwZTogJ2JhcicsXHJcbiAgICAgICAgdG9vbGJhcjoge1xyXG4gICAgICAgICAgICBzaG93OiBmYWxzZVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBwbG90T3B0aW9uczoge1xyXG4gICAgICAgIGJhcjoge1xyXG4gICAgICAgICAgICBob3Jpem9udGFsOiB0cnVlLFxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBkYXRhTGFiZWxzOiB7XHJcbiAgICAgICAgZW5hYmxlZDogZmFsc2VcclxuICAgIH0sXHJcbiAgICBzZXJpZXM6IFt7XHJcbiAgICAgICAgZGF0YTogWzQwMCwgNDMwLCA0NDgsIDQ3MCwgNTQwLCA1ODAsIDY5MCwgMTEwMCwgMTIwMCwgMTM4MF1cclxuICAgIH1dLFxyXG4gICAgY29sb3JzOiBjb2xvcnMsXHJcbiAgICB4YXhpczoge1xyXG4gICAgICAgIGNhdGVnb3JpZXM6IFsnU291dGggS29yZWEnLCAnQ2FuYWRhJywgJ1VuaXRlZCBLaW5nZG9tJywgJ05ldGhlcmxhbmRzJywgJ0l0YWx5JywgJ0ZyYW5jZScsICdKYXBhbicsICdVbml0ZWQgU3RhdGVzJywgJ0NoaW5hJywgJ0dlcm1hbnknXSxcclxuICAgIH0sXHJcbiAgICBzdGF0ZXM6IHtcclxuICAgICAgICBob3Zlcjoge1xyXG4gICAgICAgICAgICBmaWx0ZXI6ICdub25lJ1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBncmlkOiB7XHJcbiAgICAgICAgYm9yZGVyQ29sb3I6ICcjZjFmM2ZhJ1xyXG4gICAgfVxyXG59XHJcblxyXG52YXIgY2hhcnQgPSBuZXcgQXBleENoYXJ0cyhcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjYXBleC1iYXItMVwiKSxcclxuICAgIG9wdGlvbnNcclxuKTtcclxuXHJcbmNoYXJ0LnJlbmRlcigpO1xyXG5cclxuXHJcbi8vXHJcbi8vIEJhciBDaGFydCAtIDJcclxuLy9cclxudmFyIGNvbG9ycyA9IFsnIzY2NThkZCcsICcjMWFiYzljJ107XHJcbnZhciBkYXRhQ29sb3JzID0gJChcIiNhcGV4LWJhci0yXCIpLmRhdGEoJ2NvbG9ycycpO1xyXG5pZiAoZGF0YUNvbG9ycykge1xyXG4gICAgY29sb3JzID0gZGF0YUNvbG9ycy5zcGxpdChcIixcIik7XHJcbn1cclxudmFyIG9wdGlvbnMgPSB7XHJcbiAgICBjaGFydDoge1xyXG4gICAgICAgIGhlaWdodDogMzgwLFxyXG4gICAgICAgIHR5cGU6ICdiYXInLFxyXG4gICAgICAgIHN0YWNrZWQ6IHRydWUsXHJcbiAgICAgICAgdG9vbGJhcjoge1xyXG4gICAgICAgICAgICBzaG93OiBmYWxzZVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBjb2xvcnM6IGNvbG9ycyxcclxuICAgIHBsb3RPcHRpb25zOiB7XHJcbiAgICAgICAgYmFyOiB7XHJcbiAgICAgICAgICAgIGhvcml6b250YWw6IHRydWUsXHJcbiAgICAgICAgICAgIGJhckhlaWdodDogJzgwJScsXHJcblxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgZGF0YUxhYmVsczoge1xyXG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgc3Ryb2tlOiB7XHJcbiAgICAgICAgd2lkdGg6IDEsXHJcbiAgICAgICAgY29sb3JzOiBbXCIjZmZmXCJdXHJcbiAgICB9LFxyXG4gICAgc2VyaWVzOiBbe1xyXG4gICAgICAgICAgICBuYW1lOiAnTWFsZXMnLFxyXG4gICAgICAgICAgICBkYXRhOiBbMC40LCAwLjY1LCAwLjc2LCAwLjg4LCAxLjUsIDIuMSwgMi45LCAzLjgsIDMuOSwgNC4yLCA0LCA0LjMsIDQuMSwgNC4yLCA0LjUsIDMuOSwgMy41LCAzXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBuYW1lOiAnRmVtYWxlcycsXHJcbiAgICAgICAgICAgIGRhdGE6IFstMC44LCAtMS4wNSwgLTEuMDYsIC0xLjE4LCAtMS40LCAtMi4yLCAtMi44NSwgLTMuNywgLTMuOTYsIC00LjIyLCAtNC4zLCAtNC40LCAtNC4xLCAtNCwgLTQuMSwgLTMuNCwgLTMuMSwgLTIuOF1cclxuICAgICAgICB9XHJcbiAgICBdLFxyXG4gICAgZ3JpZDoge1xyXG4gICAgICAgIHhheGlzOiB7XHJcbiAgICAgICAgICAgIHNob3dMaW5lczogZmFsc2VcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgeWF4aXM6IHtcclxuICAgICAgICBtaW46IC01LFxyXG4gICAgICAgIG1heDogNSxcclxuICAgICAgICB0aXRsZToge1xyXG4gICAgICAgICAgICAvLyB0ZXh0OiAnQWdlJyxcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuICAgIHRvb2x0aXA6IHtcclxuICAgICAgICBzaGFyZWQ6IGZhbHNlLFxyXG4gICAgICAgIHg6IHtcclxuICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiAodmFsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHk6IHtcclxuICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiAodmFsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5hYnModmFsKSArIFwiJVwiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgeGF4aXM6IHtcclxuICAgICAgICBjYXRlZ29yaWVzOiBbJzg1KycsICc4MC04NCcsICc3NS03OScsICc3MC03NCcsICc2NS02OScsICc2MC02NCcsICc1NS01OScsICc1MC01NCcsICc0NS00OScsICc0MC00NCcsICczNS0zOScsICczMC0zNCcsICcyNS0yOScsICcyMC0yNCcsICcxNS0xOScsICcxMC0xNCcsICc1LTknLCAnMC00J10sXHJcbiAgICAgICAgdGl0bGU6IHtcclxuICAgICAgICAgICAgdGV4dDogJ1BlcmNlbnQnXHJcbiAgICAgICAgfSxcclxuICAgICAgICBsYWJlbHM6IHtcclxuICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiAodmFsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5hYnMoTWF0aC5yb3VuZCh2YWwpKSArIFwiJVwiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgbGVnZW5kOiB7XHJcbiAgICAgICAgb2Zmc2V0WTogNyxcclxuICAgIH0sXHJcbiAgICBncmlkOiB7XHJcbiAgICAgICAgYm9yZGVyQ29sb3I6ICcjZjFmM2ZhJ1xyXG4gICAgfVxyXG59XHJcblxyXG52YXIgY2hhcnQgPSBuZXcgQXBleENoYXJ0cyhcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjYXBleC1iYXItMlwiKSxcclxuICAgIG9wdGlvbnNcclxuKTtcclxuXHJcbmNoYXJ0LnJlbmRlcigpO1xyXG5cclxuXHJcbi8vXHJcbi8vIE1peGVkIENoYXJ0IC0gMlxyXG4vL1xyXG52YXIgY29sb3JzID0gWycjNjY1OGRkJywgJyMxYWJjOWMnLCBcIiNmNjcyYTdcIl07XHJcbnZhciBkYXRhQ29sb3JzID0gJChcIiNhcGV4LW1peGVkLTJcIikuZGF0YSgnY29sb3JzJyk7XHJcbmlmIChkYXRhQ29sb3JzKSB7XHJcbiAgICBjb2xvcnMgPSBkYXRhQ29sb3JzLnNwbGl0KFwiLFwiKTtcclxufVxyXG52YXIgb3B0aW9ucyA9IHtcclxuICAgIGNoYXJ0OiB7XHJcbiAgICAgICAgaGVpZ2h0OiAzODAsXHJcbiAgICAgICAgdHlwZTogJ2xpbmUnLFxyXG4gICAgICAgIHBhZGRpbmc6IHtcclxuICAgICAgICAgICAgcmlnaHQ6IDAsXHJcbiAgICAgICAgICAgIGxlZnQ6IDBcclxuICAgICAgICB9LFxyXG4gICAgICAgIHN0YWNrZWQ6IGZhbHNlLFxyXG4gICAgICAgIHRvb2xiYXI6IHtcclxuICAgICAgICAgICAgc2hvdzogZmFsc2VcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgc3Ryb2tlOiB7XHJcbiAgICAgICAgd2lkdGg6IFswLCAyLCA0XSxcclxuICAgICAgICBjdXJ2ZTogJ3Ntb290aCdcclxuICAgIH0sXHJcbiAgICBwbG90T3B0aW9uczoge1xyXG4gICAgICAgIGJhcjoge1xyXG4gICAgICAgICAgICBjb2x1bW5XaWR0aDogJzUwJSdcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgY29sb3JzOiBjb2xvcnMsXHJcbiAgICBzZXJpZXM6IFt7XHJcbiAgICAgICAgbmFtZTogJ1RlYW0gQScsXHJcbiAgICAgICAgdHlwZTogJ2NvbHVtbicsXHJcbiAgICAgICAgZGF0YTogWzIzLCAxMSwgMjIsIDI3LCAxMywgMjIsIDM3LCAyMSwgNDQsIDIyLCAzMF1cclxuICAgIH0sIHtcclxuICAgICAgICBuYW1lOiAnVGVhbSBCJyxcclxuICAgICAgICB0eXBlOiAnYXJlYScsXHJcbiAgICAgICAgZGF0YTogWzQ0LCA1NSwgNDEsIDY3LCAyMiwgNDMsIDIxLCA0MSwgNTYsIDI3LCA0M11cclxuICAgIH0sIHtcclxuICAgICAgICBuYW1lOiAnVGVhbSBDJyxcclxuICAgICAgICB0eXBlOiAnbGluZScsXHJcbiAgICAgICAgZGF0YTogWzMwLCAyNSwgMzYsIDMwLCA0NSwgMzUsIDY0LCA1MiwgNTksIDM2LCAzOV1cclxuICAgIH1dLFxyXG4gICAgZmlsbDoge1xyXG4gICAgICAgIG9wYWNpdHk6IFswLjg1LCAwLjI1LCAxXSxcclxuICAgICAgICBncmFkaWVudDoge1xyXG4gICAgICAgICAgICBpbnZlcnNlQ29sb3JzOiBmYWxzZSxcclxuICAgICAgICAgICAgc2hhZGU6ICdsaWdodCcsXHJcbiAgICAgICAgICAgIHR5cGU6IFwidmVydGljYWxcIixcclxuICAgICAgICAgICAgb3BhY2l0eUZyb206IDAuODUsXHJcbiAgICAgICAgICAgIG9wYWNpdHlUbzogMC41NSxcclxuICAgICAgICAgICAgc3RvcHM6IFswLCAxMDAsIDEwMCwgMTAwXVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBsYWJlbHM6IFsnMDEvMDEvMjAwMycsICcwMi8wMS8yMDAzJywgJzAzLzAxLzIwMDMnLCAnMDQvMDEvMjAwMycsICcwNS8wMS8yMDAzJywgJzA2LzAxLzIwMDMnLCAnMDcvMDEvMjAwMycsICcwOC8wMS8yMDAzJywgJzA5LzAxLzIwMDMnLCAnMTAvMDEvMjAwMycsICcxMS8wMS8yMDAzJ10sXHJcbiAgICBtYXJrZXJzOiB7XHJcbiAgICAgICAgc2l6ZTogMFxyXG4gICAgfSxcclxuICAgIGxlZ2VuZDoge1xyXG4gICAgICAgIG9mZnNldFk6IDcsXHJcbiAgICB9LFxyXG4gICAgeGF4aXM6IHtcclxuICAgICAgICB0eXBlOiAnZGF0ZXRpbWUnXHJcbiAgICB9LFxyXG4gICAgeWF4aXM6IHtcclxuICAgICAgICB0aXRsZToge1xyXG4gICAgICAgICAgICB0ZXh0OiAnUG9pbnRzJyxcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuICAgIHRvb2x0aXA6IHtcclxuICAgICAgICBzaGFyZWQ6IHRydWUsXHJcbiAgICAgICAgaW50ZXJzZWN0OiBmYWxzZSxcclxuICAgICAgICB5OiB7XHJcbiAgICAgICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24gKHkpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgeSAhPT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB5LnRvRml4ZWQoMCkgKyBcIiBwb2ludHNcIjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB5O1xyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBncmlkOiB7XHJcbiAgICAgICAgYm9yZGVyQ29sb3I6ICcjZjFmM2ZhJyxcclxuICAgICAgICBwYWRkaW5nOiB7XHJcbiAgICAgICAgICAgIGJvdHRvbTogMTBcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbnZhciBjaGFydCA9IG5ldyBBcGV4Q2hhcnRzKFxyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNhcGV4LW1peGVkLTJcIiksXHJcbiAgICBvcHRpb25zXHJcbik7XHJcblxyXG5jaGFydC5yZW5kZXIoKTtcclxuXHJcblxyXG4vL1xyXG4vLyBNaXhlZCBDaGFydCAtIDNcclxuLy9cclxudmFyIGNvbG9ycyA9IFtcIiM2NjU4ZGQsI2ViZjJmNiwjZjY3MmE3XCJdO1xyXG52YXIgZGF0YUNvbG9ycyA9ICQoXCIjYXBleC1taXhlZC0zXCIpLmRhdGEoJ2NvbG9ycycpO1xyXG5pZiAoZGF0YUNvbG9ycykge1xyXG4gICAgY29sb3JzID0gZGF0YUNvbG9ycy5zcGxpdChcIixcIik7XHJcbn1cclxudmFyIG9wdGlvbnMgPSB7XHJcbiAgICBjaGFydDoge1xyXG4gICAgICAgIGhlaWdodDogMzgwLFxyXG4gICAgICAgIHR5cGU6ICdsaW5lJyxcclxuICAgICAgICBzdGFja2VkOiBmYWxzZSxcclxuICAgICAgICB0b29sYmFyOiB7XHJcbiAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIGRhdGFMYWJlbHM6IHtcclxuICAgICAgICBlbmFibGVkOiBmYWxzZVxyXG4gICAgfSxcclxuICAgIHN0cm9rZToge1xyXG4gICAgICAgIHdpZHRoOiBbMCwgMCwgM11cclxuICAgIH0sXHJcbiAgICBzZXJpZXM6IFt7XHJcbiAgICAgICAgbmFtZTogJ0luY29tZScsXHJcbiAgICAgICAgdHlwZTogJ2NvbHVtbicsXHJcbiAgICAgICAgZGF0YTogWzEuNCwgMiwgMi41LCAxLjUsIDIuNSwgMi44LCAzLjgsIDQuNl1cclxuICAgIH0sIHtcclxuICAgICAgICBuYW1lOiAnQ2FzaGZsb3cnLFxyXG4gICAgICAgIHR5cGU6ICdjb2x1bW4nLFxyXG4gICAgICAgIGRhdGE6IFsxLjEsIDMsIDMuMSwgNCwgNC4xLCA0LjksIDYuNSwgOC41XVxyXG4gICAgfSwge1xyXG4gICAgICAgIG5hbWU6ICdSZXZlbnVlJyxcclxuICAgICAgICB0eXBlOiAnbGluZScsXHJcbiAgICAgICAgZGF0YTogWzIwLCAyOSwgMzcsIDM2LCA0NCwgNDUsIDUwLCA1OF1cclxuICAgIH1dLFxyXG4gICAgY29sb3JzOiBjb2xvcnMsXHJcbiAgICB4YXhpczoge1xyXG4gICAgICAgIGNhdGVnb3JpZXM6IFsyMDA5LCAyMDEwLCAyMDExLCAyMDEyLCAyMDEzLCAyMDE0LCAyMDE1LCAyMDE2XSxcclxuICAgIH0sXHJcbiAgICB5YXhpczogW3tcclxuICAgICAgICAgICAgYXhpc1RpY2tzOiB7XHJcbiAgICAgICAgICAgICAgICBzaG93OiB0cnVlLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBheGlzQm9yZGVyOiB7XHJcbiAgICAgICAgICAgICAgICBzaG93OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgY29sb3I6ICcjNjc1ZGI3J1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBsYWJlbHM6IHtcclxuICAgICAgICAgICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjNjc1ZGI3JyxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdGl0bGU6IHtcclxuICAgICAgICAgICAgICAgIHRleHQ6IFwiSW5jb21lICh0aG91c2FuZCBjcm9yZXMpXCJcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGF4aXNUaWNrczoge1xyXG4gICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgYXhpc0JvcmRlcjoge1xyXG4gICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGNvbG9yOiAnIzIzYjM5NydcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbGFiZWxzOiB7XHJcbiAgICAgICAgICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzIzYjM5NycsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgb2Zmc2V0WDogMTBcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdGl0bGU6IHtcclxuICAgICAgICAgICAgICAgIHRleHQ6IFwiT3BlcmF0aW5nIENhc2hmbG93ICh0aG91c2FuZCBjcm9yZXMpXCIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIG9wcG9zaXRlOiB0cnVlLFxyXG4gICAgICAgICAgICBheGlzVGlja3M6IHtcclxuICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGF4aXNCb3JkZXI6IHtcclxuICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBjb2xvcjogJyNlMzY0OTgnXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGxhYmVsczoge1xyXG4gICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyNlMzY0OTgnLFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB0aXRsZToge1xyXG4gICAgICAgICAgICAgICAgdGV4dDogXCJSZXZlbnVlICh0aG91c2FuZCBjcm9yZXMpXCJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgXSxcclxuICAgIHRvb2x0aXA6IHtcclxuICAgICAgICBmb2xsb3dDdXJzb3I6IHRydWUsXHJcbiAgICAgICAgeToge1xyXG4gICAgICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uICh5KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHkgIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4geSArIFwiIHRob3VzYW5kIGNyb3Jlc1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4geTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBncmlkOiB7XHJcbiAgICAgICAgYm9yZGVyQ29sb3I6ICcjZjFmM2ZhJyxcclxuICAgICAgICBwYWRkaW5nOiB7XHJcbiAgICAgICAgICAgIGJvdHRvbTogMTBcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgbGVnZW5kOiB7XHJcbiAgICAgICAgb2Zmc2V0WTogNyxcclxuICAgIH0sXHJcbiAgICByZXNwb25zaXZlOiBbe1xyXG4gICAgICAgIGJyZWFrcG9pbnQ6IDYwMCxcclxuICAgICAgICBvcHRpb25zOiB7XHJcbiAgICAgICAgICAgIHlheGlzOiB7XHJcbiAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBsZWdlbmQ6IHtcclxuICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XVxyXG59XHJcblxyXG52YXIgY2hhcnQgPSBuZXcgQXBleENoYXJ0cyhcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjYXBleC1taXhlZC0zXCIpLFxyXG4gICAgb3B0aW9uc1xyXG4pO1xyXG5cclxuY2hhcnQucmVuZGVyKCk7XHJcblxyXG5cclxuLy9cclxuLy8gQnViYmxlIENoYXJ0IC0gMVxyXG4vL1xyXG5cclxuXHJcbmZ1bmN0aW9uIGdlbmVyYXRlRGF0YShiYXNldmFsLCBjb3VudCwgeXJhbmdlKSB7XHJcbiAgICB2YXIgaSA9IDA7XHJcbiAgICB2YXIgc2VyaWVzID0gW107XHJcbiAgICB3aGlsZSAoaSA8IGNvdW50KSB7XHJcbiAgICAgICAgdmFyIHggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoNzUwIC0gMSArIDEpKSArIDE7O1xyXG4gICAgICAgIHZhciB5ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKHlyYW5nZS5tYXggLSB5cmFuZ2UubWluICsgMSkpICsgeXJhbmdlLm1pbjtcclxuICAgICAgICB2YXIgeiA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqICg3NSAtIDE1ICsgMSkpICsgMTU7XHJcblxyXG4gICAgICAgIHNlcmllcy5wdXNoKFt4LCB5LCB6XSk7XHJcbiAgICAgICAgYmFzZXZhbCArPSA4NjQwMDAwMDtcclxuICAgICAgICBpKys7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gc2VyaWVzO1xyXG59XHJcblxyXG52YXIgY29sb3JzID0gWycjNjY1OGRkLCMxYWJjOWMsI2Y2NzJhNyddO1xyXG52YXIgZGF0YUNvbG9ycyA9ICQoXCIjYXBleC1idWJibGUtMVwiKS5kYXRhKCdjb2xvcnMnKTtcclxuaWYgKGRhdGFDb2xvcnMpIHtcclxuICAgIGNvbG9ycyA9IGRhdGFDb2xvcnMuc3BsaXQoXCIsXCIpO1xyXG59XHJcbnZhciBvcHRpb25zID0ge1xyXG4gICAgY2hhcnQ6IHtcclxuICAgICAgICBoZWlnaHQ6IDM4MCxcclxuICAgICAgICB0eXBlOiAnYnViYmxlJyxcclxuICAgICAgICB0b29sYmFyOiB7XHJcbiAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIGRhdGFMYWJlbHM6IHtcclxuICAgICAgICBlbmFibGVkOiBmYWxzZVxyXG4gICAgfSxcclxuICAgIHNlcmllczogW3tcclxuICAgICAgICAgICAgbmFtZTogJ0J1YmJsZSAxJyxcclxuICAgICAgICAgICAgZGF0YTogZ2VuZXJhdGVEYXRhKG5ldyBEYXRlKCcxMSBGZWIgMjAxNyBHTVQnKS5nZXRUaW1lKCksIDIwLCB7XHJcbiAgICAgICAgICAgICAgICBtaW46IDEwLFxyXG4gICAgICAgICAgICAgICAgbWF4OiA2MFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBuYW1lOiAnQnViYmxlIDInLFxyXG4gICAgICAgICAgICBkYXRhOiBnZW5lcmF0ZURhdGEobmV3IERhdGUoJzExIEZlYiAyMDE3IEdNVCcpLmdldFRpbWUoKSwgMjAsIHtcclxuICAgICAgICAgICAgICAgIG1pbjogMTAsXHJcbiAgICAgICAgICAgICAgICBtYXg6IDYwXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIG5hbWU6ICdCdWJibGUgMycsXHJcbiAgICAgICAgICAgIGRhdGE6IGdlbmVyYXRlRGF0YShuZXcgRGF0ZSgnMTEgRmViIDIwMTcgR01UJykuZ2V0VGltZSgpLCAyMCwge1xyXG4gICAgICAgICAgICAgICAgbWluOiAxMCxcclxuICAgICAgICAgICAgICAgIG1heDogNjBcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICBdLFxyXG4gICAgZmlsbDoge1xyXG4gICAgICAgIG9wYWNpdHk6IDAuOCxcclxuICAgICAgICBncmFkaWVudDoge1xyXG4gICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBjb2xvcnM6IGNvbG9ycyxcclxuICAgIHhheGlzOiB7XHJcbiAgICAgICAgdGlja0Ftb3VudDogMTIsXHJcbiAgICAgICAgdHlwZTogJ2NhdGVnb3J5JyxcclxuICAgIH0sXHJcbiAgICB5YXhpczoge1xyXG4gICAgICAgIG1heDogNzBcclxuICAgIH0sXHJcbiAgICBncmlkOiB7XHJcbiAgICAgICAgYm9yZGVyQ29sb3I6ICcjZjFmM2ZhJyxcclxuICAgICAgICBwYWRkaW5nOiB7XHJcbiAgICAgICAgICAgIGJvdHRvbTogMTBcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgbGVnZW5kOiB7XHJcbiAgICAgICAgb2Zmc2V0WTogNyxcclxuICAgIH1cclxufVxyXG5cclxudmFyIGNoYXJ0ID0gbmV3IEFwZXhDaGFydHMoXHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2FwZXgtYnViYmxlLTFcIiksXHJcbiAgICBvcHRpb25zXHJcbik7XHJcblxyXG5jaGFydC5yZW5kZXIoKTtcclxuXHJcblxyXG4vL1xyXG4vLyBCdWJibGUgQ2hhcnQgLSAyXHJcbi8vXHJcblxyXG4vKlxyXG4vLyB0aGlzIGZ1bmN0aW9uIHdpbGwgZ2VuZXJhdGUgb3V0cHV0IGluIHRoaXMgZm9ybWF0XHJcbi8vIGRhdGEgPSBbXHJcbiAgW3RpbWVzdGFtcCwgMjNdLFxyXG4gIFt0aW1lc3RhbXAsIDMzXSxcclxuICBbdGltZXN0YW1wLCAxMl1cclxuICAuLi5cclxuXVxyXG4qL1xyXG5mdW5jdGlvbiBnZW5lcmF0ZURhdGExKGJhc2V2YWwxLCBjb3VudCwgeXJhbmdlKSB7XHJcbiAgICB2YXIgaSA9IDA7XHJcbiAgICB2YXIgc2VyaWVzID0gW107XHJcbiAgICB3aGlsZSAoaSA8IGNvdW50KSB7XHJcbiAgICAgICAgLy92YXIgeCA9TWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKDc1MCAtIDEgKyAxKSkgKyAxOztcclxuICAgICAgICB2YXIgeSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqICh5cmFuZ2UubWF4IC0geXJhbmdlLm1pbiArIDEpKSArIHlyYW5nZS5taW47XHJcbiAgICAgICAgdmFyIHogPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoNzUgLSAxNSArIDEpKSArIDE1O1xyXG5cclxuICAgICAgICBzZXJpZXMucHVzaChbYmFzZXZhbDEsIHksIHpdKTtcclxuICAgICAgICBiYXNldmFsMSArPSA4NjQwMDAwMDtcclxuICAgICAgICBpKys7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gc2VyaWVzO1xyXG59XHJcblxyXG52YXIgY29sb3JzID0gWycjNjY1OGRkLCMxYWJjOWMsI2Y2NzJhNywjNmM3NTdkJ107XHJcbnZhciBkYXRhQ29sb3JzID0gJChcIiNhcGV4LWJ1YmJsZS0yXCIpLmRhdGEoJ2NvbG9ycycpO1xyXG5pZiAoZGF0YUNvbG9ycykge1xyXG4gICAgY29sb3JzID0gZGF0YUNvbG9ycy5zcGxpdChcIixcIik7XHJcbn1cclxudmFyIG9wdGlvbnMyID0ge1xyXG4gICAgY2hhcnQ6IHtcclxuICAgICAgICBoZWlnaHQ6IDM4MCxcclxuICAgICAgICB0eXBlOiAnYnViYmxlJyxcclxuICAgICAgICB0b29sYmFyOiB7XHJcbiAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIGRhdGFMYWJlbHM6IHtcclxuICAgICAgICBlbmFibGVkOiBmYWxzZVxyXG4gICAgfSxcclxuICAgIHNlcmllczogW3tcclxuICAgICAgICAgICAgbmFtZTogJ1Byb2R1Y3QgMScsXHJcbiAgICAgICAgICAgIGRhdGE6IGdlbmVyYXRlRGF0YTEobmV3IERhdGUoJzExIEZlYiAyMDE3IEdNVCcpLmdldFRpbWUoKSwgMjAsIHtcclxuICAgICAgICAgICAgICAgIG1pbjogMTAsXHJcbiAgICAgICAgICAgICAgICBtYXg6IDYwXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIG5hbWU6ICdQcm9kdWN0IDInLFxyXG4gICAgICAgICAgICBkYXRhOiBnZW5lcmF0ZURhdGExKG5ldyBEYXRlKCcxMSBGZWIgMjAxNyBHTVQnKS5nZXRUaW1lKCksIDIwLCB7XHJcbiAgICAgICAgICAgICAgICBtaW46IDEwLFxyXG4gICAgICAgICAgICAgICAgbWF4OiA2MFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBuYW1lOiAnUHJvZHVjdCAzJyxcclxuICAgICAgICAgICAgZGF0YTogZ2VuZXJhdGVEYXRhMShuZXcgRGF0ZSgnMTEgRmViIDIwMTcgR01UJykuZ2V0VGltZSgpLCAyMCwge1xyXG4gICAgICAgICAgICAgICAgbWluOiAxMCxcclxuICAgICAgICAgICAgICAgIG1heDogNjBcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbmFtZTogJ1Byb2R1Y3QgNCcsXHJcbiAgICAgICAgICAgIGRhdGE6IGdlbmVyYXRlRGF0YTEobmV3IERhdGUoJzExIEZlYiAyMDE3IEdNVCcpLmdldFRpbWUoKSwgMjAsIHtcclxuICAgICAgICAgICAgICAgIG1pbjogMTAsXHJcbiAgICAgICAgICAgICAgICBtYXg6IDYwXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgXSxcclxuICAgIGZpbGw6IHtcclxuICAgICAgICB0eXBlOiAnZ3JhZGllbnQnLFxyXG4gICAgfSxcclxuICAgIGNvbG9yczogY29sb3JzLFxyXG4gICAgeGF4aXM6IHtcclxuICAgICAgICB0aWNrQW1vdW50OiAxMixcclxuICAgICAgICB0eXBlOiAnZGF0ZXRpbWUnLFxyXG5cclxuICAgICAgICBsYWJlbHM6IHtcclxuICAgICAgICAgICAgcm90YXRlOiAwLFxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICB5YXhpczoge1xyXG4gICAgICAgIG1heDogNzBcclxuICAgIH0sXHJcbiAgICBsZWdlbmQ6IHtcclxuICAgICAgICBvZmZzZXRZOiA3LFxyXG4gICAgfSxcclxuICAgIGdyaWQ6IHtcclxuICAgICAgICBib3JkZXJDb2xvcjogJyNmMWYzZmEnLFxyXG4gICAgICAgIHBhZGRpbmc6IHtcclxuICAgICAgICAgICAgYm90dG9tOiAxMFxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxudmFyIGNoYXJ0ID0gbmV3IEFwZXhDaGFydHMoXHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2FwZXgtYnViYmxlLTJcIiksXHJcbiAgICBvcHRpb25zMlxyXG4pO1xyXG5cclxuY2hhcnQucmVuZGVyKCk7XHJcblxyXG5cclxuLy9cclxuLy8gU2NhdHRlciBDaGFydCAtIDFcclxuLy9cclxuXHJcbnZhciBjb2xvcnMgPSBbJyMxYWJjOWMnLCBcIiNmNjcyYTdcIiwgXCIjNmM3NTdkXCJdO1xyXG52YXIgZGF0YUNvbG9ycyA9ICQoXCIjYXBleC1zY2F0dGVyLTFcIikuZGF0YSgnY29sb3JzJyk7XHJcbmlmIChkYXRhQ29sb3JzKSB7XHJcbiAgICBjb2xvcnMgPSBkYXRhQ29sb3JzLnNwbGl0KFwiLFwiKTtcclxufVxyXG52YXIgb3B0aW9ucyA9IHtcclxuICAgIGNoYXJ0OiB7XHJcbiAgICAgICAgaGVpZ2h0OiAzODAsXHJcbiAgICAgICAgdHlwZTogJ3NjYXR0ZXInLFxyXG4gICAgICAgIHpvb206IHtcclxuICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIHNlcmllczogW3tcclxuICAgICAgICBuYW1lOiBcIlNhbXBsZSBBXCIsXHJcbiAgICAgICAgZGF0YTogW1xyXG4gICAgICAgICAgICBbMTYuNCwgNS40XSxcclxuICAgICAgICAgICAgWzIxLjcsIDJdLFxyXG4gICAgICAgICAgICBbMjUuNCwgM10sXHJcbiAgICAgICAgICAgIFsxOSwgMl0sXHJcbiAgICAgICAgICAgIFsxMC45LCAxXSxcclxuICAgICAgICAgICAgWzEzLjYsIDMuMl0sXHJcbiAgICAgICAgICAgIFsxMC45LCA3LjRdLFxyXG4gICAgICAgICAgICBbMTAuOSwgMF0sXHJcbiAgICAgICAgICAgIFsxMC45LCA4LjJdLFxyXG4gICAgICAgICAgICBbMTYuNCwgMF0sXHJcbiAgICAgICAgICAgIFsxNi40LCAxLjhdLFxyXG4gICAgICAgICAgICBbMTMuNiwgMC4zXSxcclxuICAgICAgICAgICAgWzEzLjYsIDBdLFxyXG4gICAgICAgICAgICBbMjkuOSwgMF0sXHJcbiAgICAgICAgICAgIFsyNy4xLCAyLjNdLFxyXG4gICAgICAgICAgICBbMTYuNCwgMF0sXHJcbiAgICAgICAgICAgIFsxMy42LCAzLjddLFxyXG4gICAgICAgICAgICBbMTAuOSwgNS4yXSxcclxuICAgICAgICAgICAgWzE2LjQsIDYuNV0sXHJcbiAgICAgICAgICAgIFsxMC45LCAwXSxcclxuICAgICAgICAgICAgWzI0LjUsIDcuMV0sXHJcbiAgICAgICAgICAgIFsxMC45LCAwXSxcclxuICAgICAgICAgICAgWzguMSwgNC43XSxcclxuICAgICAgICAgICAgWzE5LCAwXSxcclxuICAgICAgICAgICAgWzIxLjcsIDEuOF0sXHJcbiAgICAgICAgICAgIFsyNy4xLCAwXSxcclxuICAgICAgICAgICAgWzI0LjUsIDBdLFxyXG4gICAgICAgICAgICBbMjcuMSwgMF0sXHJcbiAgICAgICAgICAgIFsyOS45LCAxLjVdLFxyXG4gICAgICAgICAgICBbMjcuMSwgMC44XSxcclxuICAgICAgICAgICAgWzIyLjEsIDJdXHJcbiAgICAgICAgXVxyXG4gICAgfSwge1xyXG4gICAgICAgIG5hbWU6IFwiU2FtcGxlIEJcIixcclxuICAgICAgICBkYXRhOiBbXHJcbiAgICAgICAgICAgIFs2LjQsIDEzLjRdLFxyXG4gICAgICAgICAgICBbMS43LCAxMV0sXHJcbiAgICAgICAgICAgIFs1LjQsIDhdLFxyXG4gICAgICAgICAgICBbOSwgMTddLFxyXG4gICAgICAgICAgICBbMS45LCA0XSxcclxuICAgICAgICAgICAgWzMuNiwgMTIuMl0sXHJcbiAgICAgICAgICAgIFsxLjksIDE0LjRdLFxyXG4gICAgICAgICAgICBbMS45LCA5XSxcclxuICAgICAgICAgICAgWzEuOSwgMTMuMl0sXHJcbiAgICAgICAgICAgIFsxLjQsIDddLFxyXG4gICAgICAgICAgICBbNi40LCA4LjhdLFxyXG4gICAgICAgICAgICBbMy42LCA0LjNdLFxyXG4gICAgICAgICAgICBbMS42LCAxMF0sXHJcbiAgICAgICAgICAgIFs5LjksIDJdLFxyXG4gICAgICAgICAgICBbNy4xLCAxNV0sXHJcbiAgICAgICAgICAgIFsxLjQsIDBdLFxyXG4gICAgICAgICAgICBbMy42LCAxMy43XSxcclxuICAgICAgICAgICAgWzEuOSwgMTUuMl0sXHJcbiAgICAgICAgICAgIFs2LjQsIDE2LjVdLFxyXG4gICAgICAgICAgICBbMC45LCAxMF0sXHJcbiAgICAgICAgICAgIFs0LjUsIDE3LjFdLFxyXG4gICAgICAgICAgICBbMTAuOSwgMTBdLFxyXG4gICAgICAgICAgICBbMC4xLCAxNC43XSxcclxuICAgICAgICAgICAgWzksIDEwXSxcclxuICAgICAgICAgICAgWzEyLjcsIDExLjhdLFxyXG4gICAgICAgICAgICBbMi4xLCAxMF0sXHJcbiAgICAgICAgICAgIFsyLjUsIDEwXSxcclxuICAgICAgICAgICAgWzI3LjEsIDEwXSxcclxuICAgICAgICAgICAgWzIuOSwgMTEuNV0sXHJcbiAgICAgICAgICAgIFs3LjEsIDEwLjhdLFxyXG4gICAgICAgICAgICBbMi4xLCAxMl1cclxuICAgICAgICBdXHJcbiAgICB9LCB7XHJcbiAgICAgICAgbmFtZTogXCJTYW1wbGUgQ1wiLFxyXG4gICAgICAgIGRhdGE6IFtcclxuICAgICAgICAgICAgWzIxLjcsIDNdLFxyXG4gICAgICAgICAgICBbMjMuNiwgMy41XSxcclxuICAgICAgICAgICAgWzI0LjYsIDNdLFxyXG4gICAgICAgICAgICBbMjkuOSwgM10sXHJcbiAgICAgICAgICAgIFsyMS43LCAyMF0sXHJcbiAgICAgICAgICAgIFsyMywgMl0sXHJcbiAgICAgICAgICAgIFsxMC45LCAzXSxcclxuICAgICAgICAgICAgWzI4LCA0XSxcclxuICAgICAgICAgICAgWzI3LjEsIDAuM10sXHJcbiAgICAgICAgICAgIFsxNi40LCA0XSxcclxuICAgICAgICAgICAgWzEzLjYsIDBdLFxyXG4gICAgICAgICAgICBbMTksIDVdLFxyXG4gICAgICAgICAgICBbMjIuNCwgM10sXHJcbiAgICAgICAgICAgIFsyNC41LCAzXSxcclxuICAgICAgICAgICAgWzMyLjYsIDNdLFxyXG4gICAgICAgICAgICBbMjcuMSwgNF0sXHJcbiAgICAgICAgICAgIFsyOS42LCA2XSxcclxuICAgICAgICAgICAgWzMxLjYsIDhdLFxyXG4gICAgICAgICAgICBbMjEuNiwgNV0sXHJcbiAgICAgICAgICAgIFsyMC45LCA0XSxcclxuICAgICAgICAgICAgWzIyLjQsIDBdLFxyXG4gICAgICAgICAgICBbMzIuNiwgMTAuM10sXHJcbiAgICAgICAgICAgIFsyOS43LCAyMC44XSxcclxuICAgICAgICAgICAgWzI0LjUsIDAuOF0sXHJcbiAgICAgICAgICAgIFsyMS40LCAwXSxcclxuICAgICAgICAgICAgWzIxLjcsIDYuOV0sXHJcbiAgICAgICAgICAgIFsyOC42LCA3LjddLFxyXG4gICAgICAgICAgICBbMTUuNCwgMF0sXHJcbiAgICAgICAgICAgIFsxOC4xLCAwXSxcclxuICAgICAgICAgICAgWzMzLjQsIDBdLFxyXG4gICAgICAgICAgICBbMTYuNCwgMF1cclxuICAgICAgICBdXHJcbiAgICB9XSxcclxuICAgIHhheGlzOiB7XHJcbiAgICAgICAgdGlja0Ftb3VudDogMTAsXHJcbiAgICB9LFxyXG4gICAgeWF4aXM6IHtcclxuICAgICAgICB0aWNrQW1vdW50OiA3XHJcbiAgICB9LFxyXG4gICAgY29sb3JzOiBjb2xvcnMsXHJcbiAgICBncmlkOiB7XHJcbiAgICAgICAgYm9yZGVyQ29sb3I6ICcjZjFmM2ZhJyxcclxuICAgICAgICBwYWRkaW5nOiB7XHJcbiAgICAgICAgICAgIGJvdHRvbTogMTBcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgbGVnZW5kOiB7XHJcbiAgICAgICAgb2Zmc2V0WTogNyxcclxuICAgIH0sXHJcbiAgICByZXNwb25zaXZlOiBbe1xyXG4gICAgICAgIGJyZWFrcG9pbnQ6IDYwMCxcclxuICAgICAgICBvcHRpb25zOiB7XHJcbiAgICAgICAgICAgIGNoYXJ0OiB7XHJcbiAgICAgICAgICAgICAgICB0b29sYmFyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbGVnZW5kOiB7XHJcbiAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH1cclxuICAgIH1dXHJcbn1cclxuXHJcbnZhciBjaGFydCA9IG5ldyBBcGV4Q2hhcnRzKFxyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNhcGV4LXNjYXR0ZXItMVwiKSxcclxuICAgIG9wdGlvbnNcclxuKTtcclxuXHJcbmNoYXJ0LnJlbmRlcigpO1xyXG5cclxuXHJcbi8vXHJcbi8vIFNjYXR0ZXIgQ2hhcnQgLSAyXHJcbi8vXHJcblxyXG52YXIgY29sb3JzID0gWycjMWFiYzljJywgXCIjZjY3MmE3XCIsIFwiIzZjNzU3ZFwiLCBcIiM2NjU4ZGRcIiwgXCIjNjU1OWNjXCJdO1xyXG52YXIgZGF0YUNvbG9ycyA9ICQoXCIjYXBleC1zY2F0dGVyLTJcIikuZGF0YSgnY29sb3JzJyk7XHJcbmlmIChkYXRhQ29sb3JzKSB7XHJcbiAgICBjb2xvcnMgPSBkYXRhQ29sb3JzLnNwbGl0KFwiLFwiKTtcclxufVxyXG5cclxudmFyIG9wdGlvbnMgPSB7XHJcbiAgICBjaGFydDoge1xyXG4gICAgICAgIGhlaWdodDogMzgwLFxyXG4gICAgICAgIHR5cGU6ICdzY2F0dGVyJyxcclxuICAgICAgICB6b29tOiB7XHJcbiAgICAgICAgICAgIHR5cGU6ICd4eSdcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgc2VyaWVzOiBbe1xyXG4gICAgICAgICAgICBuYW1lOiAnVGVhbSAxJyxcclxuICAgICAgICAgICAgZGF0YTogZ2VuZXJhdGVEYXlXaXNlVGltZVNlcmllcyhuZXcgRGF0ZSgnMTEgRmViIDIwMTcgR01UJykuZ2V0VGltZSgpLCAyMCwge1xyXG4gICAgICAgICAgICAgICAgbWluOiAxMCxcclxuICAgICAgICAgICAgICAgIG1heDogNjBcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbmFtZTogJ1RlYW0gMicsXHJcbiAgICAgICAgICAgIGRhdGE6IGdlbmVyYXRlRGF5V2lzZVRpbWVTZXJpZXMobmV3IERhdGUoJzExIEZlYiAyMDE3IEdNVCcpLmdldFRpbWUoKSwgMjAsIHtcclxuICAgICAgICAgICAgICAgIG1pbjogMTAsXHJcbiAgICAgICAgICAgICAgICBtYXg6IDYwXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIG5hbWU6ICdUZWFtIDMnLFxyXG4gICAgICAgICAgICBkYXRhOiBnZW5lcmF0ZURheVdpc2VUaW1lU2VyaWVzKG5ldyBEYXRlKCcxMSBGZWIgMjAxNyBHTVQnKS5nZXRUaW1lKCksIDMwLCB7XHJcbiAgICAgICAgICAgICAgICBtaW46IDEwLFxyXG4gICAgICAgICAgICAgICAgbWF4OiA2MFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBuYW1lOiAnVGVhbSA0JyxcclxuICAgICAgICAgICAgZGF0YTogZ2VuZXJhdGVEYXlXaXNlVGltZVNlcmllcyhuZXcgRGF0ZSgnMTEgRmViIDIwMTcgR01UJykuZ2V0VGltZSgpLCAxMCwge1xyXG4gICAgICAgICAgICAgICAgbWluOiAxMCxcclxuICAgICAgICAgICAgICAgIG1heDogNjBcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbmFtZTogJ1RlYW0gNScsXHJcbiAgICAgICAgICAgIGRhdGE6IGdlbmVyYXRlRGF5V2lzZVRpbWVTZXJpZXMobmV3IERhdGUoJzExIEZlYiAyMDE3IEdNVCcpLmdldFRpbWUoKSwgMzAsIHtcclxuICAgICAgICAgICAgICAgIG1pbjogMTAsXHJcbiAgICAgICAgICAgICAgICBtYXg6IDYwXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSxcclxuICAgIF0sXHJcbiAgICBkYXRhTGFiZWxzOiB7XHJcbiAgICAgICAgZW5hYmxlZDogZmFsc2VcclxuICAgIH0sXHJcbiAgICBjb2xvcnM6IGNvbG9ycyxcclxuICAgIGdyaWQ6IHtcclxuICAgICAgICBib3JkZXJDb2xvcjogJyNmMWYzZmEnLFxyXG4gICAgICAgIHhheGlzOiB7XHJcbiAgICAgICAgICAgIHNob3dMaW5lczogdHJ1ZVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgeWF4aXM6IHtcclxuICAgICAgICAgICAgc2hvd0xpbmVzOiB0cnVlXHJcbiAgICAgICAgfSxcclxuICAgICAgICBwYWRkaW5nOiB7XHJcbiAgICAgICAgICAgIGJvdHRvbTogMTBcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgbGVnZW5kOiB7XHJcbiAgICAgICAgb2Zmc2V0WTogNyxcclxuICAgIH0sXHJcbiAgICB4YXhpczoge1xyXG4gICAgICAgIHR5cGU6ICdkYXRldGltZScsXHJcblxyXG4gICAgfSxcclxuICAgIHlheGlzOiB7XHJcbiAgICAgICAgbWF4OiA3MFxyXG4gICAgfSxcclxuICAgIHJlc3BvbnNpdmU6IFt7XHJcbiAgICAgICAgYnJlYWtwb2ludDogNjAwLFxyXG4gICAgICAgIG9wdGlvbnM6IHtcclxuICAgICAgICAgICAgY2hhcnQ6IHtcclxuICAgICAgICAgICAgICAgIHRvb2xiYXI6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBsZWdlbmQ6IHtcclxuICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfVxyXG4gICAgfV1cclxufVxyXG5cclxudmFyIGNoYXJ0ID0gbmV3IEFwZXhDaGFydHMoXHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2FwZXgtc2NhdHRlci0yXCIpLFxyXG4gICAgb3B0aW9uc1xyXG4pO1xyXG5cclxuY2hhcnQucmVuZGVyKCk7XHJcblxyXG4vKlxyXG4vLyB0aGlzIGZ1bmN0aW9uIHdpbGwgZ2VuZXJhdGUgb3V0cHV0IGluIHRoaXMgZm9ybWF0XHJcbi8vIGRhdGEgPSBbXHJcbiAgW3RpbWVzdGFtcCwgMjNdLFxyXG4gIFt0aW1lc3RhbXAsIDMzXSxcclxuICBbdGltZXN0YW1wLCAxMl1cclxuICAuLi5cclxuXVxyXG4qL1xyXG5cclxuXHJcblxyXG4vL1xyXG4vLyBDYW5kbGVzdGljayBDaGFydCAtIDFcclxuLy9cclxudmFyIGNvbG9ycyA9IFsnIzY2NThkZCcsJyMxYWJjOWMnXTtcclxudmFyIGRhdGFDb2xvcnMgPSAkKFwiI2FwZXgtY2FuZGxlc3RpY2stMVwiKS5kYXRhKCdjb2xvcnMnKTtcclxuaWYgKGRhdGFDb2xvcnMpIHtcclxuICAgIGNvbG9ycyA9IGRhdGFDb2xvcnMuc3BsaXQoXCIsXCIpO1xyXG59XHJcbnZhciBvcHRpb25zID0ge1xyXG4gICAgY2hhcnQ6IHtcclxuICAgICAgICBoZWlnaHQ6IDQwMCxcclxuICAgICAgICB0eXBlOiAnY2FuZGxlc3RpY2snLFxyXG4gICAgfSxcclxuICAgIHBsb3RPcHRpb25zOiB7XHJcbiAgICAgICAgY2FuZGxlc3RpY2s6IHtcclxuICAgICAgICAgICAgY29sb3JzOiB7XHJcbiAgICAgICAgICAgICAgICB1cHdhcmQ6IGNvbG9yc1swXSxcclxuICAgICAgICAgICAgICAgIGRvd253YXJkOiBjb2xvcnNbMV1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBzZXJpZXM6IFt7XHJcbiAgICAgICAgZGF0YTogc2VyaWVzRGF0YVxyXG4gICAgfV0sXHJcblxyXG4gICAgc3Ryb2tlOiB7XHJcbiAgICAgICAgc2hvdzogdHJ1ZSxcclxuICAgICAgICBjb2xvcnM6ICcjZjFmM2ZhJyxcclxuICAgICAgICB3aWR0aDogWzEsIDRdXHJcbiAgICB9LFxyXG4gICAgeGF4aXM6IHtcclxuICAgICAgICB0eXBlOiAnZGF0ZXRpbWUnXHJcbiAgICB9LFxyXG4gICAgZ3JpZDoge1xyXG4gICAgICAgIGJvcmRlckNvbG9yOiAnI2YxZjNmYSdcclxuICAgIH1cclxufVxyXG5cclxudmFyIGNoYXJ0ID0gbmV3IEFwZXhDaGFydHMoXHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2FwZXgtY2FuZGxlc3RpY2stMVwiKSxcclxuICAgIG9wdGlvbnNcclxuKTtcclxuXHJcbmNoYXJ0LnJlbmRlcigpO1xyXG5cclxuLy9cclxuLy8gQ2FuZGxlc3RpY2sgQ2hhcnQgLSAyXHJcbi8vXHJcbnZhciBjb2xvcnMgPSBbJyM2NjU4ZGQnLCcjZjdiODRiJ107XHJcbnZhciBkYXRhQ29sb3JzID0gJChcIiNhcGV4LWNhbmRsZXN0aWNrLTJcIikuZGF0YSgnY29sb3JzJyk7XHJcbmlmIChkYXRhQ29sb3JzKSB7XHJcbiAgICBjb2xvcnMgPSBkYXRhQ29sb3JzLnNwbGl0KFwiLFwiKTtcclxufVxyXG52YXIgb3B0aW9uc0NhbmRsZXN0aWNrID0ge1xyXG4gICAgY2hhcnQ6IHtcclxuICAgICAgICBoZWlnaHQ6IDI0MCxcclxuICAgICAgICB0eXBlOiAnY2FuZGxlc3RpY2snLFxyXG4gICAgICAgIHRvb2xiYXI6IHtcclxuICAgICAgICAgICAgc2hvdzogZmFsc2VcclxuICAgICAgICB9LFxyXG4gICAgICAgIHpvb206IHtcclxuICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuICAgIHNlcmllczogW3tcclxuICAgICAgICBkYXRhOiBzZXJpZXNEYXRhXHJcbiAgICB9XSxcclxuICAgIHBsb3RPcHRpb25zOiB7XHJcbiAgICAgICAgY2FuZGxlc3RpY2s6IHtcclxuICAgICAgICAgICAgY29sb3JzOiB7XHJcbiAgICAgICAgICAgICAgICB1cHdhcmQ6IGNvbG9yc1swXSxcclxuICAgICAgICAgICAgICAgIGRvd253YXJkOiBjb2xvcnNbMV1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICB4YXhpczoge1xyXG4gICAgICAgIHR5cGU6ICdkYXRldGltZSdcclxuICAgIH0sXHJcbiAgICBncmlkOiB7XHJcbiAgICAgICAgYm9yZGVyQ29sb3I6ICcjZjFmM2ZhJ1xyXG4gICAgfVxyXG59XHJcblxyXG52YXIgY2hhcnRDYW5kbGVzdGljayA9IG5ldyBBcGV4Q2hhcnRzKFxyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNhcGV4LWNhbmRsZXN0aWNrLTJcIiksXHJcbiAgICBvcHRpb25zQ2FuZGxlc3RpY2tcclxuKTtcclxuXHJcbmNoYXJ0Q2FuZGxlc3RpY2sucmVuZGVyKCk7XHJcblxyXG5cclxuLy9cclxuLy8gQ2FuZGxlc3RpY2sgQ2hhcnQgLSAzXHJcbi8vXHJcbnZhciBjb2xvcnMgPSBbJyNmNDU0NTQnLCcjMzdjZGU2J107XHJcbnZhciBkYXRhQ29sb3JzID0gJChcIiNhcGV4LWNhbmRsZXN0aWNrLTNcIikuZGF0YSgnY29sb3JzJyk7XHJcbmlmIChkYXRhQ29sb3JzKSB7XHJcbiAgICBjb2xvcnMgPSBkYXRhQ29sb3JzLnNwbGl0KFwiLFwiKTtcclxufVxyXG52YXIgb3B0aW9ucyA9IHtcclxuICAgIGNoYXJ0OiB7XHJcbiAgICAgICAgaGVpZ2h0OiAxNjAsXHJcbiAgICAgICAgdHlwZTogJ2JhcicsXHJcbiAgICAgICAgdG9vbGJhcjoge1xyXG4gICAgICAgICAgICBzaG93OiBmYWxzZSxcclxuICAgICAgICAgICAgYXV0b1NlbGVjdGVkOiAnc2VsZWN0aW9uJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2VsZWN0aW9uOiB7XHJcbiAgICAgICAgICAgIHhheGlzOiB7XHJcbiAgICAgICAgICAgICAgICBtaW46IG5ldyBEYXRlKCcyMCBKYW4gMjAxNycpLmdldFRpbWUoKSxcclxuICAgICAgICAgICAgICAgIG1heDogbmV3IERhdGUoJzEwIERlYyAyMDE3JykuZ2V0VGltZSgpXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGZpbGw6IHtcclxuICAgICAgICAgICAgICAgIGNvbG9yOiAnIzZjNzU3ZCcsXHJcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAwLjRcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc3Ryb2tlOiB7XHJcbiAgICAgICAgICAgICAgICBjb2xvcjogJyM2Yzc1N2QnLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBldmVudHM6IHtcclxuICAgICAgICAgICAgc2VsZWN0aW9uOiBmdW5jdGlvbiAoY2hhcnQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGNoYXJ0Q2FuZGxlc3RpY2sudXBkYXRlT3B0aW9ucyh7XHJcbiAgICAgICAgICAgICAgICAgICAgeGF4aXM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWluOiBlLnhheGlzLm1pbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4OiBlLnhheGlzLm1heFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sIGZhbHNlLCBmYWxzZSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgfSxcclxuICAgIGRhdGFMYWJlbHM6IHtcclxuICAgICAgICBlbmFibGVkOiBmYWxzZVxyXG4gICAgfSxcclxuICAgIHBsb3RPcHRpb25zOiB7XHJcbiAgICAgICAgYmFyOiB7XHJcbiAgICAgICAgICAgIGNvbHVtbldpZHRoOiAnODAlJyxcclxuICAgICAgICAgICAgY29sb3JzOiB7XHJcbiAgICAgICAgICAgICAgICByYW5nZXM6IFt7XHJcbiAgICAgICAgICAgICAgICAgICAgZnJvbTogLTEwMDAsXHJcbiAgICAgICAgICAgICAgICAgICAgdG86IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IGNvbG9yc1swXVxyXG4gICAgICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAgICAgIGZyb206IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgdG86IDEwMDAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiBjb2xvcnNbMV1cclxuICAgICAgICAgICAgICAgIH1dLFxyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgc2VyaWVzOiBbe1xyXG4gICAgICAgIG5hbWU6ICd2b2x1bWUnLFxyXG4gICAgICAgIGRhdGE6IHNlcmllc0RhdGFMaW5lYXJcclxuICAgIH1dLFxyXG4gICAgeGF4aXM6IHtcclxuICAgICAgICB0eXBlOiAnZGF0ZXRpbWUnLFxyXG4gICAgICAgIGF4aXNCb3JkZXI6IHtcclxuICAgICAgICAgICAgb2Zmc2V0WDogMTNcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgeWF4aXM6IHtcclxuICAgICAgICBsYWJlbHM6IHtcclxuICAgICAgICAgICAgc2hvdzogZmFsc2VcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgZ3JpZDoge1xyXG4gICAgICAgIGJvcmRlckNvbG9yOiAnI2YxZjNmYSdcclxuICAgIH1cclxufVxyXG5cclxudmFyIGNoYXJ0ID0gbmV3IEFwZXhDaGFydHMoXHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2FwZXgtY2FuZGxlc3RpY2stM1wiKSxcclxuICAgIG9wdGlvbnNcclxuKTtcclxuXHJcbmNoYXJ0LnJlbmRlcigpO1xyXG5cclxuXHJcbi8vXHJcbi8vIFBpZSBDaGFydCAtMVxyXG4vL1xyXG52YXIgY29sb3JzID0gW1wiIzY2NThkZFwiLCBcIiM0ZmM2ZTFcIiwgXCIjNGE4MWQ0XCIsIFwiIzAwYjE5ZFwiLFwiI2YxNTU2Y1wiXTtcclxudmFyIGRhdGFDb2xvcnMgPSAkKFwiI2FwZXgtcGllLTFcIikuZGF0YSgnY29sb3JzJyk7XHJcbmlmIChkYXRhQ29sb3JzKSB7XHJcbiAgICBjb2xvcnMgPSBkYXRhQ29sb3JzLnNwbGl0KFwiLFwiKTtcclxufVxyXG52YXIgb3B0aW9ucyA9IHtcclxuICAgIGNoYXJ0OiB7XHJcbiAgICAgICAgaGVpZ2h0OiAzMjAsXHJcbiAgICAgICAgdHlwZTogJ3BpZScsXHJcbiAgICB9LFxyXG4gICAgc2VyaWVzOiBbNDQsIDU1LCA0MSwgMTcsIDE1XSxcclxuICAgIGxhYmVsczogW1wiU2VyaWVzIDFcIiwgXCJTZXJpZXMgMlwiLCBcIlNlcmllcyAzXCIsIFwiU2VyaWVzIDRcIiwgXCJTZXJpZXMgNVwiXSxcclxuICAgIGNvbG9yczogY29sb3JzLFxyXG4gICAgbGVnZW5kOiB7XHJcbiAgICAgICAgc2hvdzogdHJ1ZSxcclxuICAgICAgICBwb3NpdGlvbjogJ2JvdHRvbScsXHJcbiAgICAgICAgaG9yaXpvbnRhbEFsaWduOiAnY2VudGVyJyxcclxuICAgICAgICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcclxuICAgICAgICBmbG9hdGluZzogZmFsc2UsXHJcbiAgICAgICAgZm9udFNpemU6ICcxNHB4JyxcclxuICAgICAgICBvZmZzZXRYOiAwLFxyXG4gICAgICAgIG9mZnNldFk6IDdcclxuICAgIH0sXHJcbiAgICByZXNwb25zaXZlOiBbe1xyXG4gICAgICAgIGJyZWFrcG9pbnQ6IDYwMCxcclxuICAgICAgICBvcHRpb25zOiB7XHJcbiAgICAgICAgICAgIGNoYXJ0OiB7XHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDI0MFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBsZWdlbmQ6IHtcclxuICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfVxyXG4gICAgfV1cclxuXHJcbn1cclxuXHJcbnZhciBjaGFydCA9IG5ldyBBcGV4Q2hhcnRzKFxyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNhcGV4LXBpZS0xXCIpLFxyXG4gICAgb3B0aW9uc1xyXG4pO1xyXG5cclxuY2hhcnQucmVuZGVyKCk7XHJcblxyXG5cclxuLy9cclxuLy8gUGllIENoYXJ0IC0gMlxyXG4vL1xyXG52YXIgY29sb3JzID0gW1wiIzY2NThkZFwiLCBcIiM0ZmM2ZTFcIiwgXCIjNGE4MWQ0XCIsIFwiIzAwYjE5ZFwiLFwiI2YxNTU2Y1wiXTtcclxudmFyIGRhdGFDb2xvcnMgPSAkKFwiI2FwZXgtcGllLTJcIikuZGF0YSgnY29sb3JzJyk7XHJcbmlmIChkYXRhQ29sb3JzKSB7XHJcbiAgICBjb2xvcnMgPSBkYXRhQ29sb3JzLnNwbGl0KFwiLFwiKTtcclxufVxyXG52YXIgb3B0aW9ucyA9IHtcclxuICAgIGNoYXJ0OiB7XHJcbiAgICAgICAgaGVpZ2h0OiAzMjAsXHJcbiAgICAgICAgdHlwZTogJ2RvbnV0JyxcclxuICAgIH0sXHJcbiAgICBzZXJpZXM6IFs0NCwgNTUsIDQxLCAxNywgMTVdLFxyXG4gICAgbGVnZW5kOiB7XHJcbiAgICAgICAgc2hvdzogdHJ1ZSxcclxuICAgICAgICBwb3NpdGlvbjogJ2JvdHRvbScsXHJcbiAgICAgICAgaG9yaXpvbnRhbEFsaWduOiAnY2VudGVyJyxcclxuICAgICAgICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcclxuICAgICAgICBmbG9hdGluZzogZmFsc2UsXHJcbiAgICAgICAgZm9udFNpemU6ICcxNHB4JyxcclxuICAgICAgICBvZmZzZXRYOiAwLFxyXG4gICAgICAgIG9mZnNldFk6IDdcclxuICAgIH0sXHJcbiAgICBsYWJlbHM6IFtcIlNlcmllcyAxXCIsIFwiU2VyaWVzIDJcIiwgXCJTZXJpZXMgM1wiLCBcIlNlcmllcyA0XCIsIFwiU2VyaWVzIDVcIl0sXHJcbiAgICBjb2xvcnM6IGNvbG9ycyxcclxuICAgIHJlc3BvbnNpdmU6IFt7XHJcbiAgICAgICAgYnJlYWtwb2ludDogNjAwLFxyXG4gICAgICAgIG9wdGlvbnM6IHtcclxuICAgICAgICAgICAgY2hhcnQ6IHtcclxuICAgICAgICAgICAgICAgIGhlaWdodDogMjQwXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGxlZ2VuZDoge1xyXG4gICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9XHJcbiAgICB9XSxcclxuICAgIGZpbGw6IHtcclxuICAgICAgICB0eXBlOiAnZ3JhZGllbnQnXHJcbiAgICB9XHJcbn1cclxuXHJcbnZhciBjaGFydCA9IG5ldyBBcGV4Q2hhcnRzKFxyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNhcGV4LXBpZS0yXCIpLFxyXG4gICAgb3B0aW9uc1xyXG4pO1xyXG5cclxuY2hhcnQucmVuZGVyKCk7XHJcblxyXG5cclxuLy9cclxuLy8gUGllIENoYXJ0IC0gM1xyXG4vL1xyXG52YXIgY29sb3JzID0gW1wiIzY2NThkZFwiLCBcIiM0ZmM2ZTFcIiwgXCIjNGE4MWQ0XCIsIFwiIzAwYjE5ZFwiLFwiI2YxNTU2Y1wiXTtcclxudmFyIGRhdGFDb2xvcnMgPSAkKFwiI2FwZXgtcGllLTNcIikuZGF0YSgnY29sb3JzJyk7XHJcbmlmIChkYXRhQ29sb3JzKSB7XHJcbiAgICBjb2xvcnMgPSBkYXRhQ29sb3JzLnNwbGl0KFwiLFwiKTtcclxufVxyXG52YXIgb3B0aW9ucyA9IHtcclxuICAgIGNoYXJ0OiB7XHJcbiAgICAgICAgaGVpZ2h0OiAzMjAsXHJcbiAgICAgICAgdHlwZTogJ2RvbnV0JyxcclxuICAgICAgICBkcm9wU2hhZG93OiB7XHJcbiAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbG9yOiAnIzExMScsXHJcbiAgICAgICAgICAgIHRvcDogLTEsXHJcbiAgICAgICAgICAgIGxlZnQ6IDMsXHJcbiAgICAgICAgICAgIGJsdXI6IDMsXHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDAuMlxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBzdHJva2U6IHtcclxuICAgICAgICBzaG93OiB0cnVlLFxyXG4gICAgICAgIHdpZHRoOiAyLFxyXG4gICAgfSxcclxuICAgIHNlcmllczogWzQ0LCA1NSwgNDEsIDE3LCAxNV0sXHJcbiAgICBjb2xvcnM6IGNvbG9ycyxcclxuICAgIGxhYmVsczogW1wiQ29tZWR5XCIsIFwiQWN0aW9uXCIsIFwiU2NpRmlcIiwgXCJEcmFtYVwiLCBcIkhvcnJvclwiXSxcclxuICAgIGRhdGFMYWJlbHM6IHtcclxuICAgICAgICBkcm9wU2hhZG93OiB7XHJcbiAgICAgICAgICAgIGJsdXI6IDMsXHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDAuOFxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBmaWxsOiB7XHJcbiAgICAgICAgdHlwZTogJ3BhdHRlcm4nLFxyXG4gICAgICAgIG9wYWNpdHk6IDEsXHJcbiAgICAgICAgcGF0dGVybjoge1xyXG4gICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgICAgICBzdHlsZTogWyd2ZXJ0aWNhbExpbmVzJywgJ3NxdWFyZXMnLCAnaG9yaXpvbnRhbExpbmVzJywgJ2NpcmNsZXMnLCAnc2xhbnRlZExpbmVzJ10sXHJcbiAgICAgICAgfSxcclxuICAgIH0sXHJcbiAgICBzdGF0ZXM6IHtcclxuICAgICAgICBob3Zlcjoge1xyXG4gICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBsZWdlbmQ6IHtcclxuICAgICAgICBzaG93OiB0cnVlLFxyXG4gICAgICAgIHBvc2l0aW9uOiAnYm90dG9tJyxcclxuICAgICAgICBob3Jpem9udGFsQWxpZ246ICdjZW50ZXInLFxyXG4gICAgICAgIHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnLFxyXG4gICAgICAgIGZsb2F0aW5nOiBmYWxzZSxcclxuICAgICAgICBmb250U2l6ZTogJzE0cHgnLFxyXG4gICAgICAgIG9mZnNldFg6IDAsXHJcbiAgICAgICAgb2Zmc2V0WTogN1xyXG4gICAgfSxcclxuICAgIHJlc3BvbnNpdmU6IFt7XHJcbiAgICAgICAgYnJlYWtwb2ludDogNjAwLFxyXG4gICAgICAgIG9wdGlvbnM6IHtcclxuICAgICAgICAgICAgY2hhcnQ6IHtcclxuICAgICAgICAgICAgICAgIGhlaWdodDogMjQwXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGxlZ2VuZDoge1xyXG4gICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9XHJcbiAgICB9XVxyXG59XHJcblxyXG52YXIgY2hhcnQgPSBuZXcgQXBleENoYXJ0cyhcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjYXBleC1waWUtM1wiKSxcclxuICAgIG9wdGlvbnNcclxuKTtcclxuXHJcbmNoYXJ0LnJlbmRlcigpO1xyXG5cclxuXHJcbi8vXHJcbi8vIFJhZGlhbGJhciBDaGFydCAtMVxyXG4vL1xyXG52YXIgY29sb3JzID0gWycjNmM3NTdkJ107XHJcbnZhciBkYXRhQ29sb3JzID0gJChcIiNhcGV4LXJhZGlhbGJhci0xXCIpLmRhdGEoJ2NvbG9ycycpO1xyXG5pZiAoZGF0YUNvbG9ycykge1xyXG4gICAgY29sb3JzID0gZGF0YUNvbG9ycy5zcGxpdChcIixcIik7XHJcbn1cclxudmFyIG9wdGlvbnMgPSB7XHJcbiAgICBjaGFydDoge1xyXG4gICAgICAgIGhlaWdodDogMzUwLFxyXG4gICAgICAgIHR5cGU6ICdyYWRpYWxCYXInLFxyXG4gICAgfSxcclxuICAgIHBsb3RPcHRpb25zOiB7XHJcbiAgICAgICAgcmFkaWFsQmFyOiB7XHJcbiAgICAgICAgICAgIGhvbGxvdzoge1xyXG4gICAgICAgICAgICAgICAgc2l6ZTogJzcwJScsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuICAgIGNvbG9yczogW1wiIzZjNzU3ZFwiXSxcclxuICAgIHNlcmllczogWzcwXSxcclxuICAgIGxhYmVsczogWydDUklDS0VUJ10sXHJcblxyXG59XHJcblxyXG52YXIgY2hhcnQgPSBuZXcgQXBleENoYXJ0cyhcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjYXBleC1yYWRpYWxiYXItMVwiKSxcclxuICAgIG9wdGlvbnNcclxuKTtcclxuXHJcbmNoYXJ0LnJlbmRlcigpO1xyXG5cclxuXHJcbi8vXHJcbi8vIFJhZGlhbGJhciBDaGFydCAtIDJcclxuLy9cclxudmFyIGNvbG9ycyA9IFtcIiM2NjU4ZGRcIiwgXCIjZTM2NDk4XCIsIFwiIzIzYjM5N1wiLCBcIiNmN2I4NGJcIl07XHJcbnZhciBkYXRhQ29sb3JzID0gJChcIiNhcGV4LXJhZGlhbGJhci0yXCIpLmRhdGEoJ2NvbG9ycycpO1xyXG5pZiAoZGF0YUNvbG9ycykge1xyXG4gICAgY29sb3JzID0gZGF0YUNvbG9ycy5zcGxpdChcIixcIik7XHJcbn1cclxudmFyIG9wdGlvbnMgPSB7XHJcbiAgICBjaGFydDoge1xyXG4gICAgICAgIGhlaWdodDogMzUwLFxyXG4gICAgICAgIHR5cGU6ICdyYWRpYWxCYXInLFxyXG4gICAgfSxcclxuICAgIHBsb3RPcHRpb25zOiB7XHJcbiAgICAgICAgcmFkaWFsQmFyOiB7XHJcbiAgICAgICAgICAgIGRhdGFMYWJlbHM6IHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IHtcclxuICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzIycHgnLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHZhbHVlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxNnB4JyxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB0b3RhbDoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdUb3RhbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiAodykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBCeSBkZWZhdWx0IHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgYXZlcmFnZSBvZiBhbGwgc2VyaWVzLiBUaGUgYmVsb3cgaXMganVzdCBhbiBleGFtcGxlIHRvIHNob3cgdGhlIHVzZSBvZiBjdXN0b20gZm9ybWF0dGVyIGZ1bmN0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAyNDlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgY29sb3JzOiBjb2xvcnMsXHJcbiAgICBzZXJpZXM6IFs0NCwgNTUsIDY3LCA4M10sXHJcbiAgICBsYWJlbHM6IFsnQXBwbGVzJywgJ09yYW5nZXMnLCAnQmFuYW5hcycsICdCZXJyaWVzJ10sXHJcblxyXG59XHJcblxyXG52YXIgY2hhcnQgPSBuZXcgQXBleENoYXJ0cyhcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjYXBleC1yYWRpYWxiYXItMlwiKSxcclxuICAgIG9wdGlvbnNcclxuKTtcclxuXHJcbmNoYXJ0LnJlbmRlcigpO1xyXG5cclxuXHJcbi8vXHJcbi8vIFJhZGlhbGJhciBDaGFydCAtIDNcclxuLy9cclxudmFyIGNvbG9ycyA9IFsnI2YxNTU2YyddO1xyXG52YXIgZGF0YUNvbG9ycyA9ICQoXCIjYXBleC1yYWRpYWxiYXItM1wiKS5kYXRhKCdjb2xvcnMnKTtcclxuaWYgKGRhdGFDb2xvcnMpIHtcclxuICAgIGNvbG9ycyA9IGRhdGFDb2xvcnMuc3BsaXQoXCIsXCIpO1xyXG59XHJcbnZhciBvcHRpb25zID0ge1xyXG4gICAgY2hhcnQ6IHtcclxuICAgICAgICBoZWlnaHQ6IDM3NSxcclxuICAgICAgICB0eXBlOiAncmFkaWFsQmFyJyxcclxuICAgIH0sXHJcbiAgICBwbG90T3B0aW9uczoge1xyXG4gICAgICAgIHJhZGlhbEJhcjoge1xyXG4gICAgICAgICAgICBzdGFydEFuZ2xlOiAtMTM1LFxyXG4gICAgICAgICAgICBlbmRBbmdsZTogMTM1LFxyXG4gICAgICAgICAgICBkYXRhTGFiZWxzOiB7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxNnB4JyxcclxuICAgICAgICAgICAgICAgICAgICBjb2xvcjogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldFk6IDEyMFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHZhbHVlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WTogNzYsXHJcbiAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcyMnB4JyxcclxuICAgICAgICAgICAgICAgICAgICBjb2xvcjogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24gKHZhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsICsgXCIlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIGZpbGw6IHtcclxuICAgICAgICBncmFkaWVudDoge1xyXG4gICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgICAgICBzaGFkZTogJ2RhcmsnLFxyXG4gICAgICAgICAgICBzaGFkZUludGVuc2l0eTogMC4xNSxcclxuICAgICAgICAgICAgaW52ZXJzZUNvbG9yczogZmFsc2UsXHJcbiAgICAgICAgICAgIG9wYWNpdHlGcm9tOiAxLFxyXG4gICAgICAgICAgICBvcGFjaXR5VG86IDEsXHJcbiAgICAgICAgICAgIHN0b3BzOiBbMCwgNTAsIDY1LCA5MV1cclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuICAgIHN0cm9rZToge1xyXG4gICAgICAgIGRhc2hBcnJheTogNFxyXG4gICAgfSxcclxuICAgIGNvbG9yczogY29sb3JzLFxyXG4gICAgc2VyaWVzOiBbNjddLFxyXG4gICAgbGFiZWxzOiBbJ01lZGlhbiBSYXRpbyddLFxyXG4gICAgcmVzcG9uc2l2ZTogW3tcclxuICAgICAgICBicmVha3BvaW50OiAzODAsXHJcbiAgICAgICAgb3B0aW9uczoge1xyXG4gICAgICAgICAgICBjaGFydDoge1xyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAyODBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1dXHJcbn1cclxuXHJcbnZhciBjaGFydCA9IG5ldyBBcGV4Q2hhcnRzKFxyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNhcGV4LXJhZGlhbGJhci0zXCIpLFxyXG4gICAgb3B0aW9uc1xyXG4pO1xyXG5cclxuY2hhcnQucmVuZGVyKCk7Il0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUFBLElBQUksQ0FBQ0MsSUFBSSxHQUFHO0VBQ1JDLE9BQU8sRUFBRTtJQUNMQyxLQUFLLEVBQUUsQ0FBQztJQUNSQyxJQUFJLEVBQUU7RUFDVjtBQUNKLENBQUM7QUFFREosSUFBSSxDQUFDSyxVQUFVLEdBQUc7RUFDZEMsT0FBTyxFQUFFO0FBQ2IsQ0FBQztBQUVELElBQUlDLGNBQWMsR0FBRyxTQUFqQkEsY0FBY0EsQ0FBYUMsR0FBRyxFQUFFO0VBQ2hDLElBQUlDLEtBQUssR0FBR0QsR0FBRyxDQUFDRSxLQUFLLEVBQUU7RUFDdkIsSUFBSUMsWUFBWSxHQUFHRixLQUFLLENBQUNHLE1BQU07SUFBRUMsY0FBYztJQUFFQyxXQUFXO0VBRTVELE9BQU8sQ0FBQyxLQUFLSCxZQUFZLEVBQUU7SUFFdkJHLFdBQVcsR0FBR0MsSUFBSSxDQUFDQyxLQUFLLENBQUNELElBQUksQ0FBQ0UsTUFBTSxFQUFFLEdBQUdOLFlBQVksQ0FBQztJQUN0REEsWUFBWSxJQUFJLENBQUM7SUFFakJFLGNBQWMsR0FBR0osS0FBSyxDQUFDRSxZQUFZLENBQUM7SUFDcENGLEtBQUssQ0FBQ0UsWUFBWSxDQUFDLEdBQUdGLEtBQUssQ0FBQ0ssV0FBVyxDQUFDO0lBQ3hDTCxLQUFLLENBQUNLLFdBQVcsQ0FBQyxHQUFHRCxjQUFjO0VBQ3ZDO0VBRUEsT0FBT0osS0FBSztBQUNoQixDQUFDOztBQUVEO0FBQ0EsSUFBSVMsYUFBYSxHQUFHLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUM7O0FBRXBIO0FBQ0E7QUFDQSxJQUFJQyxZQUFZLEdBQUcsQ0FBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxDQUFDO0FBRzFFLElBQUlDLE1BQU0sR0FBRyxDQUFDLFNBQVMsQ0FBQztBQUN4QixJQUFJQyxVQUFVLEdBQUdDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLFFBQVEsQ0FBQztBQUM1QyxJQUFJRixVQUFVLEVBQUU7RUFDWkQsTUFBTSxHQUFHQyxVQUFVLENBQUNHLEtBQUssQ0FBQyxHQUFHLENBQUM7QUFDbEM7QUFDQSxJQUFJQyxNQUFNLEdBQUc7RUFDVEMsS0FBSyxFQUFFO0lBQ0hDLElBQUksRUFBRSxNQUFNO0lBQ1pDLE1BQU0sRUFBRSxHQUFHO0lBQ1hDLFNBQVMsRUFBRTtNQUNQdkIsT0FBTyxFQUFFO0lBQ2I7RUFDSixDQUFDO0VBQ0R3QixNQUFNLEVBQUU7SUFDSkMsS0FBSyxFQUFFLENBQUM7SUFDUkMsS0FBSyxFQUFFO0VBQ1gsQ0FBQztFQUNEQyxJQUFJLEVBQUU7SUFDRkMsT0FBTyxFQUFFO0VBQ2IsQ0FBQztFQUNEQyxNQUFNLEVBQUUsQ0FBQztJQUNMQyxJQUFJLEVBQUUsY0FBYztJQUNwQmIsSUFBSSxFQUFFaEIsY0FBYyxDQUFDVyxhQUFhO0VBQ3RDLENBQUMsQ0FBQztFQUNGbUIsS0FBSyxFQUFFO0lBQ0hDLEdBQUcsRUFBRTtFQUNULENBQUM7RUFDRGxCLE1BQU0sRUFBRUEsTUFBTTtFQUNkbUIsS0FBSyxFQUFFO0lBQ0hDLElBQUksRUFBRSxVQUFVO0lBQ2hCQyxPQUFPLEVBQUUsRUFBRTtJQUNYQyxLQUFLLEVBQUU7TUFDSEMsUUFBUSxFQUFFO0lBQ2Q7RUFDSixDQUFDO0VBQ0RDLFFBQVEsRUFBRTtJQUNOSixJQUFJLEVBQUUsYUFBYTtJQUNuQkMsT0FBTyxFQUFFLEVBQUU7SUFDWEksT0FBTyxFQUFFLEVBQUU7SUFDWEgsS0FBSyxFQUFFO01BQ0hDLFFBQVEsRUFBRTtJQUNkO0VBQ0o7QUFDSixDQUFDO0FBQ0QsSUFBSUcsVUFBVSxDQUFDQyxRQUFRLENBQUNDLGFBQWEsQ0FBQyxTQUFTLENBQUMsRUFBRXZCLE1BQU0sQ0FBQyxDQUFDd0IsTUFBTSxFQUFFO0FBRWxFLElBQUk3QixNQUFNLEdBQUcsQ0FBQyxTQUFTLENBQUM7QUFDeEIsSUFBSUMsVUFBVSxHQUFHQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUNDLElBQUksQ0FBQyxRQUFRLENBQUM7QUFDNUMsSUFBSUYsVUFBVSxFQUFFO0VBQ1pELE1BQU0sR0FBR0MsVUFBVSxDQUFDRyxLQUFLLENBQUMsR0FBRyxDQUFDO0FBQ2xDO0FBQ0EsSUFBSTBCLE1BQU0sR0FBRztFQUNUeEIsS0FBSyxFQUFFO0lBQ0hDLElBQUksRUFBRSxNQUFNO0lBQ1pDLE1BQU0sRUFBRSxHQUFHO0lBQ1hDLFNBQVMsRUFBRTtNQUNQdkIsT0FBTyxFQUFFO0lBQ2I7RUFDSixDQUFDO0VBQ0R3QixNQUFNLEVBQUU7SUFDSkMsS0FBSyxFQUFFLENBQUM7SUFDUkMsS0FBSyxFQUFFO0VBQ1gsQ0FBQztFQUNEQyxJQUFJLEVBQUU7SUFDRkMsT0FBTyxFQUFFO0VBQ2IsQ0FBQztFQUNEQyxNQUFNLEVBQUUsQ0FBQztJQUNMQyxJQUFJLEVBQUUsaUJBQWlCO0lBQ3ZCYixJQUFJLEVBQUVoQixjQUFjLENBQUNXLGFBQWE7RUFDdEMsQ0FBQyxDQUFDO0VBQ0ZtQixLQUFLLEVBQUU7SUFDSEMsR0FBRyxFQUFFO0VBQ1QsQ0FBQztFQUNEbEIsTUFBTSxFQUFFQSxNQUFNO0VBQ2RtQixLQUFLLEVBQUU7SUFDSEMsSUFBSSxFQUFFLFVBQVU7SUFDaEJDLE9BQU8sRUFBRSxFQUFFO0lBQ1hDLEtBQUssRUFBRTtNQUNIQyxRQUFRLEVBQUU7SUFDZDtFQUNKLENBQUM7RUFDREMsUUFBUSxFQUFFO0lBQ05KLElBQUksRUFBRSxVQUFVO0lBQ2hCQyxPQUFPLEVBQUUsRUFBRTtJQUNYSSxPQUFPLEVBQUUsRUFBRTtJQUNYSCxLQUFLLEVBQUU7TUFDSEMsUUFBUSxFQUFFO0lBQ2Q7RUFDSjtBQUNKLENBQUM7QUFFRCxJQUFJRyxVQUFVLENBQUNDLFFBQVEsQ0FBQ0MsYUFBYSxDQUFDLFNBQVMsQ0FBQyxFQUFFRSxNQUFNLENBQUMsQ0FBQ0QsTUFBTSxFQUFFOztBQUVsRTtBQUNBLElBQUk3QixNQUFNLEdBQUcsQ0FBQyxTQUFTLENBQUM7QUFDeEIsSUFBSUMsVUFBVSxHQUFHQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUNDLElBQUksQ0FBQyxRQUFRLENBQUM7QUFDNUMsSUFBSUYsVUFBVSxFQUFFO0VBQ1pELE1BQU0sR0FBR0MsVUFBVSxDQUFDRyxLQUFLLENBQUMsR0FBRyxDQUFDO0FBQ2xDO0FBQ0EsSUFBSTJCLE1BQU0sR0FBRztFQUNUekIsS0FBSyxFQUFFO0lBQ0hDLElBQUksRUFBRSxNQUFNO0lBQ1pDLE1BQU0sRUFBRSxHQUFHO0lBQ1hDLFNBQVMsRUFBRTtNQUNQdkIsT0FBTyxFQUFFO0lBQ2I7RUFDSixDQUFDO0VBQ0R3QixNQUFNLEVBQUU7SUFDSkMsS0FBSyxFQUFFLENBQUM7SUFDUkMsS0FBSyxFQUFFO0VBQ1gsQ0FBQztFQUNEQyxJQUFJLEVBQUU7SUFDRkMsT0FBTyxFQUFFO0VBQ2IsQ0FBQztFQUNEQyxNQUFNLEVBQUUsQ0FBQztJQUNMQyxJQUFJLEVBQUUsY0FBYztJQUNwQmIsSUFBSSxFQUFFaEIsY0FBYyxDQUFDVyxhQUFhO0VBQ3RDLENBQUMsQ0FBQztFQUNGa0MsS0FBSyxFQUFFO0lBQ0hDLFVBQVUsRUFBRTtNQUNSdEIsS0FBSyxFQUFFO0lBQ1g7RUFDSixDQUFDO0VBQ0RNLEtBQUssRUFBRTtJQUNIQyxHQUFHLEVBQUU7RUFDVCxDQUFDO0VBQ0RsQixNQUFNLEVBQUVBLE1BQU07RUFDZG1CLEtBQUssRUFBRTtJQUNIQyxJQUFJLEVBQUUsVUFBVTtJQUNoQkMsT0FBTyxFQUFFLEVBQUU7SUFDWEMsS0FBSyxFQUFFO01BQ0hDLFFBQVEsRUFBRTtJQUNkO0VBQ0osQ0FBQztFQUNEQyxRQUFRLEVBQUU7SUFDTkosSUFBSSxFQUFFLFNBQVM7SUFDZkMsT0FBTyxFQUFFLEVBQUU7SUFDWEksT0FBTyxFQUFFLEVBQUU7SUFDWEgsS0FBSyxFQUFFO01BQ0hDLFFBQVEsRUFBRTtJQUNkO0VBQ0o7QUFDSixDQUFDO0FBRUQsSUFBSUcsVUFBVSxDQUFDQyxRQUFRLENBQUNDLGFBQWEsQ0FBQyxTQUFTLENBQUMsRUFBRUcsTUFBTSxDQUFDLENBQUNGLE1BQU0sRUFBRTs7QUFHbEU7QUFDQTtBQUNBO0FBQ0EsSUFBSTdCLE1BQU0sR0FBRyxDQUFDLFNBQVMsRUFBQyxTQUFTLENBQUM7QUFDbEMsSUFBSUMsVUFBVSxHQUFHQyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUNDLElBQUksQ0FBQyxRQUFRLENBQUM7QUFDakQsSUFBSUYsVUFBVSxFQUFFO0VBQ1pELE1BQU0sR0FBR0MsVUFBVSxDQUFDRyxLQUFLLENBQUMsR0FBRyxDQUFDO0FBQ2xDO0FBQ0EsSUFBSThCLE9BQU8sR0FBRztFQUNWNUIsS0FBSyxFQUFFO0lBQ0hFLE1BQU0sRUFBRSxHQUFHO0lBQ1hELElBQUksRUFBRSxNQUFNO0lBQ1o0QixJQUFJLEVBQUU7TUFDRmpELE9BQU8sRUFBRTtJQUNiLENBQUM7SUFDRGtELE9BQU8sRUFBRTtNQUNMQyxJQUFJLEVBQUU7SUFDVjtFQUNKLENBQUM7RUFDRHJDLE1BQU0sRUFBRUEsTUFBTTtFQUNkZixVQUFVLEVBQUU7SUFDUkMsT0FBTyxFQUFFO0VBQ2IsQ0FBQztFQUNEd0IsTUFBTSxFQUFFO0lBQ0pDLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDYkMsS0FBSyxFQUFFO0VBQ1gsQ0FBQztFQUNERyxNQUFNLEVBQUUsQ0FBQztJQUNEQyxJQUFJLEVBQUUsYUFBYTtJQUNuQmIsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRTtFQUNyQyxDQUFDLEVBQ0Q7SUFDSWEsSUFBSSxFQUFFLFlBQVk7SUFDbEJiLElBQUksRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUU7RUFDckMsQ0FBQyxDQUNKO0VBQ0RnQixLQUFLLEVBQUU7SUFDSEMsSUFBSSxFQUFFLGdDQUFnQztJQUN0Q2tCLEtBQUssRUFBRSxNQUFNO0lBQ2JoQixLQUFLLEVBQUU7TUFDSEMsUUFBUSxFQUFFLE1BQU07TUFDaEJnQixLQUFLLEVBQUU7SUFDWDtFQUNKLENBQUM7RUFDRDFELElBQUksRUFBRTtJQUNGMkQsR0FBRyxFQUFFO01BQ0R4QyxNQUFNLEVBQUUsQ0FBQyxhQUFhLEVBQUUsYUFBYSxDQUFDO01BQUU7TUFDeENjLE9BQU8sRUFBRTtJQUNiLENBQUM7SUFDRDJCLFdBQVcsRUFBRTtFQUNqQixDQUFDO0VBQ0RDLE9BQU8sRUFBRTtJQUNMcEIsS0FBSyxFQUFFLFVBQVU7SUFDakJxQixJQUFJLEVBQUU7RUFDVixDQUFDO0VBQ0RYLEtBQUssRUFBRTtJQUNIWSxVQUFVLEVBQUUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUM7SUFDN0R6QixLQUFLLEVBQUU7TUFDSEMsSUFBSSxFQUFFO0lBQ1Y7RUFDSixDQUFDO0VBQ0RILEtBQUssRUFBRTtJQUNIRSxLQUFLLEVBQUU7TUFDSEMsSUFBSSxFQUFFO0lBQ1YsQ0FBQztJQUNERixHQUFHLEVBQUUsQ0FBQztJQUNOMkIsR0FBRyxFQUFFO0VBQ1QsQ0FBQztFQUNEQyxNQUFNLEVBQUU7SUFDSkMsUUFBUSxFQUFFLEtBQUs7SUFDZkMsZUFBZSxFQUFFLE9BQU87SUFDeEJDLFFBQVEsRUFBRSxJQUFJO0lBQ2R4QixPQUFPLEVBQUUsQ0FBQyxFQUFFO0lBQ1pKLE9BQU8sRUFBRSxDQUFDO0VBQ2QsQ0FBQztFQUNENkIsVUFBVSxFQUFFLENBQUM7SUFDVEMsVUFBVSxFQUFFLEdBQUc7SUFDZmpCLE9BQU8sRUFBRTtNQUNMNUIsS0FBSyxFQUFFO1FBQ0g4QixPQUFPLEVBQUU7VUFDTEMsSUFBSSxFQUFFO1FBQ1Y7TUFDSixDQUFDO01BQ0RTLE1BQU0sRUFBRTtRQUNKVCxJQUFJLEVBQUU7TUFDVjtJQUNKO0VBQ0osQ0FBQztBQUNMLENBQUM7QUFFRCxJQUFJL0IsS0FBSyxHQUFHLElBQUlvQixVQUFVLENBQ3RCQyxRQUFRLENBQUNDLGFBQWEsQ0FBQyxjQUFjLENBQUMsRUFDdENNLE9BQU8sQ0FDVjtBQUVENUIsS0FBSyxDQUFDdUIsTUFBTSxFQUFFOztBQUdkO0FBQ0E7QUFDQTtBQUNBLElBQUk3QixNQUFNLEdBQUcsQ0FBQyxTQUFTLENBQUM7QUFDeEIsSUFBSUMsVUFBVSxHQUFHQyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUNDLElBQUksQ0FBQyxRQUFRLENBQUM7QUFDakQsSUFBSUYsVUFBVSxFQUFFO0VBQ1pELE1BQU0sR0FBR0MsVUFBVSxDQUFDRyxLQUFLLENBQUMsR0FBRyxDQUFDO0FBQ2xDO0FBQ0EsSUFBSThCLE9BQU8sR0FBRztFQUNWNUIsS0FBSyxFQUFFO0lBQ0hFLE1BQU0sRUFBRSxHQUFHO0lBQ1hELElBQUksRUFBRSxNQUFNO0lBQ1o2QyxNQUFNLEVBQUU7TUFDSmxFLE9BQU8sRUFBRSxLQUFLO01BQ2RxRCxLQUFLLEVBQUUsTUFBTTtNQUNiYyxHQUFHLEVBQUUsQ0FBQztNQUNOckUsSUFBSSxFQUFFLENBQUM7TUFDUHNFLElBQUksRUFBRSxDQUFDO01BQ1B4QyxPQUFPLEVBQUU7SUFDYjtFQUNKLENBQUM7RUFDREosTUFBTSxFQUFFO0lBQ0pDLEtBQUssRUFBRSxDQUFDO0lBQ1JDLEtBQUssRUFBRTtFQUNYLENBQUM7RUFDREcsTUFBTSxFQUFFLENBQUM7SUFDTEMsSUFBSSxFQUFFLE9BQU87SUFDYmIsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO0VBQ3ZFLENBQUMsQ0FBQztFQUNGNkIsS0FBSyxFQUFFO0lBQ0h6QixJQUFJLEVBQUUsVUFBVTtJQUNoQnFDLFVBQVUsRUFBRSxDQUFDLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVztFQUM1UCxDQUFDO0VBQ0R6QixLQUFLLEVBQUU7SUFDSEMsSUFBSSxFQUFFLGNBQWM7SUFDcEJrQixLQUFLLEVBQUUsTUFBTTtJQUNiaEIsS0FBSyxFQUFFO01BQ0hDLFFBQVEsRUFBRSxNQUFNO01BQ2hCZ0IsS0FBSyxFQUFFO0lBQ1g7RUFDSixDQUFDO0VBQ0QxQixJQUFJLEVBQUU7SUFDRk4sSUFBSSxFQUFFLFVBQVU7SUFDaEJnRCxRQUFRLEVBQUU7TUFDTkMsS0FBSyxFQUFFLE1BQU07TUFDYkMsZ0JBQWdCLEVBQUV6RCxNQUFNO01BQ3hCMEQsY0FBYyxFQUFFLENBQUM7TUFDakJuRCxJQUFJLEVBQUUsWUFBWTtNQUNsQm9ELFdBQVcsRUFBRSxDQUFDO01BQ2RDLFNBQVMsRUFBRSxDQUFDO01BQ1pDLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUc7SUFDNUI7RUFDSixDQUFDO0VBQ0RuQixPQUFPLEVBQUU7SUFDTEMsSUFBSSxFQUFFLENBQUM7SUFDUDdCLE9BQU8sRUFBRSxHQUFHO0lBQ1pkLE1BQU0sRUFBRSxDQUFDLFNBQVMsQ0FBQztJQUNuQjhELFdBQVcsRUFBRSxNQUFNO0lBQ25CQyxXQUFXLEVBQUUsQ0FBQztJQUNkekMsS0FBSyxFQUFFLFVBQVU7SUFBRTtJQUNuQjBDLEtBQUssRUFBRTtNQUNIckIsSUFBSSxFQUFFO0lBQ1Y7RUFDSixDQUFDO0VBQ0QxQixLQUFLLEVBQUU7SUFDSEMsR0FBRyxFQUFFLENBQUMsRUFBRTtJQUNSMkIsR0FBRyxFQUFFLEVBQUU7SUFDUDFCLEtBQUssRUFBRTtNQUNIQyxJQUFJLEVBQUU7SUFDVjtFQUNKLENBQUM7RUFDRHZDLElBQUksRUFBRTtJQUNGMkQsR0FBRyxFQUFFO01BQ0R4QyxNQUFNLEVBQUUsQ0FBQyxhQUFhLEVBQUUsYUFBYSxDQUFDO01BQUU7TUFDeENjLE9BQU8sRUFBRTtJQUNiLENBQUM7SUFDRDJCLFdBQVcsRUFBRTtFQUNqQixDQUFDO0VBQ0RTLFVBQVUsRUFBRSxDQUFDO0lBQ1RDLFVBQVUsRUFBRSxHQUFHO0lBQ2ZqQixPQUFPLEVBQUU7TUFDTDVCLEtBQUssRUFBRTtRQUNIOEIsT0FBTyxFQUFFO1VBQ0xDLElBQUksRUFBRTtRQUNWO01BQ0osQ0FBQztNQUNEUyxNQUFNLEVBQUU7UUFDSlQsSUFBSSxFQUFFO01BQ1Y7SUFDSjtFQUNKLENBQUM7QUFDTCxDQUFDO0FBRUQsSUFBSS9CLEtBQUssR0FBRyxJQUFJb0IsVUFBVSxDQUN0QkMsUUFBUSxDQUFDQyxhQUFhLENBQUMsY0FBYyxDQUFDLEVBQ3RDTSxPQUFPLENBQ1Y7QUFFRDVCLEtBQUssQ0FBQ3VCLE1BQU0sRUFBRTs7QUFHZDtBQUNBO0FBQ0E7QUFDQSxJQUFJN0IsTUFBTSxHQUFHLENBQUMsU0FBUyxFQUFDLFNBQVMsRUFBRSxTQUFTLENBQUM7QUFDN0MsSUFBSUMsVUFBVSxHQUFHQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUNDLElBQUksQ0FBQyxRQUFRLENBQUM7QUFDL0MsSUFBSUYsVUFBVSxFQUFFO0VBQ1pELE1BQU0sR0FBR0MsVUFBVSxDQUFDRyxLQUFLLENBQUMsR0FBRyxDQUFDO0FBQ2xDO0FBQ0EsSUFBSThCLE9BQU8sR0FBRztFQUNWNUIsS0FBSyxFQUFFO0lBQ0hFLE1BQU0sRUFBRSxHQUFHO0lBQ1hELElBQUksRUFBRSxNQUFNO0lBQ1owRCxPQUFPLEVBQUUsSUFBSTtJQUNiQyxNQUFNLEVBQUU7TUFDSkMsU0FBUyxFQUFFLFNBQUFBLFVBQVU3RCxLQUFLLEVBQUU4RCxDQUFDLEVBQUU7UUFDM0JDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLElBQUlDLElBQUksQ0FBQ0gsQ0FBQyxDQUFDcEMsS0FBSyxDQUFDZCxHQUFHLENBQUMsQ0FBQztNQUN0QztJQUNKO0VBRUosQ0FBQztFQUNEbEIsTUFBTSxFQUFFQSxNQUFNO0VBQ2RmLFVBQVUsRUFBRTtJQUNSQyxPQUFPLEVBQUU7RUFDYixDQUFDO0VBQ0R3QixNQUFNLEVBQUU7SUFDSkMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ1ZDLEtBQUssRUFBRTtFQUNYLENBQUM7RUFFREcsTUFBTSxFQUFFLENBQUM7SUFDREMsSUFBSSxFQUFFLE9BQU87SUFDYmIsSUFBSSxFQUFFcUUseUJBQXlCLENBQUMsSUFBSUQsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUNFLE9BQU8sRUFBRSxFQUFFLEVBQUUsRUFBRTtNQUN2RXZELEdBQUcsRUFBRSxFQUFFO01BQ1AyQixHQUFHLEVBQUU7SUFDVCxDQUFDO0VBQ0wsQ0FBQyxFQUNEO0lBQ0k3QixJQUFJLEVBQUUsT0FBTztJQUNiYixJQUFJLEVBQUVxRSx5QkFBeUIsQ0FBQyxJQUFJRCxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQ0UsT0FBTyxFQUFFLEVBQUUsRUFBRSxFQUFFO01BQ3ZFdkQsR0FBRyxFQUFFLEVBQUU7TUFDUDJCLEdBQUcsRUFBRTtJQUNULENBQUM7RUFDTCxDQUFDLEVBRUQ7SUFDSTdCLElBQUksRUFBRSxTQUFTO0lBQ2ZiLElBQUksRUFBRXFFLHlCQUF5QixDQUFDLElBQUlELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDRSxPQUFPLEVBQUUsRUFBRSxFQUFFLEVBQUU7TUFDdkV2RCxHQUFHLEVBQUUsRUFBRTtNQUNQMkIsR0FBRyxFQUFFO0lBQ1QsQ0FBQztFQUNMLENBQUMsQ0FDSjtFQUNEaEMsSUFBSSxFQUFFO0lBQ0ZOLElBQUksRUFBRSxVQUFVO0lBQ2hCZ0QsUUFBUSxFQUFFO01BQ05JLFdBQVcsRUFBRSxHQUFHO01BQ2hCQyxTQUFTLEVBQUU7SUFDZjtFQUNKLENBQUM7RUFDRGQsTUFBTSxFQUFFO0lBQ0pDLFFBQVEsRUFBRSxLQUFLO0lBQ2ZDLGVBQWUsRUFBRTtFQUNyQixDQUFDO0VBQ0RoQixLQUFLLEVBQUU7SUFDSHpCLElBQUksRUFBRTtFQUNWO0FBQ0osQ0FBQztBQUVELElBQUlELEtBQUssR0FBRyxJQUFJb0IsVUFBVSxDQUN0QkMsUUFBUSxDQUFDQyxhQUFhLENBQUMsWUFBWSxDQUFDLEVBQ3BDTSxPQUFPLENBQ1Y7QUFFRDVCLEtBQUssQ0FBQ3VCLE1BQU0sRUFBRTs7QUFFZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTMkMseUJBQXlCQSxDQUFDRSxPQUFPLEVBQUVDLEtBQUssRUFBRUMsTUFBTSxFQUFFO0VBQ3ZELElBQUlDLENBQUMsR0FBRyxDQUFDO0VBQ1QsSUFBSTlELE1BQU0sR0FBRyxFQUFFO0VBQ2YsT0FBTzhELENBQUMsR0FBR0YsS0FBSyxFQUFFO0lBQ2QsSUFBSUcsQ0FBQyxHQUFHSixPQUFPO0lBQ2YsSUFBSUssQ0FBQyxHQUFHcEYsSUFBSSxDQUFDQyxLQUFLLENBQUNELElBQUksQ0FBQ0UsTUFBTSxFQUFFLElBQUkrRSxNQUFNLENBQUMvQixHQUFHLEdBQUcrQixNQUFNLENBQUMxRCxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRzBELE1BQU0sQ0FBQzFELEdBQUc7SUFFOUVILE1BQU0sQ0FBQ2lFLElBQUksQ0FBQyxDQUFDRixDQUFDLEVBQUVDLENBQUMsQ0FBQyxDQUFDO0lBQ25CTCxPQUFPLElBQUksUUFBUTtJQUNuQkcsQ0FBQyxFQUFFO0VBQ1A7RUFDQSxPQUFPOUQsTUFBTTtBQUNqQjs7QUFHQTtBQUNBO0FBQ0E7QUFDQSxJQUFJZixNQUFNLEdBQUcsQ0FBQyxTQUFTLEVBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQztBQUM3QyxJQUFJQyxVQUFVLEdBQUdDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDQyxJQUFJLENBQUMsUUFBUSxDQUFDO0FBQ25ELElBQUlGLFVBQVUsRUFBRTtFQUNaRCxNQUFNLEdBQUdDLFVBQVUsQ0FBQ0csS0FBSyxDQUFDLEdBQUcsQ0FBQztBQUNsQztBQUNBLElBQUk4QixPQUFPLEdBQUc7RUFDVjVCLEtBQUssRUFBRTtJQUNIRSxNQUFNLEVBQUUsR0FBRztJQUNYRCxJQUFJLEVBQUUsS0FBSztJQUNYNkIsT0FBTyxFQUFFO01BQ0xDLElBQUksRUFBRTtJQUNWO0VBQ0osQ0FBQztFQUNENEMsV0FBVyxFQUFFO0lBQ1RDLEdBQUcsRUFBRTtNQUNEQyxVQUFVLEVBQUUsS0FBSztNQUNqQkMsV0FBVyxFQUFFLFNBQVM7TUFDdEJDLFdBQVcsRUFBRTtJQUNqQjtFQUNKLENBQUM7RUFDRHBHLFVBQVUsRUFBRTtJQUNSQyxPQUFPLEVBQUU7RUFDYixDQUFDO0VBQ0R3QixNQUFNLEVBQUU7SUFDSjJCLElBQUksRUFBRSxJQUFJO0lBQ1YxQixLQUFLLEVBQUUsQ0FBQztJQUNSWCxNQUFNLEVBQUUsQ0FBQyxhQUFhO0VBQzFCLENBQUM7RUFDREEsTUFBTSxFQUFFQSxNQUFNO0VBQ2RlLE1BQU0sRUFBRSxDQUFDO0lBQ0xDLElBQUksRUFBRSxZQUFZO0lBQ2xCYixJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUU7RUFDN0MsQ0FBQyxFQUFFO0lBQ0NhLElBQUksRUFBRSxTQUFTO0lBQ2ZiLElBQUksRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRTtFQUNoRCxDQUFDLEVBQUU7SUFDQ2EsSUFBSSxFQUFFLGdCQUFnQjtJQUN0QmIsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFO0VBQzdDLENBQUMsQ0FBQztFQUNGNkIsS0FBSyxFQUFFO0lBQ0hZLFVBQVUsRUFBRSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSztFQUM5RSxDQUFDO0VBQ0RFLE1BQU0sRUFBRTtJQUNKckIsT0FBTyxFQUFFO0VBQ2IsQ0FBQztFQUNEUixLQUFLLEVBQUU7SUFDSEUsS0FBSyxFQUFFO01BQ0hDLElBQUksRUFBRTtJQUNWO0VBQ0osQ0FBQztFQUNEUCxJQUFJLEVBQUU7SUFDRkMsT0FBTyxFQUFFO0VBRWIsQ0FBQztFQUNEakMsSUFBSSxFQUFFO0lBQ0YyRCxHQUFHLEVBQUU7TUFDRHhDLE1BQU0sRUFBRSxDQUFDLGFBQWEsRUFBRSxhQUFhLENBQUM7TUFBRTtNQUN4Q2MsT0FBTyxFQUFFO0lBQ2IsQ0FBQztJQUNEMkIsV0FBVyxFQUFFLFNBQVM7SUFDdEIzRCxPQUFPLEVBQUU7TUFDTHdHLE1BQU0sRUFBRTtJQUNaO0VBQ0osQ0FBQztFQUNEQyxPQUFPLEVBQUU7SUFDTFIsQ0FBQyxFQUFFO01BQ0NTLFNBQVMsRUFBRSxTQUFBQSxVQUFVQyxHQUFHLEVBQUU7UUFDdEIsT0FBTyxJQUFJLEdBQUdBLEdBQUcsR0FBRyxZQUFZO01BQ3BDO0lBQ0o7RUFDSjtBQUNKLENBQUM7QUFFRCxJQUFJbkYsS0FBSyxHQUFHLElBQUlvQixVQUFVLENBQ3RCQyxRQUFRLENBQUNDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUN4Q00sT0FBTyxDQUNWO0FBRUQ1QixLQUFLLENBQUN1QixNQUFNLEVBQUU7O0FBR2Q7QUFDQTtBQUNBO0FBQ0EsSUFBSTdCLE1BQU0sR0FBRyxDQUFDLFNBQVMsQ0FBQztBQUN4QixJQUFJQyxVQUFVLEdBQUdDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDQyxJQUFJLENBQUMsUUFBUSxDQUFDO0FBQ25ELElBQUlGLFVBQVUsRUFBRTtFQUNaRCxNQUFNLEdBQUdDLFVBQVUsQ0FBQ0csS0FBSyxDQUFDLEdBQUcsQ0FBQztBQUNsQztBQUNBLElBQUk4QixPQUFPLEdBQUc7RUFDVjVCLEtBQUssRUFBRTtJQUNIRSxNQUFNLEVBQUUsR0FBRztJQUNYRCxJQUFJLEVBQUUsS0FBSztJQUNYNkIsT0FBTyxFQUFFO01BQ0xDLElBQUksRUFBRTtJQUNWO0VBQ0osQ0FBQztFQUNENEMsV0FBVyxFQUFFO0lBQ1RDLEdBQUcsRUFBRTtNQUNEakcsVUFBVSxFQUFFO1FBQ1I4RCxRQUFRLEVBQUUsS0FBSyxDQUFFO01BQ3JCO0lBQ0o7RUFDSixDQUFDOztFQUNEOUQsVUFBVSxFQUFFO0lBQ1JDLE9BQU8sRUFBRSxJQUFJO0lBQ2JzRyxTQUFTLEVBQUUsU0FBQUEsVUFBVUMsR0FBRyxFQUFFO01BQ3RCLE9BQU9BLEdBQUcsR0FBRyxHQUFHO0lBQ3BCLENBQUM7SUFDRGhFLE9BQU8sRUFBRSxDQUFDLEVBQUU7SUFDWkgsS0FBSyxFQUFFO01BQ0hDLFFBQVEsRUFBRSxNQUFNO01BQ2hCdkIsTUFBTSxFQUFFLENBQUMsU0FBUztJQUN0QjtFQUNKLENBQUM7RUFDREEsTUFBTSxFQUFFQSxNQUFNO0VBQ2RlLE1BQU0sRUFBRSxDQUFDO0lBQ0xDLElBQUksRUFBRSxXQUFXO0lBQ2pCYixJQUFJLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUc7RUFDdEUsQ0FBQyxDQUFDO0VBQ0Y2QixLQUFLLEVBQUU7SUFDSFksVUFBVSxFQUFFLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUM7SUFDaEdHLFFBQVEsRUFBRSxLQUFLO0lBQ2YyQyxNQUFNLEVBQUU7TUFDSmpFLE9BQU8sRUFBRSxDQUFDO0lBRWQsQ0FBQztJQUNEa0UsVUFBVSxFQUFFO01BQ1J0RCxJQUFJLEVBQUU7SUFDVixDQUFDO0lBQ0R1RCxTQUFTLEVBQUU7TUFDUHZELElBQUksRUFBRTtJQUNWLENBQUM7SUFDREosVUFBVSxFQUFFO01BQ1JwQixJQUFJLEVBQUU7UUFDRk4sSUFBSSxFQUFFLFVBQVU7UUFDaEJnRCxRQUFRLEVBQUU7VUFDTnNDLFNBQVMsRUFBRSxTQUFTO1VBQ3BCQyxPQUFPLEVBQUUsU0FBUztVQUNsQmpDLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUM7VUFDZkYsV0FBVyxFQUFFLEdBQUc7VUFDaEJDLFNBQVMsRUFBRTtRQUNmO01BQ0o7SUFDSixDQUFDO0lBQ0QyQixPQUFPLEVBQUU7TUFDTHJHLE9BQU8sRUFBRSxJQUFJO01BQ2J1QyxPQUFPLEVBQUUsQ0FBQztJQUVkO0VBQ0osQ0FBQztFQUNEWixJQUFJLEVBQUU7SUFDRjBDLFFBQVEsRUFBRTtNQUNOckUsT0FBTyxFQUFFLEtBQUs7TUFDZHNFLEtBQUssRUFBRSxPQUFPO01BQ2RqRCxJQUFJLEVBQUUsWUFBWTtNQUNsQm1ELGNBQWMsRUFBRSxJQUFJO01BQ3BCRCxnQkFBZ0IsRUFBRXNDLFNBQVM7TUFDM0JDLGFBQWEsRUFBRSxJQUFJO01BQ25CckMsV0FBVyxFQUFFLENBQUM7TUFDZEMsU0FBUyxFQUFFLENBQUM7TUFDWkMsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRztJQUMzQjtFQUNKLENBQUM7RUFDRDVDLEtBQUssRUFBRTtJQUNIMEUsVUFBVSxFQUFFO01BQ1J0RCxJQUFJLEVBQUU7SUFDVixDQUFDO0lBQ0R1RCxTQUFTLEVBQUU7TUFDUHZELElBQUksRUFBRTtJQUNWLENBQUM7SUFDRHFELE1BQU0sRUFBRTtNQUNKckQsSUFBSSxFQUFFLEtBQUs7TUFDWG1ELFNBQVMsRUFBRSxTQUFBQSxVQUFVQyxHQUFHLEVBQUU7UUFDdEIsT0FBT0EsR0FBRyxHQUFHLEdBQUc7TUFDcEI7SUFDSjtFQUVKLENBQUM7RUFDRHRFLEtBQUssRUFBRTtJQUNIQyxJQUFJLEVBQUUsc0NBQXNDO0lBQzVDNkIsUUFBUSxFQUFFLElBQUk7SUFDZHhCLE9BQU8sRUFBRSxHQUFHO0lBQ1phLEtBQUssRUFBRSxRQUFRO0lBQ2ZoQixLQUFLLEVBQUU7TUFDSGlCLEtBQUssRUFBRTtJQUNYO0VBQ0osQ0FBQztFQUNEMUQsSUFBSSxFQUFFO0lBQ0YyRCxHQUFHLEVBQUU7TUFDRHhDLE1BQU0sRUFBRSxDQUFDLGFBQWEsRUFBRSxhQUFhLENBQUM7TUFBRTtNQUN4Q2MsT0FBTyxFQUFFO0lBQ2IsQ0FBQztJQUNEMkIsV0FBVyxFQUFFO0VBQ2pCO0FBQ0osQ0FBQztBQUVELElBQUluQyxLQUFLLEdBQUcsSUFBSW9CLFVBQVUsQ0FDdEJDLFFBQVEsQ0FBQ0MsYUFBYSxDQUFDLGdCQUFnQixDQUFDLEVBQ3hDTSxPQUFPLENBQ1Y7QUFFRDVCLEtBQUssQ0FBQ3VCLE1BQU0sRUFBRTs7QUFHZDtBQUNBO0FBQ0E7QUFDQSxJQUFJN0IsTUFBTSxHQUFHLENBQUMsU0FBUyxFQUFDLFNBQVMsQ0FBQztBQUNsQyxJQUFJQyxVQUFVLEdBQUdDLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLFFBQVEsQ0FBQztBQUNsRCxJQUFJRixVQUFVLEVBQUU7RUFDWkQsTUFBTSxHQUFHQyxVQUFVLENBQUNHLEtBQUssQ0FBQyxHQUFHLENBQUM7QUFDbEM7QUFDQSxJQUFJOEIsT0FBTyxHQUFHO0VBQ1Y1QixLQUFLLEVBQUU7SUFDSEUsTUFBTSxFQUFFLEdBQUc7SUFDWEQsSUFBSSxFQUFFO0VBQ1YsQ0FBQztFQUNERyxNQUFNLEVBQUU7SUFDSkMsS0FBSyxFQUFFLENBQUM7SUFDUkMsS0FBSyxFQUFFO0VBQ1gsQ0FBQztFQUVERyxNQUFNLEVBQUUsQ0FBQztJQUNMQyxJQUFJLEVBQUUsUUFBUTtJQUNkVCxJQUFJLEVBQUUsTUFBTTtJQUNaSixJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRTtFQUNyRCxDQUFDLEVBQUU7SUFDQ2EsSUFBSSxFQUFFLFFBQVE7SUFDZFQsSUFBSSxFQUFFLE1BQU07SUFDWkosSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUU7RUFDckQsQ0FBQyxDQUFDO0VBQ0ZILE1BQU0sRUFBRUEsTUFBTTtFQUNkYSxJQUFJLEVBQUU7SUFDRk4sSUFBSSxFQUFFLE9BQU87SUFDYk8sT0FBTyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7RUFDckIsQ0FBQztFQUNENEUsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLFFBQVEsQ0FBQztFQUN2SGhELE9BQU8sRUFBRTtJQUNMQyxJQUFJLEVBQUU7RUFDVixDQUFDO0VBQ0QxQixLQUFLLEVBQUUsQ0FBQztJQUNBRSxLQUFLLEVBQUU7TUFDSEMsSUFBSSxFQUFFO0lBQ1Y7RUFDSixDQUFDLEVBQ0Q7SUFDSTZFLFFBQVEsRUFBRSxJQUFJO0lBQ2Q5RSxLQUFLLEVBQUU7TUFDSEMsSUFBSSxFQUFFO0lBQ1Y7RUFDSixDQUFDLENBQ0o7RUFDRG1FLE9BQU8sRUFBRTtJQUNMVyxNQUFNLEVBQUUsSUFBSTtJQUNaQyxTQUFTLEVBQUUsS0FBSztJQUNoQnBCLENBQUMsRUFBRTtNQUNDUyxTQUFTLEVBQUUsU0FBQUEsVUFBVVQsQ0FBQyxFQUFFO1FBQ3BCLElBQUksT0FBT0EsQ0FBQyxLQUFLLFdBQVcsRUFBRTtVQUMxQixPQUFPQSxDQUFDLENBQUNxQixPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsU0FBUztRQUNuQztRQUNBLE9BQU9yQixDQUFDO01BRVo7SUFDSjtFQUNKLENBQUM7RUFDRGpDLE1BQU0sRUFBRTtJQUNKckIsT0FBTyxFQUFFO0VBQ2I7QUFFSixDQUFDO0FBRUQsSUFBSW5CLEtBQUssR0FBRyxJQUFJb0IsVUFBVSxDQUN0QkMsUUFBUSxDQUFDQyxhQUFhLENBQUMsZUFBZSxDQUFDLEVBQ3ZDTSxPQUFPLENBQ1Y7QUFFRDVCLEtBQUssQ0FBQ3VCLE1BQU0sRUFBRTs7QUFHZDtBQUNBO0FBQ0E7QUFDQSxJQUFJN0IsTUFBTSxHQUFHLENBQUMsU0FBUyxDQUFDO0FBQ3hCLElBQUlDLFVBQVUsR0FBR0MsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDQyxJQUFJLENBQUMsUUFBUSxDQUFDO0FBQ2hELElBQUlGLFVBQVUsRUFBRTtFQUNaRCxNQUFNLEdBQUdDLFVBQVUsQ0FBQ0csS0FBSyxDQUFDLEdBQUcsQ0FBQztBQUNsQztBQUNBLElBQUk4QixPQUFPLEdBQUc7RUFDVjVCLEtBQUssRUFBRTtJQUNIRSxNQUFNLEVBQUUsR0FBRztJQUNYRCxJQUFJLEVBQUUsS0FBSztJQUNYNkIsT0FBTyxFQUFFO01BQ0xDLElBQUksRUFBRTtJQUNWO0VBQ0osQ0FBQztFQUNENEMsV0FBVyxFQUFFO0lBQ1RDLEdBQUcsRUFBRTtNQUNEQyxVQUFVLEVBQUU7SUFDaEI7RUFDSixDQUFDO0VBQ0RsRyxVQUFVLEVBQUU7SUFDUkMsT0FBTyxFQUFFO0VBQ2IsQ0FBQztFQUNENkIsTUFBTSxFQUFFLENBQUM7SUFDTFosSUFBSSxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSTtFQUM5RCxDQUFDLENBQUM7RUFDRkgsTUFBTSxFQUFFQSxNQUFNO0VBQ2RnQyxLQUFLLEVBQUU7SUFDSFksVUFBVSxFQUFFLENBQUMsYUFBYSxFQUFFLFFBQVEsRUFBRSxnQkFBZ0IsRUFBRSxhQUFhLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE9BQU8sRUFBRSxTQUFTO0VBQzFJLENBQUM7RUFDRHlELE1BQU0sRUFBRTtJQUNKckMsS0FBSyxFQUFFO01BQ0hzQyxNQUFNLEVBQUU7SUFDWjtFQUNKLENBQUM7RUFDRHpILElBQUksRUFBRTtJQUNGNEQsV0FBVyxFQUFFO0VBQ2pCO0FBQ0osQ0FBQztBQUVELElBQUluQyxLQUFLLEdBQUcsSUFBSW9CLFVBQVUsQ0FDdEJDLFFBQVEsQ0FBQ0MsYUFBYSxDQUFDLGFBQWEsQ0FBQyxFQUNyQ00sT0FBTyxDQUNWO0FBRUQ1QixLQUFLLENBQUN1QixNQUFNLEVBQUU7O0FBR2Q7QUFDQTtBQUNBO0FBQ0EsSUFBSTdCLE1BQU0sR0FBRyxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUM7QUFDbkMsSUFBSUMsVUFBVSxHQUFHQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUNDLElBQUksQ0FBQyxRQUFRLENBQUM7QUFDaEQsSUFBSUYsVUFBVSxFQUFFO0VBQ1pELE1BQU0sR0FBR0MsVUFBVSxDQUFDRyxLQUFLLENBQUMsR0FBRyxDQUFDO0FBQ2xDO0FBQ0EsSUFBSThCLE9BQU8sR0FBQXFFLGVBQUE7RUFDUGpHLEtBQUssRUFBRTtJQUNIRSxNQUFNLEVBQUUsR0FBRztJQUNYRCxJQUFJLEVBQUUsS0FBSztJQUNYMEQsT0FBTyxFQUFFLElBQUk7SUFDYjdCLE9BQU8sRUFBRTtNQUNMQyxJQUFJLEVBQUU7SUFDVjtFQUNKLENBQUM7RUFDRHJDLE1BQU0sRUFBRUEsTUFBTTtFQUNkaUYsV0FBVyxFQUFFO0lBQ1RDLEdBQUcsRUFBRTtNQUNEQyxVQUFVLEVBQUUsSUFBSTtNQUNoQnFCLFNBQVMsRUFBRTtJQUVmO0VBQ0osQ0FBQztFQUNEdkgsVUFBVSxFQUFFO0lBQ1JDLE9BQU8sRUFBRTtFQUNiLENBQUM7RUFDRHdCLE1BQU0sRUFBRTtJQUNKQyxLQUFLLEVBQUUsQ0FBQztJQUNSWCxNQUFNLEVBQUUsQ0FBQyxNQUFNO0VBQ25CLENBQUM7RUFDRGUsTUFBTSxFQUFFLENBQUM7SUFDREMsSUFBSSxFQUFFLE9BQU87SUFDYmIsSUFBSSxFQUFFLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO0VBQ2xHLENBQUMsRUFDRDtJQUNJYSxJQUFJLEVBQUUsU0FBUztJQUNmYixJQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUc7RUFDekgsQ0FBQyxDQUNKO0VBQ0R0QixJQUFJLEVBQUU7SUFDRm1ELEtBQUssRUFBRTtNQUNIeUUsU0FBUyxFQUFFO0lBQ2Y7RUFDSixDQUFDO0VBQ0R4RixLQUFLLEVBQUU7SUFDSEMsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUNQMkIsR0FBRyxFQUFFLENBQUM7SUFDTjFCLEtBQUssRUFBRTtNQUNIO0lBQUE7RUFFUixDQUFDO0VBQ0RvRSxPQUFPLEVBQUU7SUFDTFcsTUFBTSxFQUFFLEtBQUs7SUFDYnBCLENBQUMsRUFBRTtNQUNDVSxTQUFTLEVBQUUsU0FBQUEsVUFBVUMsR0FBRyxFQUFFO1FBQ3RCLE9BQU9BLEdBQUc7TUFDZDtJQUNKLENBQUM7SUFDRFYsQ0FBQyxFQUFFO01BQ0NTLFNBQVMsRUFBRSxTQUFBQSxVQUFVQyxHQUFHLEVBQUU7UUFDdEIsT0FBTzlGLElBQUksQ0FBQytHLEdBQUcsQ0FBQ2pCLEdBQUcsQ0FBQyxHQUFHLEdBQUc7TUFDOUI7SUFDSjtFQUNKLENBQUM7RUFDRHpELEtBQUssRUFBRTtJQUNIWSxVQUFVLEVBQUUsQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQztJQUN4S3pCLEtBQUssRUFBRTtNQUNIQyxJQUFJLEVBQUU7SUFDVixDQUFDO0lBQ0RzRSxNQUFNLEVBQUU7TUFDSkYsU0FBUyxFQUFFLFNBQUFBLFVBQVVDLEdBQUcsRUFBRTtRQUN0QixPQUFPOUYsSUFBSSxDQUFDK0csR0FBRyxDQUFDL0csSUFBSSxDQUFDZ0gsS0FBSyxDQUFDbEIsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHO01BQzFDO0lBQ0o7RUFDSixDQUFDO0VBQ0QzQyxNQUFNLEVBQUU7SUFDSnJCLE9BQU8sRUFBRTtFQUNiO0FBQUMsV0FDSztFQUNGZ0IsV0FBVyxFQUFFO0FBQ2pCLENBQUMsQ0FDSjtBQUVELElBQUluQyxLQUFLLEdBQUcsSUFBSW9CLFVBQVUsQ0FDdEJDLFFBQVEsQ0FBQ0MsYUFBYSxDQUFDLGFBQWEsQ0FBQyxFQUNyQ00sT0FBTyxDQUNWO0FBRUQ1QixLQUFLLENBQUN1QixNQUFNLEVBQUU7O0FBR2Q7QUFDQTtBQUNBO0FBQ0EsSUFBSTdCLE1BQU0sR0FBRyxDQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxDQUFDO0FBQzlDLElBQUlDLFVBQVUsR0FBR0MsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDQyxJQUFJLENBQUMsUUFBUSxDQUFDO0FBQ2xELElBQUlGLFVBQVUsRUFBRTtFQUNaRCxNQUFNLEdBQUdDLFVBQVUsQ0FBQ0csS0FBSyxDQUFDLEdBQUcsQ0FBQztBQUNsQztBQUNBLElBQUk4QixPQUFPLEdBQUc7RUFDVjVCLEtBQUssRUFBRTtJQUNIRSxNQUFNLEVBQUUsR0FBRztJQUNYRCxJQUFJLEVBQUUsTUFBTTtJQUNaekIsT0FBTyxFQUFFO01BQ0xDLEtBQUssRUFBRSxDQUFDO01BQ1JDLElBQUksRUFBRTtJQUNWLENBQUM7SUFDRGlGLE9BQU8sRUFBRSxLQUFLO0lBQ2Q3QixPQUFPLEVBQUU7TUFDTEMsSUFBSSxFQUFFO0lBQ1Y7RUFDSixDQUFDO0VBQ0QzQixNQUFNLEVBQUU7SUFDSkMsS0FBSyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDaEJDLEtBQUssRUFBRTtFQUNYLENBQUM7RUFDRHFFLFdBQVcsRUFBRTtJQUNUQyxHQUFHLEVBQUU7TUFDREcsV0FBVyxFQUFFO0lBQ2pCO0VBQ0osQ0FBQztFQUNEckYsTUFBTSxFQUFFQSxNQUFNO0VBQ2RlLE1BQU0sRUFBRSxDQUFDO0lBQ0xDLElBQUksRUFBRSxRQUFRO0lBQ2RULElBQUksRUFBRSxRQUFRO0lBQ2RKLElBQUksRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFO0VBQ3JELENBQUMsRUFBRTtJQUNDYSxJQUFJLEVBQUUsUUFBUTtJQUNkVCxJQUFJLEVBQUUsTUFBTTtJQUNaSixJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRTtFQUNyRCxDQUFDLEVBQUU7SUFDQ2EsSUFBSSxFQUFFLFFBQVE7SUFDZFQsSUFBSSxFQUFFLE1BQU07SUFDWkosSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUU7RUFDckQsQ0FBQyxDQUFDO0VBQ0ZVLElBQUksRUFBRTtJQUNGQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUN4QnlDLFFBQVEsRUFBRTtNQUNOeUMsYUFBYSxFQUFFLEtBQUs7TUFDcEJ4QyxLQUFLLEVBQUUsT0FBTztNQUNkakQsSUFBSSxFQUFFLFVBQVU7TUFDaEJvRCxXQUFXLEVBQUUsSUFBSTtNQUNqQkMsU0FBUyxFQUFFLElBQUk7TUFDZkMsS0FBSyxFQUFFLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRztJQUM1QjtFQUNKLENBQUM7RUFDRDZCLE1BQU0sRUFBRSxDQUFDLFlBQVksRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxZQUFZLENBQUM7RUFDbEtoRCxPQUFPLEVBQUU7SUFDTEMsSUFBSSxFQUFFO0VBQ1YsQ0FBQztFQUNERyxNQUFNLEVBQUU7SUFDSnJCLE9BQU8sRUFBRTtFQUNiLENBQUM7RUFDRE8sS0FBSyxFQUFFO0lBQ0h6QixJQUFJLEVBQUU7RUFDVixDQUFDO0VBQ0RVLEtBQUssRUFBRTtJQUNIRSxLQUFLLEVBQUU7TUFDSEMsSUFBSSxFQUFFO0lBQ1Y7RUFDSixDQUFDO0VBQ0RtRSxPQUFPLEVBQUU7SUFDTFcsTUFBTSxFQUFFLElBQUk7SUFDWkMsU0FBUyxFQUFFLEtBQUs7SUFDaEJwQixDQUFDLEVBQUU7TUFDQ1MsU0FBUyxFQUFFLFNBQUFBLFVBQVVULENBQUMsRUFBRTtRQUNwQixJQUFJLE9BQU9BLENBQUMsS0FBSyxXQUFXLEVBQUU7VUFDMUIsT0FBT0EsQ0FBQyxDQUFDcUIsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLFNBQVM7UUFDbkM7UUFDQSxPQUFPckIsQ0FBQztNQUVaO0lBQ0o7RUFDSixDQUFDO0VBQ0RsRyxJQUFJLEVBQUU7SUFDRjRELFdBQVcsRUFBRSxTQUFTO0lBQ3RCM0QsT0FBTyxFQUFFO01BQ0x3RyxNQUFNLEVBQUU7SUFDWjtFQUNKO0FBQ0osQ0FBQztBQUVELElBQUloRixLQUFLLEdBQUcsSUFBSW9CLFVBQVUsQ0FDdEJDLFFBQVEsQ0FBQ0MsYUFBYSxDQUFDLGVBQWUsQ0FBQyxFQUN2Q00sT0FBTyxDQUNWO0FBRUQ1QixLQUFLLENBQUN1QixNQUFNLEVBQUU7O0FBR2Q7QUFDQTtBQUNBO0FBQ0EsSUFBSTdCLE1BQU0sR0FBRyxDQUFDLHlCQUF5QixDQUFDO0FBQ3hDLElBQUlDLFVBQVUsR0FBR0MsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDQyxJQUFJLENBQUMsUUFBUSxDQUFDO0FBQ2xELElBQUlGLFVBQVUsRUFBRTtFQUNaRCxNQUFNLEdBQUdDLFVBQVUsQ0FBQ0csS0FBSyxDQUFDLEdBQUcsQ0FBQztBQUNsQztBQUNBLElBQUk4QixPQUFPLEdBQUc7RUFDVjVCLEtBQUssRUFBRTtJQUNIRSxNQUFNLEVBQUUsR0FBRztJQUNYRCxJQUFJLEVBQUUsTUFBTTtJQUNaMEQsT0FBTyxFQUFFLEtBQUs7SUFDZDdCLE9BQU8sRUFBRTtNQUNMQyxJQUFJLEVBQUU7SUFDVjtFQUNKLENBQUM7RUFDRHBELFVBQVUsRUFBRTtJQUNSQyxPQUFPLEVBQUU7RUFDYixDQUFDO0VBQ0R3QixNQUFNLEVBQUU7SUFDSkMsS0FBSyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO0VBQ25CLENBQUM7RUFDREksTUFBTSxFQUFFLENBQUM7SUFDTEMsSUFBSSxFQUFFLFFBQVE7SUFDZFQsSUFBSSxFQUFFLFFBQVE7SUFDZEosSUFBSSxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUc7RUFDL0MsQ0FBQyxFQUFFO0lBQ0NhLElBQUksRUFBRSxVQUFVO0lBQ2hCVCxJQUFJLEVBQUUsUUFBUTtJQUNkSixJQUFJLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRztFQUM3QyxDQUFDLEVBQUU7SUFDQ2EsSUFBSSxFQUFFLFNBQVM7SUFDZlQsSUFBSSxFQUFFLE1BQU07SUFDWkosSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUU7RUFDekMsQ0FBQyxDQUFDO0VBQ0ZILE1BQU0sRUFBRUEsTUFBTTtFQUNkZ0MsS0FBSyxFQUFFO0lBQ0hZLFVBQVUsRUFBRSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJO0VBQy9ELENBQUM7RUFDRDNCLEtBQUssRUFBRSxDQUFDO0lBQ0EyRSxTQUFTLEVBQUU7TUFDUHZELElBQUksRUFBRTtJQUNWLENBQUM7SUFDRHNELFVBQVUsRUFBRTtNQUNSdEQsSUFBSSxFQUFFLElBQUk7TUFDVkUsS0FBSyxFQUFFO0lBQ1gsQ0FBQztJQUNEbUQsTUFBTSxFQUFFO01BQ0pwRSxLQUFLLEVBQUU7UUFDSGlCLEtBQUssRUFBRTtNQUNYO0lBQ0osQ0FBQztJQUNEcEIsS0FBSyxFQUFFO01BQ0hDLElBQUksRUFBRTtJQUNWO0VBQ0osQ0FBQyxFQUVEO0lBQ0l3RSxTQUFTLEVBQUU7TUFDUHZELElBQUksRUFBRTtJQUNWLENBQUM7SUFDRHNELFVBQVUsRUFBRTtNQUNSdEQsSUFBSSxFQUFFLElBQUk7TUFDVkUsS0FBSyxFQUFFO0lBQ1gsQ0FBQztJQUNEbUQsTUFBTSxFQUFFO01BQ0pwRSxLQUFLLEVBQUU7UUFDSGlCLEtBQUssRUFBRTtNQUNYLENBQUM7TUFDRGxCLE9BQU8sRUFBRTtJQUNiLENBQUM7SUFDREYsS0FBSyxFQUFFO01BQ0hDLElBQUksRUFBRTtJQUNWO0VBQ0osQ0FBQyxFQUNEO0lBQ0k2RSxRQUFRLEVBQUUsSUFBSTtJQUNkTCxTQUFTLEVBQUU7TUFDUHZELElBQUksRUFBRTtJQUNWLENBQUM7SUFDRHNELFVBQVUsRUFBRTtNQUNSdEQsSUFBSSxFQUFFLElBQUk7TUFDVkUsS0FBSyxFQUFFO0lBQ1gsQ0FBQztJQUNEbUQsTUFBTSxFQUFFO01BQ0pwRSxLQUFLLEVBQUU7UUFDSGlCLEtBQUssRUFBRTtNQUNYO0lBQ0osQ0FBQztJQUNEcEIsS0FBSyxFQUFFO01BQ0hDLElBQUksRUFBRTtJQUNWO0VBQ0osQ0FBQyxDQUVKO0VBQ0RtRSxPQUFPLEVBQUU7SUFDTHFCLFlBQVksRUFBRSxJQUFJO0lBQ2xCN0IsQ0FBQyxFQUFFO01BQ0NTLFNBQVMsRUFBRSxTQUFBQSxVQUFVVCxDQUFDLEVBQUU7UUFDcEIsSUFBSSxPQUFPQSxDQUFDLEtBQUssV0FBVyxFQUFFO1VBQzFCLE9BQU9BLENBQUMsR0FBRyxrQkFBa0I7UUFDakM7UUFDQSxPQUFPQSxDQUFDO01BQ1o7SUFDSjtFQUNKLENBQUM7RUFDRGxHLElBQUksRUFBRTtJQUNGNEQsV0FBVyxFQUFFLFNBQVM7SUFDdEIzRCxPQUFPLEVBQUU7TUFDTHdHLE1BQU0sRUFBRTtJQUNaO0VBQ0osQ0FBQztFQUNEeEMsTUFBTSxFQUFFO0lBQ0pyQixPQUFPLEVBQUU7RUFDYixDQUFDO0VBQ0R5QixVQUFVLEVBQUUsQ0FBQztJQUNUQyxVQUFVLEVBQUUsR0FBRztJQUNmakIsT0FBTyxFQUFFO01BQ0xqQixLQUFLLEVBQUU7UUFDSG9CLElBQUksRUFBRTtNQUNWLENBQUM7TUFDRFMsTUFBTSxFQUFFO1FBQ0pULElBQUksRUFBRTtNQUNWO0lBQ0o7RUFDSixDQUFDO0FBQ0wsQ0FBQztBQUVELElBQUkvQixLQUFLLEdBQUcsSUFBSW9CLFVBQVUsQ0FDdEJDLFFBQVEsQ0FBQ0MsYUFBYSxDQUFDLGVBQWUsQ0FBQyxFQUN2Q00sT0FBTyxDQUNWO0FBRUQ1QixLQUFLLENBQUN1QixNQUFNLEVBQUU7O0FBR2Q7QUFDQTtBQUNBOztBQUdBLFNBQVNnRixZQUFZQSxDQUFDbkMsT0FBTyxFQUFFQyxLQUFLLEVBQUVDLE1BQU0sRUFBRTtFQUMxQyxJQUFJQyxDQUFDLEdBQUcsQ0FBQztFQUNULElBQUk5RCxNQUFNLEdBQUcsRUFBRTtFQUNmLE9BQU84RCxDQUFDLEdBQUdGLEtBQUssRUFBRTtJQUNkLElBQUlHLENBQUMsR0FBR25GLElBQUksQ0FBQ0MsS0FBSyxDQUFDRCxJQUFJLENBQUNFLE1BQU0sRUFBRSxJQUFJLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO0lBQUM7SUFDdEQsSUFBSWtGLENBQUMsR0FBR3BGLElBQUksQ0FBQ0MsS0FBSyxDQUFDRCxJQUFJLENBQUNFLE1BQU0sRUFBRSxJQUFJK0UsTUFBTSxDQUFDL0IsR0FBRyxHQUFHK0IsTUFBTSxDQUFDMUQsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcwRCxNQUFNLENBQUMxRCxHQUFHO0lBQzlFLElBQUk0RixDQUFDLEdBQUduSCxJQUFJLENBQUNDLEtBQUssQ0FBQ0QsSUFBSSxDQUFDRSxNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRTtJQUV0RGtCLE1BQU0sQ0FBQ2lFLElBQUksQ0FBQyxDQUFDRixDQUFDLEVBQUVDLENBQUMsRUFBRStCLENBQUMsQ0FBQyxDQUFDO0lBQ3RCcEMsT0FBTyxJQUFJLFFBQVE7SUFDbkJHLENBQUMsRUFBRTtFQUNQO0VBQ0EsT0FBTzlELE1BQU07QUFDakI7QUFFQSxJQUFJZixNQUFNLEdBQUcsQ0FBQyx5QkFBeUIsQ0FBQztBQUN4QyxJQUFJQyxVQUFVLEdBQUdDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDQyxJQUFJLENBQUMsUUFBUSxDQUFDO0FBQ25ELElBQUlGLFVBQVUsRUFBRTtFQUNaRCxNQUFNLEdBQUdDLFVBQVUsQ0FBQ0csS0FBSyxDQUFDLEdBQUcsQ0FBQztBQUNsQztBQUNBLElBQUk4QixPQUFPLEdBQUc7RUFDVjVCLEtBQUssRUFBRTtJQUNIRSxNQUFNLEVBQUUsR0FBRztJQUNYRCxJQUFJLEVBQUUsUUFBUTtJQUNkNkIsT0FBTyxFQUFFO01BQ0xDLElBQUksRUFBRTtJQUNWO0VBQ0osQ0FBQztFQUNEcEQsVUFBVSxFQUFFO0lBQ1JDLE9BQU8sRUFBRTtFQUNiLENBQUM7RUFDRDZCLE1BQU0sRUFBRSxDQUFDO0lBQ0RDLElBQUksRUFBRSxVQUFVO0lBQ2hCYixJQUFJLEVBQUUwRyxZQUFZLENBQUMsSUFBSXRDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDRSxPQUFPLEVBQUUsRUFBRSxFQUFFLEVBQUU7TUFDMUR2RCxHQUFHLEVBQUUsRUFBRTtNQUNQMkIsR0FBRyxFQUFFO0lBQ1QsQ0FBQztFQUNMLENBQUMsRUFDRDtJQUNJN0IsSUFBSSxFQUFFLFVBQVU7SUFDaEJiLElBQUksRUFBRTBHLFlBQVksQ0FBQyxJQUFJdEMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUNFLE9BQU8sRUFBRSxFQUFFLEVBQUUsRUFBRTtNQUMxRHZELEdBQUcsRUFBRSxFQUFFO01BQ1AyQixHQUFHLEVBQUU7SUFDVCxDQUFDO0VBQ0wsQ0FBQyxFQUNEO0lBQ0k3QixJQUFJLEVBQUUsVUFBVTtJQUNoQmIsSUFBSSxFQUFFMEcsWUFBWSxDQUFDLElBQUl0QyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQ0UsT0FBTyxFQUFFLEVBQUUsRUFBRSxFQUFFO01BQzFEdkQsR0FBRyxFQUFFLEVBQUU7TUFDUDJCLEdBQUcsRUFBRTtJQUNULENBQUM7RUFDTCxDQUFDLENBQ0o7RUFDRGhDLElBQUksRUFBRTtJQUNGQyxPQUFPLEVBQUUsR0FBRztJQUNaeUMsUUFBUSxFQUFFO01BQ05yRSxPQUFPLEVBQUU7SUFDYjtFQUNKLENBQUM7RUFDRGMsTUFBTSxFQUFFQSxNQUFNO0VBQ2RnQyxLQUFLLEVBQUU7SUFDSCtFLFVBQVUsRUFBRSxFQUFFO0lBQ2R4RyxJQUFJLEVBQUU7RUFDVixDQUFDO0VBQ0RVLEtBQUssRUFBRTtJQUNINEIsR0FBRyxFQUFFO0VBQ1QsQ0FBQztFQUNEaEUsSUFBSSxFQUFFO0lBQ0Y0RCxXQUFXLEVBQUUsU0FBUztJQUN0QjNELE9BQU8sRUFBRTtNQUNMd0csTUFBTSxFQUFFO0lBQ1o7RUFDSixDQUFDO0VBQ0R4QyxNQUFNLEVBQUU7SUFDSnJCLE9BQU8sRUFBRTtFQUNiO0FBQ0osQ0FBQztBQUVELElBQUluQixLQUFLLEdBQUcsSUFBSW9CLFVBQVUsQ0FDdEJDLFFBQVEsQ0FBQ0MsYUFBYSxDQUFDLGdCQUFnQixDQUFDLEVBQ3hDTSxPQUFPLENBQ1Y7QUFFRDVCLEtBQUssQ0FBQ3VCLE1BQU0sRUFBRTs7QUFHZDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU21GLGFBQWFBLENBQUNDLFFBQVEsRUFBRXRDLEtBQUssRUFBRUMsTUFBTSxFQUFFO0VBQzVDLElBQUlDLENBQUMsR0FBRyxDQUFDO0VBQ1QsSUFBSTlELE1BQU0sR0FBRyxFQUFFO0VBQ2YsT0FBTzhELENBQUMsR0FBR0YsS0FBSyxFQUFFO0lBQ2Q7SUFDQSxJQUFJSSxDQUFDLEdBQUdwRixJQUFJLENBQUNDLEtBQUssQ0FBQ0QsSUFBSSxDQUFDRSxNQUFNLEVBQUUsSUFBSStFLE1BQU0sQ0FBQy9CLEdBQUcsR0FBRytCLE1BQU0sQ0FBQzFELEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHMEQsTUFBTSxDQUFDMUQsR0FBRztJQUM5RSxJQUFJNEYsQ0FBQyxHQUFHbkgsSUFBSSxDQUFDQyxLQUFLLENBQUNELElBQUksQ0FBQ0UsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUU7SUFFdERrQixNQUFNLENBQUNpRSxJQUFJLENBQUMsQ0FBQ2lDLFFBQVEsRUFBRWxDLENBQUMsRUFBRStCLENBQUMsQ0FBQyxDQUFDO0lBQzdCRyxRQUFRLElBQUksUUFBUTtJQUNwQnBDLENBQUMsRUFBRTtFQUNQO0VBQ0EsT0FBTzlELE1BQU07QUFDakI7QUFFQSxJQUFJZixNQUFNLEdBQUcsQ0FBQyxpQ0FBaUMsQ0FBQztBQUNoRCxJQUFJQyxVQUFVLEdBQUdDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDQyxJQUFJLENBQUMsUUFBUSxDQUFDO0FBQ25ELElBQUlGLFVBQVUsRUFBRTtFQUNaRCxNQUFNLEdBQUdDLFVBQVUsQ0FBQ0csS0FBSyxDQUFDLEdBQUcsQ0FBQztBQUNsQztBQUNBLElBQUk4RyxRQUFRLEdBQUc7RUFDWDVHLEtBQUssRUFBRTtJQUNIRSxNQUFNLEVBQUUsR0FBRztJQUNYRCxJQUFJLEVBQUUsUUFBUTtJQUNkNkIsT0FBTyxFQUFFO01BQ0xDLElBQUksRUFBRTtJQUNWO0VBQ0osQ0FBQztFQUNEcEQsVUFBVSxFQUFFO0lBQ1JDLE9BQU8sRUFBRTtFQUNiLENBQUM7RUFDRDZCLE1BQU0sRUFBRSxDQUFDO0lBQ0RDLElBQUksRUFBRSxXQUFXO0lBQ2pCYixJQUFJLEVBQUU2RyxhQUFhLENBQUMsSUFBSXpDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDRSxPQUFPLEVBQUUsRUFBRSxFQUFFLEVBQUU7TUFDM0R2RCxHQUFHLEVBQUUsRUFBRTtNQUNQMkIsR0FBRyxFQUFFO0lBQ1QsQ0FBQztFQUNMLENBQUMsRUFDRDtJQUNJN0IsSUFBSSxFQUFFLFdBQVc7SUFDakJiLElBQUksRUFBRTZHLGFBQWEsQ0FBQyxJQUFJekMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUNFLE9BQU8sRUFBRSxFQUFFLEVBQUUsRUFBRTtNQUMzRHZELEdBQUcsRUFBRSxFQUFFO01BQ1AyQixHQUFHLEVBQUU7SUFDVCxDQUFDO0VBQ0wsQ0FBQyxFQUNEO0lBQ0k3QixJQUFJLEVBQUUsV0FBVztJQUNqQmIsSUFBSSxFQUFFNkcsYUFBYSxDQUFDLElBQUl6QyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQ0UsT0FBTyxFQUFFLEVBQUUsRUFBRSxFQUFFO01BQzNEdkQsR0FBRyxFQUFFLEVBQUU7TUFDUDJCLEdBQUcsRUFBRTtJQUNULENBQUM7RUFDTCxDQUFDLEVBQ0Q7SUFDSTdCLElBQUksRUFBRSxXQUFXO0lBQ2pCYixJQUFJLEVBQUU2RyxhQUFhLENBQUMsSUFBSXpDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDRSxPQUFPLEVBQUUsRUFBRSxFQUFFLEVBQUU7TUFDM0R2RCxHQUFHLEVBQUUsRUFBRTtNQUNQMkIsR0FBRyxFQUFFO0lBQ1QsQ0FBQztFQUNMLENBQUMsQ0FDSjtFQUNEaEMsSUFBSSxFQUFFO0lBQ0ZOLElBQUksRUFBRTtFQUNWLENBQUM7RUFDRFAsTUFBTSxFQUFFQSxNQUFNO0VBQ2RnQyxLQUFLLEVBQUU7SUFDSCtFLFVBQVUsRUFBRSxFQUFFO0lBQ2R4RyxJQUFJLEVBQUUsVUFBVTtJQUVoQm1GLE1BQU0sRUFBRTtNQUNKeUIsTUFBTSxFQUFFO0lBQ1o7RUFDSixDQUFDO0VBQ0RsRyxLQUFLLEVBQUU7SUFDSDRCLEdBQUcsRUFBRTtFQUNULENBQUM7RUFDREMsTUFBTSxFQUFFO0lBQ0pyQixPQUFPLEVBQUU7RUFDYixDQUFDO0VBQ0Q1QyxJQUFJLEVBQUU7SUFDRjRELFdBQVcsRUFBRSxTQUFTO0lBQ3RCM0QsT0FBTyxFQUFFO01BQ0x3RyxNQUFNLEVBQUU7SUFDWjtFQUNKO0FBQ0osQ0FBQztBQUVELElBQUloRixLQUFLLEdBQUcsSUFBSW9CLFVBQVUsQ0FDdEJDLFFBQVEsQ0FBQ0MsYUFBYSxDQUFDLGdCQUFnQixDQUFDLEVBQ3hDc0YsUUFBUSxDQUNYO0FBRUQ1RyxLQUFLLENBQUN1QixNQUFNLEVBQUU7O0FBR2Q7QUFDQTtBQUNBOztBQUVBLElBQUk3QixNQUFNLEdBQUcsQ0FBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsQ0FBQztBQUM5QyxJQUFJQyxVQUFVLEdBQUdDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDQyxJQUFJLENBQUMsUUFBUSxDQUFDO0FBQ3BELElBQUlGLFVBQVUsRUFBRTtFQUNaRCxNQUFNLEdBQUdDLFVBQVUsQ0FBQ0csS0FBSyxDQUFDLEdBQUcsQ0FBQztBQUNsQztBQUNBLElBQUk4QixPQUFPLEdBQUc7RUFDVjVCLEtBQUssRUFBRTtJQUNIRSxNQUFNLEVBQUUsR0FBRztJQUNYRCxJQUFJLEVBQUUsU0FBUztJQUNmNEIsSUFBSSxFQUFFO01BQ0ZqRCxPQUFPLEVBQUU7SUFDYjtFQUNKLENBQUM7RUFFRDZCLE1BQU0sRUFBRSxDQUFDO0lBQ0xDLElBQUksRUFBRSxVQUFVO0lBQ2hCYixJQUFJLEVBQUUsQ0FDRixDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsRUFDWCxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFDVCxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFDVCxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFDUCxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFDVCxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsRUFDWCxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsRUFDWCxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFDVCxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsRUFDWCxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFDVCxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsRUFDWCxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsRUFDWCxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFDVCxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFDVCxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsRUFDWCxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFDVCxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsRUFDWCxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsRUFDWCxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsRUFDWCxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFDVCxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsRUFDWCxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFDVCxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFDVixDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFDUCxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsRUFDWCxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFDVCxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFDVCxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFDVCxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsRUFDWCxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsRUFDWCxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7RUFFakIsQ0FBQyxFQUFFO0lBQ0NhLElBQUksRUFBRSxVQUFVO0lBQ2hCYixJQUFJLEVBQUUsQ0FDRixDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFDWCxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFDVCxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFDUixDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFDUCxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFDUixDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFDWCxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFDWCxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFDUixDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFDWCxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFDUixDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFDVixDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFDVixDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFDVCxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFDUixDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFDVCxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFDUixDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFDWCxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFDWCxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFDWCxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFDVCxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFDWCxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsRUFDVixDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFDWCxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFDUCxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsRUFDWixDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFDVCxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFDVCxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsRUFDVixDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFDWCxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFDWCxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUM7RUFFakIsQ0FBQyxFQUFFO0lBQ0NhLElBQUksRUFBRSxVQUFVO0lBQ2hCYixJQUFJLEVBQUUsQ0FDRixDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFDVCxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsRUFDWCxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFDVCxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFDVCxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsRUFDVixDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFDUCxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFDVCxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFDUCxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsRUFDWCxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFDVCxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFDVCxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFDUCxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFDVCxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFDVCxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFDVCxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFDVCxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFDVCxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFDVCxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFDVCxDQUFDLElB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\n//# sourceURL=webpack-internal:///./resources/js/pages/apexcharts.init.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/pages/apexcharts.init.js"]();
/******/ 	
/******/ })()
;